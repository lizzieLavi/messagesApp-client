[{"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\index.js":"1","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\App.js":"2","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\login.js":"3","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\dashboard.js":"4","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sidebar.js":"5","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chat.js":"6","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\conversations.js":"7","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\contacts.js":"8","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\addnewcontact.js":"9","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\conversationsprovider.js":"10","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\SocketProvider.js":"11","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\socketprovider.js":"12","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\createnewgroup.js":"13","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\register.js":"14","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\userprovider.js":"15","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chatbody.js":"16","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sendimagebody.js":"17","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\message.js":"18","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\audiomessage.js":"19","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\addgroupmember.js":"20","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\profiledetails.js":"21","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\showgroupdetails.js":"22","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\showuserdetails.js":"23"},{"size":210,"mtime":1631630702444,"results":"24","hashOfConfig":"25"},{"size":1130,"mtime":1632748038158,"results":"26","hashOfConfig":"25"},{"size":2249,"mtime":1632753261485,"results":"27","hashOfConfig":"25"},{"size":591,"mtime":1632754709794,"results":"28","hashOfConfig":"25"},{"size":4240,"mtime":1632755047383,"results":"29","hashOfConfig":"25"},{"size":3796,"mtime":1632919753102,"results":"30","hashOfConfig":"25"},{"size":1371,"mtime":1632929991415,"results":"31","hashOfConfig":"25"},{"size":1526,"mtime":1632929768164,"results":"32","hashOfConfig":"25"},{"size":1620,"mtime":1632739485787,"results":"33","hashOfConfig":"25"},{"size":17832,"mtime":1635427870718,"results":"34","hashOfConfig":"25"},{"size":618,"mtime":1628171499502,"results":"35","hashOfConfig":"25"},{"size":920,"mtime":1632820060067,"results":"36","hashOfConfig":"25"},{"size":6057,"mtime":1632752970178,"results":"37","hashOfConfig":"25"},{"size":7626,"mtime":1635427497873,"results":"38","hashOfConfig":"25"},{"size":3667,"mtime":1632945422918,"results":"39","hashOfConfig":"25"},{"size":7878,"mtime":1632944590312,"results":"40","hashOfConfig":"25"},{"size":1866,"mtime":1632754612931,"results":"41","hashOfConfig":"25"},{"size":1623,"mtime":1632929337066,"results":"42","hashOfConfig":"25"},{"size":1251,"mtime":1632748148339,"results":"43","hashOfConfig":"25"},{"size":4629,"mtime":1632739528059,"results":"44","hashOfConfig":"25"},{"size":7860,"mtime":1632945422906,"results":"45","hashOfConfig":"25"},{"size":15014,"mtime":1632754660618,"results":"46","hashOfConfig":"25"},{"size":1394,"mtime":1632920192363,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1rq4wqq",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\index.js",[],["98","99"],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\App.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\login.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\dashboard.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sidebar.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chat.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\conversations.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\contacts.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\addnewcontact.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\conversationsprovider.js",["100","101","102","103","104","105","106","107","108"],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\SocketProvider.js",[],["109","110"],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\socketprovider.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\createnewgroup.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\register.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\userprovider.js",["111","112"],"\r\nimport React, { useState ,useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nimport { useSocket } from \"./socketprovider\";\r\nconst UserContext = React.createContext()\r\n\r\n\r\nexport function useUser() \r\n{\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n  const {socket} = useSocket();\r\n  const [updateFlag,setUpdateFlag]=useState(true)\r\n\r\n  \r\n  useEffect( () =>\r\n  {\r\n    async function fetchData() \r\n    {\r\n      getContacts().then(res=> setContacts(res))\r\n    }\r\n\r\n    if(updateFlag)\r\n    {\r\n      fetchData();\r\n      setUpdateFlag(false)\r\n    }\r\n\r\n   },[updateFlag])\r\n\r\n   useEffect(()=>\r\n   {\r\n     async function fetchData() \r\n     {\r\n       if(socket.current ==null ) return;\r\n\r\n       //when other user updates contact information, update this user on changes\r\n       socket.current.on('update-contact',async ()=>\r\n       {\r\n         setUpdateFlag(true)\r\n       })\r\n \r\n   }\r\n \r\n   fetchData();\r\n \r\n   },[])\r\n\r\n   async function getContacts()\r\n   {\r\n      const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+sessionStorage['id'],config);\r\n      setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen,Status:response.data.Status,color:response.data.color})\r\n      console.log(response.data.contacts)\r\n      return(response.data.contacts)\r\n\r\n   }\r\n   \r\n\r\n  function getSearchContacts(str)\r\n  {\r\n    getContacts().then(res=>\r\n    {\r\n      let SearchResult =res.filter(contact=> contact.name.includes(str) === true)\r\n      setContacts(SearchResult)\r\n    })\r\n\r\n  }\r\n\r\n\r\n  const createContact = async(name) =>\r\n  {\r\n    \r\n    if(name === info.name)\r\n    {\r\n      return {status:'error',message:'cant Add yourself'};\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.name === name)\r\n\r\n    if(checkIfExists.length !== 0)\r\n    {\r\n      return {status:'error',message:'already exists'};\r\n    }\r\n\r\n    try\r\n    { \r\n\r\n      const response= await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByName/\" + name,config)\r\n\r\n      if(response.data !== 'no such user')\r\n      {\r\n        const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName,Status:response.data.Status,color:response.data.color}\r\n        let newContacts = [...contacts,contact]\r\n        setContacts(newContacts)\r\n        let UpdatedUser={...info,contacts:newContacts}\r\n        try\r\n        {\r\n          await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n        } catch(err){console.log(err)}\r\n      }\r\n      else return {status:'error',message:'user doesnt exist'};\r\n     \r\n    }catch(err){console.log(err)}\r\n\r\n    return {status:'ok'}\r\n\r\n  }\r\n\r\n  const updateInformation = async(user,userToContacts) =>\r\n  {\r\n    try\r\n    {\r\n      let response = await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],user,config)\r\n      if(response.data.status==='Updated')\r\n      {\r\n        setInfo({...user,id:sessionStorage['id']})\r\n        \r\n      }\r\n    }catch(err){console.log(err)}\r\n\r\n     socket.current.emit('contact-changed',userToContacts)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact,getSearchContacts,updateInformation }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chatbody.js",["113"],"import React from 'react'\r\nimport {useState ,useCallback,useEffect,useRef} from 'react'\r\nimport {useConversations} from '../contexts/conversationsprovider';\r\nimport {useSocket} from '../contexts/socketprovider';\r\nimport {useUser} from '../contexts/userprovider';\r\nimport {IconButton,Dialog } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Picker from 'emoji-picker-react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\nimport axios from 'axios'\r\nimport Message from './message';\r\nimport AudioMessage from './audiomessage';\r\n\r\n\r\nfunction ChatBody(props) {\r\n\r\n  const [Text,setText] = useState('')\r\n  const {socket} = useSocket()\r\n  const {info} = useUser()\r\n  const {sendMessage,selectedConversation,removedFromGroupFlag,setRemovedFromGroupFlag,setSelectedConversation} = useConversations()\r\n  const inputRef = useRef(null)\r\n  const [emojiFlag,setEmojiFlag] = useState(false)\r\n  const [recordFlag,setRecordFlag] =useState(false)\r\n  const {startRecording,stopRecording,mediaBlobUrl,clearBlobUrl} = useReactMediaRecorder({audio: true })\r\n  const [audioBlob,setAudioBlob] = useState(null)\r\n\r\n  //make messages scrolling down when message sent\r\n  const setRef = useCallback((node) => \r\n  {\r\n    if(node)\r\n      node.scrollIntoView({smooth:true})\r\n\r\n  },[])\r\n  \r\n  useEffect(()=>\r\n  {\r\n    setEmojiFlag(false)\r\n\r\n  },[selectedConversation])\r\n\r\n  \r\n\r\n  //when audio message sent, upload it to cloudinary and send it to conversation participants\r\n  useEffect( () => \r\n  {\r\n\r\n    async function fetchData() \r\n    {\r\n      if(audioBlob != null)\r\n      {\r\n        let audio= await fetch(mediaBlobUrl).then(res=> res.blob())\r\n        const data = new FormData();\r\n           \r\n        data.append('file', audio);\r\n        data.append('resource_type', 'video');\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n\r\n\r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/video/upload\",data)\r\n          let recordURL = response.data.url\r\n          recordURL=(recordURL.slice(0,-4))\r\n          recordURL+= 'mp3'\r\n          setRecordFlag(false)\r\n          clearBlobUrl()\r\n          sendMessage(Text,null,null,recordURL)\r\n          setRecordFlag(false)\r\n  \r\n        }catch(err){console.log(err)}\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n \r\n  },[audioBlob])\r\n\r\n\r\n  //when typing, let conversation participants know\r\n  function typing(e)\r\n  {\r\n\r\n    setText(e.target.value)\r\n    if (socket.current == null) return;\r\n      socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n\r\n  }\r\n\r\n\r\n  //send message to conversation participants\r\n  function handleSubmit(e)\r\n  {\r\n    e.preventDefault()\r\n    sendMessage(Text,false,null,null)\r\n    setText(' ')\r\n\r\n  }\r\n\r\n\r\n  //upload image to cloudinary\r\n  async function handleImage(e)\r\n  {\r\n\r\n    const data = new FormData()\r\n    data.append('file',e.target.files[0])\r\n    data.append(\"upload_preset\",\"whatsApp_clone\")\r\n    data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n    try\r\n    {\r\n\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n      props.imageCallback(response.data.url)\r\n      }catch(err){console.log(err)}\r\n\r\n    }\r\n\r\n\r\n  //when record start\r\n  function recordStart()\r\n  {\r\n\r\n    setRecordFlag(true)\r\n    startRecording()\r\n\r\n  }\r\n \r\n  //when record sent\r\n  async function handleRecord()\r\n  {\r\n    stopRecording()\r\n    let res = await fetch(mediaBlobUrl)\r\n    setAudioBlob(res.blob())     \r\n  }\r\n\r\n\r\n  //when record canceled\r\n  function cancelRecord()\r\n  {\r\n    stopRecording()\r\n    clearBlobUrl()\r\n    setRecordFlag(false)\r\n  }\r\n\r\n\r\n  //when recording, show recording div\r\n  function updateRecordingDiv()\r\n  {\r\n    let recordDiv = \r\n    <div>\r\n      <IconButton>\r\n        <CloseIcon fontSize='large' style={{color:'red'}} onClick={cancelRecord} />\r\n      </IconButton>\r\n      <IconButton>\r\n        <CheckIcon fontSize='large'style={{color:'green'}} onClick={handleRecord} />\r\n      </IconButton>\r\n    </div>\r\n\r\n    return recordDiv\r\n  \r\n  }\r\n\r\n  //if removed from group when group chat is on, dont show this group chat\r\n  function handleRemovedFromGroup()\r\n  {\r\n\r\n    setRemovedFromGroupFlag(false)\r\n    setSelectedConversation()\r\n\r\n  }\r\n    \r\n\r\n  //add emoji to message\r\n  const onEmojiClick = (event, emojiObject) => \r\n  {\r\n    setText(Text + emojiObject.emoji)\r\n  };\r\n\r\n\r\n\r\n  return(\r\n\r\n    <div className= 'body_and_footer'>\r\n        <div className='chat_body'>\r\n\r\n          {selectedConversation.Messages.map((message,index)=>\r\n          {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender= ''\r\n            sender= message.name==='manager'? 'manager':( message.id===sessionStorage['id']? 'message_out' : 'message_in')\r\n            let image=message.id===sessionStorage['id']? info.imageName :selectedConversation.ConversationImage\r\n            let choosenClass = sender==='message_in'? 'chat_message chat_sender': ' chat_message chat_reciever'\r\n\r\n            return (\r\n              <div key={index}>\r\n                {sender === 'manager'?\r\n                <div className='around_message'ref={lastMessage ? setRef : null}>\r\n                  <div className='manager_message'>\r\n                     <span className='message_content'>{message.message}</span>\r\n                  </div>\r\n                </div>\r\n                :\r\n                <div key={index} className={choosenClass} ref={lastMessage ? setRef : null}>\r\n                  {message.containsRecord ? \r\n                  <AudioMessage message={message} sender={sender} image={image}/> : <Message  sender={sender} message={message}/>}\r\n                </div> }\r\n              </div>\r\n            )}\r\n          )}\r\n\r\n        </div>\r\n\r\n        <div className='chat_footer_with_stickers'>\r\n           {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n            <div className='chat_footer'>\r\n              {emojiFlag? <IconButton  onClick={()=>setEmojiFlag(false)}><CloseIcon fontSize='large'/> </IconButton>:''}\r\n              <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n                 <InsertEmoticonIcon fontSize='large'/>\r\n              </IconButton>\r\n              <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n              <label htmlFor=\"icon-button-file\">\r\n                <IconButton component=\"span\">\r\n                  <ImageIcon  fontSize='large'/>\r\n                </IconButton>\r\n              </label> \r\n              <form onSubmit={handleSubmit} className='message_section'>\r\n                 <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n                 <button type='submit' > send </button>\r\n              </form>\r\n              {recordFlag? updateRecordingDiv() :   \r\n              <IconButton onClick={recordStart}>\r\n                <MicIcon fontSize='large'  />\r\n              </IconButton>}\r\n            </div>\r\n        </div>\r\n        <Dialog className='exit_group_dialog'  open={removedFromGroupFlag}>\r\n          <div style={{padding:'10px'}}>\r\n            <h2 className='dialog_title'> you where removed from this group</h2>\r\n              <div className='dialog_options_buttons'>\r\n                <button className='dialog_button' onClick={()=>handleRemovedFromGroup()} >ok</button>\r\n              </div>\r\n          </div>\r\n        </Dialog> \r\n\r\n    </div>    \r\n)}\r\n\r\nexport default ChatBody\r\n","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sendimagebody.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\message.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\audiomessage.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\addgroupmember.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\profiledetails.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\showgroupdetails.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\showuserdetails.js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":62,"column":6,"nodeType":"120","endLine":62,"endColumn":21,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":89,"column":6,"nodeType":"120","endLine":89,"endColumn":44,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"124","line":101,"column":6,"nodeType":"120","endLine":101,"endColumn":18,"suggestions":"125"},{"ruleId":"118","severity":1,"message":"126","line":113,"column":6,"nodeType":"120","endLine":113,"endColumn":28,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":362,"column":30,"nodeType":"130","messageId":"131","endLine":362,"endColumn":32},{"ruleId":"128","severity":1,"message":"129","line":366,"column":29,"nodeType":"130","messageId":"131","endLine":366,"endColumn":31},{"ruleId":"118","severity":1,"message":"132","line":440,"column":5,"nodeType":"120","endLine":440,"endColumn":23,"suggestions":"133"},{"ruleId":"118","severity":1,"message":"134","line":452,"column":14,"nodeType":"135","endLine":452,"endColumn":21},{"ruleId":"118","severity":1,"message":"136","line":453,"column":6,"nodeType":"120","endLine":453,"endColumn":43,"suggestions":"137"},{"ruleId":"114","replacedBy":"138"},{"ruleId":"116","replacedBy":"139"},{"ruleId":"118","severity":1,"message":"140","line":35,"column":6,"nodeType":"120","endLine":35,"endColumn":18,"suggestions":"141"},{"ruleId":"118","severity":1,"message":"126","line":53,"column":6,"nodeType":"120","endLine":53,"endColumn":8,"suggestions":"142"},{"ruleId":"118","severity":1,"message":"143","line":81,"column":5,"nodeType":"120","endLine":81,"endColumn":16,"suggestions":"144"},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getConversations', 'selectedConversation', and 'socket'. Either include them or remove the dependency array.","ArrayExpression",["147"],"React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.",["148"],"React Hook useEffect has a missing dependency: 'getConversations'. Either include it or remove the dependency array.",["149"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["150"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useCallback has a missing dependency: 'audio'. Either include it or remove the dependency array.",["151"],"The ref value 'socket.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socket.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has missing dependencies: 'addMessageToConversation' and 'socket'. Either include them or remove the dependency array.",["152"],["145"],["146"],"React Hook useEffect has a missing dependency: 'getContacts'. Either include it or remove the dependency array.",["153"],["154"],"React Hook useEffect has missing dependencies: 'Text', 'clearBlobUrl', 'mediaBlobUrl', and 'sendMessage'. Either include them or remove the dependency array.",["155"],"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [conversations, getConversations, selectedConversation, socket]",{"range":"174","text":"175"},"Update the dependencies array to be: [ConnectedUsers, config, selectedConversation]",{"range":"176","text":"177"},"Update the dependencies array to be: [getConversations, renderFlag]",{"range":"178","text":"179"},"Update the dependencies array to be: [selectedConversation, socket]",{"range":"180","text":"181"},"Update the dependencies array to be: [audio]",{"range":"182","text":"183"},"Update the dependencies array to be: [addMessageToConversation, conversations, selectedConversation, socket]",{"range":"184","text":"185"},"Update the dependencies array to be: [getContacts, updateFlag]",{"range":"186","text":"187"},"Update the dependencies array to be: [socket]",{"range":"188","text":"189"},"Update the dependencies array to be: [Text, audioBlob, clearBlobUrl, mediaBlobUrl, sendMessage]",{"range":"190","text":"191"},[2510,2525],"[conversations, getConversations, selectedConversation, socket]",[3392,3430],"[ConnectedUsers, config, selectedConversation]",[3736,3748],"[getConversations, renderFlag]",[4157,4179],"[selectedConversation, socket]",[14625,14643],"[audio]",[15018,15055],"[addMessageToConversation, conversations, selectedConversation, socket]",[767,779],"[getContacts, updateFlag]",[1121,1123],"[socket]",[2603,2614],"[Text, audioBlob, clearBlobUrl, mediaBlobUrl, sendMessage]"]