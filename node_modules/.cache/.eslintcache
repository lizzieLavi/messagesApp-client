[{"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\index.js":"1","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\App.js":"2","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\login.js":"3","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\dashboard.js":"4","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sidebar.js":"5","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chat.js":"6","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\conversations.js":"7","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\contacts.js":"8","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\addnewcontact.js":"9","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\conversationsprovider.js":"10","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\SocketProvider.js":"11","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\socketprovider.js":"12","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\createnewgroup.js":"13","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\register.js":"14","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\userprovider.js":"15","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chatbody.js":"16","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sendimagebody.js":"17","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\message.js":"18","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\audiomessage.js":"19"},{"size":209,"mtime":1627982722646,"results":"20","hashOfConfig":"21"},{"size":1136,"mtime":1631257797719,"results":"22","hashOfConfig":"21"},{"size":3158,"mtime":1631626390689,"results":"23","hashOfConfig":"21"},{"size":606,"mtime":1629210600989,"results":"24","hashOfConfig":"21"},{"size":3930,"mtime":1631544827536,"results":"25","hashOfConfig":"21"},{"size":2664,"mtime":1631264231133,"results":"26","hashOfConfig":"21"},{"size":1337,"mtime":1631602938956,"results":"27","hashOfConfig":"21"},{"size":1348,"mtime":1631545334384,"results":"28","hashOfConfig":"21"},{"size":1392,"mtime":1631521805783,"results":"29","hashOfConfig":"21"},{"size":10391,"mtime":1631621050890,"results":"30","hashOfConfig":"21"},{"size":618,"mtime":1628171499502,"results":"31","hashOfConfig":"32"},{"size":897,"mtime":1631618369214,"results":"33","hashOfConfig":"21"},{"size":5189,"mtime":1631543830178,"results":"34","hashOfConfig":"21"},{"size":3366,"mtime":1631627380850,"results":"35","hashOfConfig":"21"},{"size":2435,"mtime":1631613094661,"results":"36","hashOfConfig":"21"},{"size":6113,"mtime":1631279054639,"results":"37","hashOfConfig":"21"},{"size":1899,"mtime":1631277752336,"results":"38","hashOfConfig":"21"},{"size":1021,"mtime":1631279316775,"results":"39","hashOfConfig":"21"},{"size":835,"mtime":1631279392738,"results":"40","hashOfConfig":"21"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t3qui8",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1rq4wqq",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\index.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\App.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\login.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\dashboard.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sidebar.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chat.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\conversations.js",["86","87","88"],"import { Avatar} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport React from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useUser } from '../contexts/userprovider';\r\nimport '../css/conversations.css'\r\n\r\nexport default function Conversations() {\r\n    const {setSelectedConversation,selectedConversation,conversations} =useConversations()\r\n    const {info} =useUser()\r\n  \r\nasync function handleSelectedConversation(conversation) \r\n{\r\n    setSelectedConversation(conversation)\r\n}\r\n  return (\r\n          <div className='Chats' >\r\n              <div className='contacts_list'>\r\n              {conversations.map((conversation,index)=>\r\n              {\r\n                 return  ( <div key={index}  onClick={()=>handleSelectedConversation(conversation)}  className='ChatsListItem'>\r\n                     <Avatar src={process.env.PUBLIC_URL + conversation.ConversationImage}/>\r\n                     <div className='chatInfo'>\r\n                     <span   className='chatName' ><h2>{conversation.Name}</h2> </span>\r\n                     <span> {(conversation.LastMessage.message).slice(0,25)}... </span>\r\n                     </div>\r\n            \r\n                  </div>)\r\n                    \r\n                })}\r\n                </div>\r\n\r\n                </div>\r\n          \r\n\r\n  )\r\n}","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\contacts.js",["89"],"  import { Avatar,Button } from '@material-ui/core';\r\nimport React from 'react'\r\nimport { useUser } from '../contexts/userprovider';\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport '../css/conversations.css'\r\n\r\nexport default function Contacts({newConversationCallback,openModalCallback}) {\r\n  const { contacts } = useUser()\r\n  const { createConversation,setCreateGroupFlag} = useConversations()\r\n\r\n  function startConversation({id,name,image}) \r\n  {\r\n    let ids=[id]\r\n    createConversation(ids,name,image)\r\n    newConversationCallback()\r\n  }\r\n\r\n  return (\r\n\r\n    <div className='Chats' >\r\n      <h4 className='new_chat_title'>Start New Chat:</h4>            \r\n    <Button  style={{height:'30px' ,margin:'5px 0px',fontSize:'10px'}} onClick={()=>openModalCallback()}\r\n        className='add_new_Button' >\r\n                      Create Group\r\n                    </Button>\r\n      <div className='contacts_list'>\r\n      {contacts.map(contact =>\r\n       {\r\n          return(\r\n         \r\n          <div className='ChatsListItem' onClick={()=>startConversation({id:contact.id,name:contact.name,image:contact.imageName})}>\r\n            <Avatar src={contact.imageName}/>\r\n           <div className='chatInfo'> <h2>{contact.name} </h2> </div>\r\n          </div> \r\n           )\r\n        })}\r\n        </div>\r\n\r\n  </div>)\r\n  \r\n};","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\addnewcontact.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\conversationsprovider.js",["90","91","92","93","94","95"],"import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\r\n  const { socket, ConnectedUsers } = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n    async function fetchData() {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === conversationId)\r\n          {\r\n             setTypingFlag(user.name)\r\n          }\r\n        }\r\n    } )\r\n  }\r\n  fetchData();\r\n  },[selectedConversation])\r\n\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() {\r\n    if(selectedConversation)\r\n    {\r\n    if(!selectedConversation.isGroup)\r\n     {\r\n      if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n      {\r\n        setCurrentConversationIsConnected('')\r\n      }\r\n      else\r\n      {\r\n        let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n        setCurrentConversationIsConnected(response.data.LastSeen)\r\n      }\r\n     }\r\n    }\r\n  }\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,selectedConversation])\r\n\r\n  useEffect(() =>\r\n  {\r\n    async function fetchData() {\r\n     getConversations().then(res=> setConversations(res))\r\n    }\r\n    fetchData();\r\n    \r\n  }, []);\r\n\r\n  async function getConversations()\r\n  {\r\n    try{\r\n       let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n\r\n       let ConversationsList = response.data.map((conversation) =>\r\n       {\r\n         let UpdatedConversation= conversation\r\n\r\n         if (conversation.Participants.length === 1 && conversation.Name === sessionStorage[\"name\"])\r\n            UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n\r\n         if(selectedConversation)\r\n         {\r\n           if(selectedConversation.id === UpdatedConversation.id)\r\n              setSelectedConversation(UpdatedConversation)\r\n         }\r\n          \r\n         return UpdatedConversation;\r\n       })\r\n\r\n      return ConversationsList \r\n    } catch (err) {console.log(err);}\r\n  }\r\n\r\n\r\n\r\n\r\n  async function getSearchConverastions(str)\r\n  {\r\n\r\n        getConversations().then(res=>\r\n        {\r\n\r\n         let SearchResult = res.filter(conversation=> \r\n            conversation.Name.includes(str) ===true\r\n          )\r\n    \r\n          setConversations(SearchResult)\r\n        })\r\n  }\r\n        \r\n\r\n\r\n  async function createConversation(ids, name, image) {\r\n    let ConversationImage = image;\r\n    let isGroup = false;\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      console.log(\"no participants choosen\");\r\n      return;\r\n    }\r\n\r\n    //check if conversation already exists\r\n    let ConversationExists = null;\r\n    if (ids.length === 1) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      //if group\r\n      if (ids.length > 1) {\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        data.append({secure:true})\r\n        try{\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n        ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      \r\n    \r\n        isGroup = true;\r\n      }\r\n\r\n      let newConversation = {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: [],\r\n        LastMessage: { id: \"\", sender: \"\", message: \"\" },\r\n        ConversationImage: ConversationImage,\r\n        isGroup,\r\n      };\r\n\r\n      //updateDB\r\n      try {\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n        if (Response.data.status === \"created\") {\r\n          console.log(Response.data.conversation);\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent\r\n          if (Response.data.conversation.Messages.length > 0)\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n          // }\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n \r\n\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n   {\r\n\r\n      audio.play()\r\n\r\n      let ConversationExists = false;\r\n      let newListOfConversations = RefConversations.current.map((conversation) =>{\r\n          if (conversation._id === UpdatedConv._id) {\r\n            ConversationExists = true;\r\n            let newConv = { ...conversation,\r\n              Messages: UpdatedConv.Messages,\r\n              LastMessage: UpdatedConv.LastMessage,};\r\n            if (currentConversationRef.current) {\r\n              if (currentConversationRef.current._id === UpdatedConv._id)\r\n                setSelectedConversation(newConv);\r\n            }\r\n\r\n            return newConv;\r\n          } else return conversation;\r\n        }\r\n      );\r\n\r\n\r\n      if (!ConversationExists) {\r\n        if (!UpdatedConv.isGroup)\r\n         {\r\n           let newConversation = { ...UpdatedConv,\r\n            Name: UpdatedConv.Participants[0].name,\r\n            ConversationImage: UpdatedConv.Participants[0].imageName,\r\n          };\r\n          setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n        } else\r\n          setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n      } else setConversations(newListOfConversations);\r\n    },[setConversations]);\r\n\r\n  useEffect(() => {\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  }, [conversations, selectedConversation]);\r\n\r\n\r\n  const updateSenderConversation = (AddMessage) => {\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => {\r\n      if (conversation._id === AddMessage._id) {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } else return conversation;\r\n    });\r\n\r\n    if (ConversationExists) {\r\n      setConversations(newListOfConcversations);\r\n    } else\r\n      setConversations((prevConversations) => [\r\n        ...prevConversations,\r\n        AddMessage,\r\n      ]);\r\n  };\r\n\r\n\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n      let parts = new Intl.DateTimeFormat('en', {\r\n      hc: 'h12',\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      image: info.imageName,\r\n    };\r\n    let AddMessage = {\r\n      ...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n    socket.current.emit(\"send-message\", {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        createGroupFlag,\r\n        setCreateGroupFlag,\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\SocketProvider.js",[],["96","97"],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\socketprovider.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\createnewgroup.js",["98","99"],"import React, { useState } from 'react'\r\nimport { useUser } from '../contexts/userprovider'\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport {Button,Avatar,IconButton} from '@material-ui/core';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\nfunction CreateNewGroup( { closeModal }) {\r\n\r\n    const [selectedContactsId, setSelectedContactsId] = useState([])\r\n    const { contacts } = useUser()\r\n    const { createConversation,setCreateGroupFlag } = useConversations()\r\n    const [groupName,setGroupName] =useState('')\r\n    const [groupImage,setGroupImage] =useState()\r\n    const [previewImage,setPreviewImage]=useState()\r\n    const [goToParticipants,setGoToParticipants] = useState(false)\r\n\r\n    function createGroup()\r\n    {\r\n        setCreateGroupFlag(false)\r\n        createConversation(selectedContactsId,groupName,groupImage)\r\n        closeModal()\r\n    }\r\n\r\n    function handleCheckboxChange(contactId) \r\n    {\r\n        if(selectedContactsId.includes(contactId))\r\n        {\r\n            setSelectedContactsId(prevSelectedContactsId =>\r\n            {\r\n                return (prevSelectedContactsId.filter(id=> id!==contactId))\r\n            } )\r\n        }\r\n  \r\n        else\r\n        {\r\n           setSelectedContactsId(prevSelectedContactsId=>\r\n            {\r\n              return [...prevSelectedContactsId,contactId]\r\n            })\r\n        }   \r\n    }\r\n\r\n    function handleFileUpload(e) {\r\n        setGroupImage(e.target.files[0])\r\n        setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n      }\r\n\r\n\r\n    return (\r\n        <div className='add_new'>\r\n        <div className='add_new_group_border'>\r\n        <div className='new_conversation new_group'>\r\n\r\n      {goToParticipants !==true ?\r\n         <div className='top_new_group'>\r\n\r\n          {previewImage?  \r\n\r\n             <div className='change_group_image'> \r\n            <Avatar  src={previewImage} style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px'}}> </Avatar>\r\n            <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white'}}>\r\n            <PeopleAltIcon style={{position:'absolute',zIndex:'0', opacity:'0.1',height: '80px', width: '80px' }}/>\r\n          \r\n             <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n             <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n            <span style={{fontSize:'10px'}}>Change Image </span>\r\n         \r\n            </div>\r\n            </div>\r\n           \r\n            :\r\n          <div className='add_group_image'>\r\n          <Avatar   style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px'}}>\r\n           < PeopleAltIcon style={{position:'absolute',zIndex:'0', opacity:'0.1',height: '80px', width: '80px' }}/>\r\n            <div  style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white'}}>\r\n             <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n             <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n            <span style={{fontSize:'10px'}}>add group image</span>\r\n         \r\n            </div>\r\n            </Avatar>\r\n            </div> }\r\n          <div className='group_name'>\r\n          <span style={{padding:'5px', margin:'5px' , fontSize:'13px', color:'#fcfcfc'}}> Group Name:</span>\r\n          <input onChange={(e)=>setGroupName(e.target.value)}/>\r\n          </div>\r\n          <button style={{display:'flex',alignItems:'center',width:'180px',justifyContent:'center'}} className='add_new_button'  onClick={()=>setGoToParticipants(true)}><ArrowBackIcon style={{margin:'5px'}} /> Add Members</button>\r\n          </div>\r\n          :\r\n          <div >\r\n          <h3 className='add_contact_title'> choose Members :</h3>\r\n          <div style={{overflowY:'overlay',height:'200px'}}>\r\n          {contacts.map(contact =>\r\n            {\r\n            return(\r\n\r\n                <div className='contactItem' >\r\n                 <input\r\n                type=\"checkbox\"\r\n                value={selectedContactsId.includes(contact.id)}\r\n                id={contact.name}\r\n                style={{marginRight:'10px'}}\r\n                onChange={() => handleCheckboxChange(contact.id)}/>\r\n                   <Avatar  src={process.env.PUBLIC_URL + contact.imageName}   fontSize='large'/>\r\n                   <div className='contactInfo'> <h2 style={{fontWeight:'400'}}>{contact.name} </h2> </div>\r\n                </div>\r\n            )}) }  \r\n            </div>\r\n            <div style={{display:'flex' , justifyContent:'center'}}>\r\n             <button className='add_new_button'  type=\"submit\" onClick={()=>createGroup()}>Create</button>\r\n             </div>\r\n\r\n             </div>}\r\n\r\n         \r\n\r\n        \r\n\r\n\r\n          \r\n\r\n            \r\n            \r\n        </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateNewGroup\r\n","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\register.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\userprovider.js",["100"],"\r\nimport React, { useState ,useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n\r\n  \r\n   useEffect( () =>\r\n   {\r\n    async function fetchData() {\r\n\r\n    getContacts().then(res=> setContacts(res))\r\n    }\r\n\r\n    fetchData();\r\n\r\n   },[setInfo])\r\n\r\n   async function getContacts()\r\n   {\r\n    const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+sessionStorage['id'],config);\r\n    setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen})\r\n    return(response.data.contacts)\r\n\r\n   }\r\n   \r\n\r\n  function getSearchContacts(str)\r\n  {\r\n    getContacts().then(res=>\r\n      {\r\n        let SearchResult =res.filter(contact=> contact.name.includes(str) === true)\r\n        setContacts(SearchResult)\r\n      })\r\n  }\r\n\r\n\r\n  const createContact = async(phone) =>\r\n  {\r\n\r\n    if(phone === info.phone)\r\n    {\r\n      console.log('cant Add yourself')\r\n       return;\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.phone === phone)\r\n\r\n    if(checkIfExists.length !== 0)\r\n    {\r\n      console.log('already exists')\r\n      return;\r\n    }\r\n\r\n    try{ \r\n\r\n      const response= await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByPhone/\" + phone,config)\r\n\r\n      if(response !== 'no such user')\r\n      {\r\n       const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName}\r\n       let newContacts = [...contacts,contact]\r\n       setContacts(newContacts)\r\n       let UpdatedUser={...info,contacts:newContacts}\r\n       try{\r\n         await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n       } catch(err){console.log(err)}\r\n      }\r\n      else console.log('user dosent exist')\r\n     \r\n    } catch(err){console.log(err)}\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact,getSearchContacts }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chatbody.js",["101","102"],"import React, { useRef } from 'react'\r\nimport { useState ,useCallback,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\nimport {IconButton } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Picker from 'emoji-picker-react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\nimport axios from 'axios'\r\nimport Message from './message';\r\nimport AudioMessage from './audiomessage';\r\n\r\n\r\n\r\n\r\nfunction ChatBody(props) {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation} = useConversations()\r\n    const inputRef = useRef(null)\r\n  \r\n    const [emojiFlag,setEmojiFlag] = useState(false)\r\n    const [recordFlag,setRecordFlag] =useState(false)\r\n    const {status,startRecording,stopRecording,mediaBlobUrl,clearBlobUrl} = useReactMediaRecorder({audio: true })\r\n    const [audioBlob,setAudioBlob] = useState(null)\r\n\r\n\r\n    const setRef = useCallback((node) => \r\n    {\r\n\r\n      if(node)\r\n         node.scrollIntoView({smooth:true})\r\n    },[])\r\n\r\n\r\n  useEffect( () => {\r\n    async function fetchData() {\r\n    if(audioBlob != null)\r\n    {\r\n      let audio= await fetch(mediaBlobUrl).then(res=> res.blob())\r\n      const data = new FormData();\r\n           \r\n      data.append('file', audio);\r\n      data.append('resource_type', 'video');\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n      try{\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/video/upload\",data)\r\n        let recordURL = response.data.url\r\n        recordURL=(recordURL.slice(0,-4))\r\n        recordURL+= 'mp3'\r\n        setRecordFlag(false)\r\n        clearBlobUrl()\r\n        sendMessage(Text,null,null,recordURL)\r\n        setRecordFlag(false)\r\n  \r\n      }catch(err){console.log(err)}\r\n    }\r\n    }\r\n\r\n    fetchData();\r\n \r\n  }, [audioBlob])\r\n\r\n\r\n\r\n    function typing(e)\r\n    {\r\n        setText(e.target.value)\r\n        if (socket.current == null) return;\r\n        socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n    }\r\n\r\n    function handleSubmit(e)\r\n    {\r\n      e.preventDefault()\r\n      sendMessage(Text,false,null,null)\r\n\r\n      setText(' ')\r\n    }\r\n\r\n    async function handleImage(e)\r\n    {\r\n      const data = new FormData()\r\n      data.append('file',e.target.files[0])\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n      try{\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n\r\n      props.imageCallback(response.data.url)\r\n      }catch(err){console.log(err)}\r\n    }\r\n\r\n   function recordStart()\r\n   {\r\n    setRecordFlag(true)\r\n    startRecording()\r\n   }\r\n \r\n    async function handleRecord()\r\n    {\r\n         stopRecording()\r\n         let res = await fetch(mediaBlobUrl)\r\n         setAudioBlob(res.blob())            \r\n    }\r\n\r\n  function cancelRecord()\r\n  {\r\n    stopRecording()\r\n    clearBlobUrl()\r\n    setRecordFlag(false)\r\n  }\r\n\r\n    function updateRecordingDiv()\r\n    {\r\n      let recordDiv = <div>\r\n      <IconButton>\r\n        <CloseIcon fontSize='large' style={{color:'red'}} onClick={cancelRecord} />\r\n      </IconButton>\r\n      <IconButton>\r\n         <CheckIcon fontSize='large'style={{color:'green'}} onClick={handleRecord} />\r\n      </IconButton>\r\n      </div>\r\n\r\n      return recordDiv\r\n  \r\n    }\r\n    \r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setText(Text + emojiObject.emoji)\r\n      };\r\n\r\n\r\n\r\n    return(\r\n\r\n      <div className= 'body_and_footer'>\r\n        <div className='chat_body'>\r\n        {selectedConversation.Messages.map((message,index)=>\r\n         {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender = message.id===sessionStorage['id']? 'chat_message' : ' chat_message chat_reciever'\r\n            let image=message.id===sessionStorage['id']? info.imageName :selectedConversation.ConversationImage\r\n\r\n            return (\r\n                <div key={index} className={sender} ref={lastMessage ? setRef : null}>\r\n                    {message.containsRecord ? \r\n                    <AudioMessage message={message} sender={sender} image={image}/> : <Message message={message}/> }\r\n\r\n                </div> \r\n          )}\r\n        )}\r\n\r\n      </div>\r\n\r\n      <div className='chat_footer_with_stickers'>\r\n         {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n         <div className='chat_footer'>\r\n           {emojiFlag? <IconButton  onClick={()=>setEmojiFlag(false)}><CloseIcon fontSize='large'/> </IconButton>:''}\r\n           <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n             <InsertEmoticonIcon fontSize='large'/>\r\n           </IconButton>\r\n           <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n           <label htmlFor=\"icon-button-file\">\r\n             <IconButton component=\"span\">\r\n               <ImageIcon  fontSize='large'/>\r\n             </IconButton>\r\n           </label> \r\n\r\n           <form onSubmit={handleSubmit} className='message_section'>\r\n             <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n             <button type='submit' > send </button>\r\n           </form>\r\n           {recordFlag? updateRecordingDiv() :   \r\n           <IconButton onClick={recordStart}>\r\n             <MicIcon fontSize='large'  />\r\n           </IconButton>}\r\n         </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n    \r\n)}\r\n\r\nexport default ChatBody\r\n","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sendimagebody.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\message.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\audiomessage.js",[],{"ruleId":"103","severity":1,"message":"104","line":2,"column":8,"nodeType":"105","messageId":"106","endLine":2,"endColumn":13},{"ruleId":"103","severity":1,"message":"107","line":9,"column":36,"nodeType":"105","messageId":"106","endLine":9,"endColumn":56},{"ruleId":"103","severity":1,"message":"108","line":10,"column":12,"nodeType":"105","messageId":"106","endLine":10,"endColumn":16},{"ruleId":"103","severity":1,"message":"109","line":9,"column":30,"nodeType":"105","messageId":"106","endLine":9,"endColumn":48},{"ruleId":"110","severity":1,"message":"111","line":47,"column":5,"nodeType":"112","endLine":47,"endColumn":27,"suggestions":"113"},{"ruleId":"110","severity":1,"message":"114","line":70,"column":5,"nodeType":"112","endLine":70,"endColumn":42,"suggestions":"115"},{"ruleId":"110","severity":1,"message":"116","line":79,"column":6,"nodeType":"112","endLine":79,"endColumn":8,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"118","line":254,"column":7,"nodeType":"112","endLine":254,"endColumn":25,"suggestions":"119"},{"ruleId":"110","severity":1,"message":"120","line":264,"column":14,"nodeType":"105","endLine":264,"endColumn":21},{"ruleId":"110","severity":1,"message":"121","line":265,"column":6,"nodeType":"112","endLine":265,"endColumn":43,"suggestions":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"103","severity":1,"message":"127","line":4,"column":9,"nodeType":"105","messageId":"106","endLine":4,"endColumn":15},{"ruleId":"103","severity":1,"message":"128","line":4,"column":23,"nodeType":"105","messageId":"106","endLine":4,"endColumn":33},{"ruleId":"110","severity":1,"message":"129","line":26,"column":6,"nodeType":"112","endLine":26,"endColumn":15,"suggestions":"130"},{"ruleId":"103","severity":1,"message":"131","line":31,"column":12,"nodeType":"105","messageId":"106","endLine":31,"endColumn":18},{"ruleId":"110","severity":1,"message":"132","line":70,"column":6,"nodeType":"112","endLine":70,"endColumn":17,"suggestions":"133"},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'selectedConversation' is assigned a value but never used.","'info' is assigned a value but never used.","'setCreateGroupFlag' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["134"],"React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.",["135"],"React Hook useEffect has a missing dependency: 'getConversations'. Either include it or remove the dependency array.",["136"],"React Hook useCallback has a missing dependency: 'audio'. Either include it or remove the dependency array.",["137"],"The ref value 'socket.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socket.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'addMessageToConversation' and 'socket'. Either include them or remove the dependency array.",["138"],"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"'Button' is defined but never used.","'IconButton' is defined but never used.","React Hook useEffect has a missing dependency: 'getContacts'. Either include it or remove the dependency array.",["141"],"'status' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Text', 'clearBlobUrl', 'mediaBlobUrl', and 'sendMessage'. Either include them or remove the dependency array.",["142"],{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [selectedConversation, socket]",{"range":"157","text":"158"},"Update the dependencies array to be: [ConnectedUsers, config, selectedConversation]",{"range":"159","text":"160"},"Update the dependencies array to be: [getConversations]",{"range":"161","text":"162"},"Update the dependencies array to be: [audio]",{"range":"163","text":"164"},"Update the dependencies array to be: [addMessageToConversation, conversations, selectedConversation, socket]",{"range":"165","text":"166"},"Update the dependencies array to be: [getContacts, setInfo]",{"range":"167","text":"168"},"Update the dependencies array to be: [Text, audioBlob, clearBlobUrl, mediaBlobUrl, sendMessage]",{"range":"169","text":"170"},[1559,1581],"[selectedConversation, socket]",[2163,2200],"[ConnectedUsers, config, selectedConversation]",[2358,2360],"[getConversations]",[7514,7532],"[audio]",[7879,7916],"[addMessageToConversation, conversations, selectedConversation, socket]",[564,573],"[getContacts, setInfo]",[2286,2297],"[Text, audioBlob, clearBlobUrl, mediaBlobUrl, sendMessage]"]