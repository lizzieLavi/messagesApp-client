[{"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\index.js":"1","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\App.js":"2","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\login.js":"3","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\dashboard.js":"4","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sidebar.js":"5","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chat.js":"6","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\conversations.js":"7","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\contacts.js":"8","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\addnewcontact.js":"9","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\conversationsprovider.js":"10","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\SocketProvider.js":"11","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\socketprovider.js":"12","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\createnewgroup.js":"13","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\register.js":"14","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\userprovider.js":"15","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chatbody.js":"16","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sendimagebody.js":"17","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\message.js":"18","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\audiomessage.js":"19","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\addgroupmember.js":"20","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\profiledetails.js":"21","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\showgroupdetails.js":"22","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\showuserdetails.js":"23"},{"size":210,"mtime":1631630702444,"results":"24","hashOfConfig":"25"},{"size":1130,"mtime":1632748038158,"results":"26","hashOfConfig":"25"},{"size":2249,"mtime":1632753261485,"results":"27","hashOfConfig":"25"},{"size":591,"mtime":1632754709794,"results":"28","hashOfConfig":"25"},{"size":4240,"mtime":1632755047383,"results":"29","hashOfConfig":"25"},{"size":3690,"mtime":1632749041965,"results":"30","hashOfConfig":"25"},{"size":1162,"mtime":1632764926968,"results":"31","hashOfConfig":"25"},{"size":1457,"mtime":1632767271901,"results":"32","hashOfConfig":"25"},{"size":1620,"mtime":1632739485787,"results":"33","hashOfConfig":"25"},{"size":13714,"mtime":1632756754558,"results":"34","hashOfConfig":"25"},{"size":618,"mtime":1628171499502,"results":"35","hashOfConfig":"25"},{"size":917,"mtime":1632756919681,"results":"36","hashOfConfig":"25"},{"size":6057,"mtime":1632752970178,"results":"37","hashOfConfig":"25"},{"size":5075,"mtime":1632754432368,"results":"38","hashOfConfig":"25"},{"size":2586,"mtime":1632756919681,"results":"39","hashOfConfig":"25"},{"size":7878,"mtime":1632750461918,"results":"40","hashOfConfig":"25"},{"size":1866,"mtime":1632754612931,"results":"41","hashOfConfig":"25"},{"size":1322,"mtime":1632753413506,"results":"42","hashOfConfig":"25"},{"size":1251,"mtime":1632748148339,"results":"43","hashOfConfig":"25"},{"size":4629,"mtime":1632739528059,"results":"44","hashOfConfig":"25"},{"size":7456,"mtime":1632753893550,"results":"45","hashOfConfig":"25"},{"size":15014,"mtime":1632754660618,"results":"46","hashOfConfig":"25"},{"size":1386,"mtime":1632754684907,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1rq4wqq",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\index.js",[],["99","100"],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\App.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\login.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\dashboard.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sidebar.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chat.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\conversations.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\contacts.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\addnewcontact.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\conversationsprovider.js",["101","102","103","104","105","106"],"import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() \r\n{\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({children }) \r\n{\r\n\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const { socket, ConnectedUsers } = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n  const [showDetails,setShowDetails] =useState(false)\r\n  const [removedFromGroupFlag,setRemovedFromGroupFlag] = useState(false)\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n\r\n\r\n  useEffect(()=>\r\n  {\r\n\r\n    async function fetchData() {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === conversationId)\r\n          {\r\n             setTypingFlag(user.name)\r\n          }\r\n        }\r\n    })\r\n\r\n    socket.current.on('update-conversation',async ()=>\r\n    {\r\n    \r\n      getConversations().then(res=> setConversations(res))\r\n    \r\n    })\r\n\r\n    socket.current.on('removed-user',async ()=>\r\n    {\r\n    \r\n      getConversations().then(res=> \r\n      {\r\n        setConversations(res)\r\n        if(selectedConversation)\r\n        {\r\n          let checkIfDeleted=res.filter(conversation=> conversation._id === selectedConversation._id)\r\n          if(checkIfDeleted.length === 0 ) \r\n            setRemovedFromGroupFlag(true)\r\n\r\n        }\r\n\r\n      })\r\n    \r\n    })\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[selectedConversation])\r\n\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() {\r\n\r\n    if(selectedConversation)\r\n    {\r\n    if(!selectedConversation.isGroup)\r\n     {\r\n      if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n      {\r\n        setCurrentConversationIsConnected('')\r\n      }\r\n      else\r\n      {\r\n        let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n        setCurrentConversationIsConnected(response.data.LastSeen)\r\n      }\r\n     }\r\n    }\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,setSelectedConversation])\r\n\r\n  useEffect(() =>\r\n  {\r\n    async function fetchData() {\r\n     getConversations().then(res=> setConversations(res))\r\n    }\r\n    fetchData();\r\n    \r\n  }, []);\r\n\r\n  async function getConversations()\r\n  {\r\n\r\n    try\r\n    {\r\n      let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n      let ConversationsList = response.data.map((conversation) =>\r\n      {\r\n        let UpdatedConversation= conversation\r\n        if (!conversation.isGroup && conversation.Name === sessionStorage[\"name\"])\r\n          UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === UpdatedConversation._id)\r\n            setSelectedConversation(UpdatedConversation)\r\n\r\n        }\r\n          \r\n         return UpdatedConversation;\r\n\r\n      })\r\n\r\n      return ConversationsList \r\n\r\n    } catch (err) {console.log(err);}\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  async function getSearchConverastions(str)\r\n  {\r\n    getConversations().then(res=>\r\n    {\r\n      let SearchResult = res.filter(conversation=> \r\n      conversation.Name.includes(str) ===true)\r\n      setConversations(SearchResult)\r\n    })\r\n\r\n  }\r\n        \r\n\r\n  async function createConversation(ids, name, image,groupFlag)\r\n  {\r\n\r\n    let ConversationImage = image;\r\n    let isGroup = groupFlag;\r\n    let messages = []\r\n    let lastMessage=''\r\n\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      return {status:'error',message:'no participants choosen'};\r\n    }\r\n\r\n    //check if conversation already exists and it's not a group\r\n    let ConversationExists = null;\r\n    if (ids.length === 1 && !isGroup) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => \r\n      {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      let createdDate=''\r\n\r\n      //if group\r\n      if (isGroup) \r\n      {\r\n        let parts = new Intl.DateTimeFormat('en', {\r\n          hc: 'h12',\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          timeZone:'Asia/Jerusalem'})\r\n        .formatToParts(new Date())\r\n        .reduce((acc, part) => {\r\n          acc[part.type] = part.value;\r\n          return acc;\r\n        }, Object.create(null));\r\n\r\n        createdDate= `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}`;\r\n\r\n        lastMessage={name:\"manager\",message: info.name +\" created this group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n        messages.push(lastMessage)\r\n\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n          ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      }\r\n    \r\n      let newConversation = \r\n      {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: messages,\r\n        LastMessage:lastMessage,\r\n        ConversationImage: ConversationImage,\r\n        isGroup:isGroup,\r\n        createdDate:createdDate,\r\n        description: \"Add Description\",\r\n      };\r\n\r\n      //updateDB\r\n      try \r\n      {\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n\r\n        if (Response.data.status === \"created\") \r\n        {\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent or if its A group\r\n          if (Response.data.conversation.Messages.length > 0  || Response.data.conversation.isGroup === true)\r\n          {\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n            socket.current.emit('conversation-changed',Response.data.conversation)\r\n          }\r\n        }\r\n      }catch (err) {console.log(err);}\r\n    }\r\n  }\r\n\r\n  async function UpdateConversation(updatedConversation)\r\n  {\r\n\r\n    let updateDBConv={...updatedConversation}\r\n    if(!(updatedConversation.LastMessage.message.includes('left')))\r\n    {\r\n      let addCurrentParticipant= {id: info.id,phone: info.phone,name: info.name,image: info.imageName,}\r\n      let participants=[...updatedConversation.Participants,addCurrentParticipant]\r\n      updateDBConv={...updateDBConv,Participants:participants}\r\n    }\r\n\r\n    delete updateDBConv._id\r\n\r\n\r\n    try\r\n    {\r\n      let response=await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+ selectedConversation._id,updateDBConv,config)\r\n      if(response.data.status==='Updated')\r\n      {\r\n        let UpdatedConversations=[]\r\n        if(!(updatedConversation.LastMessage.message.includes('left')))\r\n        {\r\n          setSelectedConversation(updatedConversation)\r\n          conversations.forEach(conversation=>\r\n          { \r\n            if(conversation._id===updatedConversation._id)    \r\n              UpdatedConversations.push(updatedConversation)\r\n            else UpdatedConversations.push(conversation)\r\n\r\n          })\r\n        }\r\n        else\r\n        {\r\n          UpdatedConversations=conversations.filter(conversation=> conversation._id !== selectedConversation._id)\r\n          setSelectedConversation()\r\n        }\r\n\r\n        if(updatedConversation.LastMessage.message.includes('removed'))\r\n          socket.current.emit('user-deleted',selectedConversation)\r\n        else\r\n          socket.current.emit('conversation-changed',selectedConversation)\r\n\r\n        setConversations(UpdatedConversations)\r\n              \r\n      }\r\n    }catch(err){console.log(err)}\r\n  }\r\n\r\n\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n  {\r\n    audio.play()\r\n\r\n    let ConversationExists = false;\r\n    let newListOfConversations = RefConversations.current.map((conversation) =>\r\n    {\r\n      if (conversation._id === UpdatedConv._id) \r\n      {\r\n        ConversationExists = true;\r\n        let newConv = \r\n        { ...conversation,\r\n          Messages: UpdatedConv.Messages,\r\n          LastMessage: UpdatedConv.LastMessage,};\r\n          if (currentConversationRef.current) \r\n          {\r\n           if (currentConversationRef.current._id === UpdatedConv._id)\r\n             setSelectedConversation(newConv);\r\n          }\r\n\r\n        return newConv;\r\n\r\n      }\r\n      else return conversation;\r\n    });\r\n\r\n\r\n    if (!ConversationExists) \r\n    {\r\n      if (!UpdatedConv.isGroup)\r\n      {\r\n        let newConversation = \r\n        { ...UpdatedConv,\r\n        Name: UpdatedConv.Participants[0].name,\r\n        ConversationImage: UpdatedConv.Participants[0].imageName,\r\n        };\r\n\r\n        setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n      } \r\n      else\r\n        setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n    } \r\n    else setConversations(newListOfConversations);\r\n  },[setConversations]);\r\n\r\n  useEffect(() => \r\n  {\r\n\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  },[conversations, selectedConversation]);\r\n\r\n\r\n  const updateSenderConversation = (AddMessage) => \r\n  {\r\n\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => \r\n    {\r\n      if (conversation._id === AddMessage._id) \r\n      {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } \r\n      else return conversation;\r\n\r\n    });\r\n\r\n    if (ConversationExists) \r\n    {\r\n      setConversations(newListOfConcversations);\r\n    } \r\n    else\r\n      setConversations((prevConversations) => [...prevConversations,AddMessage]);\r\n  };\r\n\r\n\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n    let parts = new Intl.DateTimeFormat('en', {\r\n    hc: 'h12',\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => \r\n    {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = \r\n    {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      image: info.imageName,\r\n    };\r\n\r\n    let AddMessage = \r\n    {...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n\r\n    socket.current.emit(\"send-message\", \r\n    {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n        showDetails,\r\n        setShowDetails,\r\n        UpdateConversation,\r\n        removedFromGroupFlag,\r\n        setRemovedFromGroupFlag\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\SocketProvider.js",[],["107","108"],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\socketprovider.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\createnewgroup.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\register.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\contexts\\userprovider.js",["109"],"\r\nimport React, { useState ,useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() \r\n{\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n\r\n\r\n  \r\n  useEffect( () =>\r\n  {\r\n    async function fetchData() \r\n    {\r\n      getContacts().then(res=> setContacts(res))\r\n    }\r\n\r\n    fetchData();\r\n\r\n   },[setInfo])\r\n\r\n   async function getContacts()\r\n   {\r\n      const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+sessionStorage['id'],config);\r\n      setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen,Status:response.data.Status})\r\n      return(response.data.contacts)\r\n\r\n   }\r\n   \r\n\r\n  function getSearchContacts(str)\r\n  {\r\n    getContacts().then(res=>\r\n    {\r\n      let SearchResult =res.filter(contact=> contact.name.includes(str) === true)\r\n      setContacts(SearchResult)\r\n    })\r\n\r\n  }\r\n\r\n\r\n  const createContact = async(name) =>\r\n  {\r\n    \r\n    if(name === info.name)\r\n    {\r\n      return {status:'error',message:'cant Add yourself'};\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.name === name)\r\n\r\n    if(checkIfExists.length !== 0)\r\n    {\r\n      return {status:'error',message:'already exists'};\r\n    }\r\n\r\n    try\r\n    { \r\n\r\n      const response= await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByName/\" + name,config)\r\n\r\n      if(response.data !== 'no such user')\r\n      {\r\n        const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName,Status:response.data.Status}\r\n        let newContacts = [...contacts,contact]\r\n        setContacts(newContacts)\r\n        let UpdatedUser={...info,contacts:newContacts}\r\n        try\r\n        {\r\n          await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n        } catch(err){console.log(err)}\r\n      }\r\n      else return {status:'error',message:'user doesnt exist'};\r\n     \r\n    }catch(err){console.log(err)}\r\n\r\n    return {status:'ok'}\r\n    \r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact,getSearchContacts }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\chatbody.js",["110"],"import React from 'react'\r\nimport {useState ,useCallback,useEffect,useRef} from 'react'\r\nimport {useConversations} from '../contexts/conversationsprovider';\r\nimport {useSocket} from '../contexts/socketprovider';\r\nimport {useUser} from '../contexts/userprovider';\r\nimport {IconButton,Dialog } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Picker from 'emoji-picker-react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\nimport axios from 'axios'\r\nimport Message from './message';\r\nimport AudioMessage from './audiomessage';\r\n\r\n\r\nfunction ChatBody(props) {\r\n\r\n  const [Text,setText] = useState('')\r\n  const {socket} = useSocket()\r\n  const {info} = useUser()\r\n  const {sendMessage,selectedConversation,removedFromGroupFlag,setRemovedFromGroupFlag,setSelectedConversation} = useConversations()\r\n  const inputRef = useRef(null)\r\n  const [emojiFlag,setEmojiFlag] = useState(false)\r\n  const [recordFlag,setRecordFlag] =useState(false)\r\n  const {startRecording,stopRecording,mediaBlobUrl,clearBlobUrl} = useReactMediaRecorder({audio: true })\r\n  const [audioBlob,setAudioBlob] = useState(null)\r\n\r\n  //make messages scrolling down when message sent\r\n  const setRef = useCallback((node) => \r\n  {\r\n    if(node)\r\n      node.scrollIntoView({smooth:true})\r\n\r\n  },[])\r\n  \r\n  useEffect(()=>\r\n  {\r\n    setEmojiFlag(false)\r\n\r\n  },[selectedConversation])\r\n\r\n  \r\n\r\n  //when audio message sent, upload it to cloudinary and send it to conversation participants\r\n  useEffect( () => \r\n  {\r\n\r\n    async function fetchData() \r\n    {\r\n      if(audioBlob != null)\r\n      {\r\n        let audio= await fetch(mediaBlobUrl).then(res=> res.blob())\r\n        const data = new FormData();\r\n           \r\n        data.append('file', audio);\r\n        data.append('resource_type', 'video');\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n\r\n\r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/video/upload\",data)\r\n          let recordURL = response.data.url\r\n          recordURL=(recordURL.slice(0,-4))\r\n          recordURL+= 'mp3'\r\n          setRecordFlag(false)\r\n          clearBlobUrl()\r\n          sendMessage(Text,null,null,recordURL)\r\n          setRecordFlag(false)\r\n  \r\n        }catch(err){console.log(err)}\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n \r\n  },[audioBlob])\r\n\r\n\r\n  //when typing, let conversation participants know\r\n  function typing(e)\r\n  {\r\n\r\n    setText(e.target.value)\r\n    if (socket.current == null) return;\r\n      socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n\r\n  }\r\n\r\n\r\n  //send message to conversation participants\r\n  function handleSubmit(e)\r\n  {\r\n    e.preventDefault()\r\n    sendMessage(Text,false,null,null)\r\n    setText(' ')\r\n\r\n  }\r\n\r\n\r\n  //upload image to cloudinary\r\n  async function handleImage(e)\r\n  {\r\n\r\n    const data = new FormData()\r\n    data.append('file',e.target.files[0])\r\n    data.append(\"upload_preset\",\"whatsApp_clone\")\r\n    data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n    try\r\n    {\r\n\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n      props.imageCallback(response.data.url)\r\n      }catch(err){console.log(err)}\r\n\r\n    }\r\n\r\n\r\n  //when record start\r\n  function recordStart()\r\n  {\r\n\r\n    setRecordFlag(true)\r\n    startRecording()\r\n\r\n  }\r\n \r\n  //when record sent\r\n  async function handleRecord()\r\n  {\r\n    stopRecording()\r\n    let res = await fetch(mediaBlobUrl)\r\n    setAudioBlob(res.blob())     \r\n  }\r\n\r\n\r\n  //when record canceled\r\n  function cancelRecord()\r\n  {\r\n    stopRecording()\r\n    clearBlobUrl()\r\n    setRecordFlag(false)\r\n  }\r\n\r\n\r\n  //when recording, show recording div\r\n  function updateRecordingDiv()\r\n  {\r\n    let recordDiv = \r\n    <div>\r\n      <IconButton>\r\n        <CloseIcon fontSize='large' style={{color:'red'}} onClick={cancelRecord} />\r\n      </IconButton>\r\n      <IconButton>\r\n        <CheckIcon fontSize='large'style={{color:'green'}} onClick={handleRecord} />\r\n      </IconButton>\r\n    </div>\r\n\r\n    return recordDiv\r\n  \r\n  }\r\n\r\n  //if removed from group when group chat is on, dont show this group chat\r\n  function handleRemovedFromGroup()\r\n  {\r\n\r\n    setRemovedFromGroupFlag(false)\r\n    setSelectedConversation()\r\n\r\n  }\r\n    \r\n\r\n  //add emoji to message\r\n  const onEmojiClick = (event, emojiObject) => \r\n  {\r\n    setText(Text + emojiObject.emoji)\r\n  };\r\n\r\n\r\n\r\n  return(\r\n\r\n    <div className= 'body_and_footer'>\r\n        <div className='chat_body'>\r\n\r\n          {selectedConversation.Messages.map((message,index)=>\r\n          {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender= ''\r\n            sender= message.name==='manager'? 'manager':( message.id===sessionStorage['id']? 'message_out' : 'message_in')\r\n            let image=message.id===sessionStorage['id']? info.imageName :selectedConversation.ConversationImage\r\n            let choosenClass = sender==='message_in'? 'chat_message chat_sender': ' chat_message chat_reciever'\r\n\r\n            return (\r\n              <div key={index}>\r\n                {sender === 'manager'?\r\n                <div className='around_message'ref={lastMessage ? setRef : null}>\r\n                  <div className='manager_message'>\r\n                     <span className='message_content'>{message.message}</span>\r\n                  </div>\r\n                </div>\r\n                :\r\n                <div key={index} className={choosenClass} ref={lastMessage ? setRef : null}>\r\n                  {message.containsRecord ? \r\n                  <AudioMessage message={message} sender={sender} image={image}/> : <Message  sender={sender} message={message}/>}\r\n                </div> }\r\n              </div>\r\n            )}\r\n          )}\r\n\r\n        </div>\r\n\r\n        <div className='chat_footer_with_stickers'>\r\n           {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n            <div className='chat_footer'>\r\n              {emojiFlag? <IconButton  onClick={()=>setEmojiFlag(false)}><CloseIcon fontSize='large'/> </IconButton>:''}\r\n              <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n                 <InsertEmoticonIcon fontSize='large'/>\r\n              </IconButton>\r\n              <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n              <label htmlFor=\"icon-button-file\">\r\n                <IconButton component=\"span\">\r\n                  <ImageIcon  fontSize='large'/>\r\n                </IconButton>\r\n              </label> \r\n              <form onSubmit={handleSubmit} className='message_section'>\r\n                 <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n                 <button type='submit' > send </button>\r\n              </form>\r\n              {recordFlag? updateRecordingDiv() :   \r\n              <IconButton onClick={recordStart}>\r\n                <MicIcon fontSize='large'  />\r\n              </IconButton>}\r\n            </div>\r\n        </div>\r\n        <Dialog className='exit_group_dialog'  open={removedFromGroupFlag}>\r\n          <div style={{padding:'10px'}}>\r\n            <h2 className='dialog_title'> you where removed from this group</h2>\r\n              <div className='dialog_options_buttons'>\r\n                <button className='dialog_button' onClick={()=>handleRemovedFromGroup()} >ok</button>\r\n              </div>\r\n          </div>\r\n        </Dialog> \r\n\r\n    </div>    \r\n)}\r\n\r\nexport default ChatBody\r\n","C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\sendimagebody.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\message.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\audiomessage.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\addgroupmember.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\profiledetails.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\showgroupdetails.js",[],"C:\\Users\\User\\OneDrive\\Desktop\\whatsapp\\myclient\\src\\components\\showuserdetails.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":79,"column":5,"nodeType":"117","endLine":79,"endColumn":27,"suggestions":"118"},{"ruleId":"115","severity":1,"message":"119","line":104,"column":5,"nodeType":"117","endLine":104,"endColumn":45,"suggestions":"120"},{"ruleId":"115","severity":1,"message":"121","line":113,"column":6,"nodeType":"117","endLine":113,"endColumn":8,"suggestions":"122"},{"ruleId":"115","severity":1,"message":"123","line":373,"column":5,"nodeType":"117","endLine":373,"endColumn":23,"suggestions":"124"},{"ruleId":"115","severity":1,"message":"125","line":385,"column":14,"nodeType":"126","endLine":385,"endColumn":21},{"ruleId":"115","severity":1,"message":"127","line":386,"column":5,"nodeType":"117","endLine":386,"endColumn":42,"suggestions":"128"},{"ruleId":"111","replacedBy":"129"},{"ruleId":"113","replacedBy":"130"},{"ruleId":"115","severity":1,"message":"131","line":28,"column":6,"nodeType":"117","endLine":28,"endColumn":15,"suggestions":"132"},{"ruleId":"115","severity":1,"message":"133","line":81,"column":5,"nodeType":"117","endLine":81,"endColumn":16,"suggestions":"134"},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getConversations' and 'socket'. Either include them or remove the dependency array.","ArrayExpression",["137"],"React Hook useEffect has missing dependencies: 'config' and 'selectedConversation'. Either include them or remove the dependency array.",["138"],"React Hook useEffect has a missing dependency: 'getConversations'. Either include it or remove the dependency array.",["139"],"React Hook useCallback has a missing dependency: 'audio'. Either include it or remove the dependency array.",["140"],"The ref value 'socket.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socket.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has missing dependencies: 'addMessageToConversation' and 'socket'. Either include them or remove the dependency array.",["141"],["135"],["136"],"React Hook useEffect has a missing dependency: 'getContacts'. Either include it or remove the dependency array.",["142"],"React Hook useEffect has missing dependencies: 'Text', 'clearBlobUrl', 'mediaBlobUrl', and 'sendMessage'. Either include them or remove the dependency array.",["143"],"no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [getConversations, selectedConversation, socket]",{"range":"158","text":"159"},"Update the dependencies array to be: [ConnectedUsers, config, selectedConversation, setSelectedConversation]",{"range":"160","text":"161"},"Update the dependencies array to be: [getConversations]",{"range":"162","text":"163"},"Update the dependencies array to be: [audio]",{"range":"164","text":"165"},"Update the dependencies array to be: [addMessageToConversation, conversations, selectedConversation, socket]",{"range":"166","text":"167"},"Update the dependencies array to be: [getContacts, setInfo]",{"range":"168","text":"169"},"Update the dependencies array to be: [Text, audioBlob, clearBlobUrl, mediaBlobUrl, sendMessage]",{"range":"170","text":"171"},[2192,2214],"[getConversations, selectedConversation, socket]",[2800,2840],"[ConnectedUsers, config, selectedConversation, setSelectedConversation]",[2998,3000],"[getConversations]",[10730,10748],"[audio]",[11100,11137],"[addMessageToConversation, conversations, selectedConversation, socket]",[572,581],"[getContacts, setInfo]",[2603,2614],"[Text, audioBlob, clearBlobUrl, mediaBlobUrl, sendMessage]"]