{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback, useRef } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useUser } from \"./userprovider\";\nimport { useSocket } from \"./socketprovider\";\nimport axios from \"axios\";\nimport Contacts from \"../components/contacts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const RefConversations = useRef(conversations);\n  const currentConversationRef = useRef(selectedConversation);\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const {\n    socket,\n    ConnectedUsers\n  } = useSocket();\n  const [typingFlag, setTypingFlag] = useState('');\n  const [currentConversationIsConnected, setCurrentConversationIsConnected] = useState('');\n  const config = {\n    headers: {\n      \"x-access-token\": sessionStorage[\"config\"]\n    }\n  };\n  useEffect(() => {\n    if (socket.current == null) return;\n    socket.current.on('user-typing', ({\n      user,\n      conversationId\n    }) => {\n      console.log(conversationId);\n      console.log(selectedConversation);\n\n      if (selectedConversation) {\n        if (selectedConversation._id == conversationId) {\n          setTypingFlag(user.name);\n        }\n      }\n    });\n  }, [id]);\n  useEffect(async () => {\n    if (selectedConversation) {\n      if (!selectedConversation.isGroup) {\n        if (ConnectedUsers.some(user => user.userId == selectedConversation.Participants[0].id)) {\n          setCurrentConversationIsConnected('');\n        } else {\n          let response = await axios.get(\"http://localhost:5000/api/logIn/\" + selectedConversation.Participants[0].id, config);\n          setCurrentConversationIsConnected(response.data.LastSeen);\n        }\n      }\n    }\n  }, [ConnectedUsers, selectedConversation]);\n  useEffect(async () => {\n    try {\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\" + sessionStorage[\"id\"], config);\n      let ConversationsList = response.data.map(conversation => {\n        let UpdatedConversation = conversation;\n\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage[\"name\"]) {\n          UpdatedConversation = { ...UpdatedConversation,\n            Name: conversation.Participants[0].name,\n            ConversationImage: conversation.Participants[0].image\n          };\n        }\n\n        if (selectedConversation) {\n          if (selectedConversation.id == UpdatedConversation.id) setSelectedConversation(UpdatedConversation);\n        }\n\n        return UpdatedConversation;\n      });\n      /*  if(ConversationsList.length>0)\r\n      setSelectedConversation(ConversationsList[0])*/\n\n      setConversations(ConversationsList);\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  async function createConversation(ids, name, image) {\n    let ConversationImage = image;\n    let isGroup = false; //no participants chosen\n\n    if (ids.length == 0) {\n      console.log(\"no participants choosen\");\n      return;\n    } //check if conversation already exists\n\n\n    let ConversationExists = null;\n\n    if (ids.length == 1) {\n      ConversationExists = conversations.find(conversation => conversation.Name == name);\n    }\n\n    if (ConversationExists) setSelectedConversation(ConversationExists); //create new conversation\n    else {\n      //get conversation participants\n      const participants = ids.map(id => {\n        let addContactToConversation = contacts.filter(contact => id === contact.id);\n        return addContactToConversation[0];\n      }); //add creator to participants\n\n      participants.push({\n        id: info.id,\n        name: info.name,\n        phone: info.phone,\n        imageName: info.imageName,\n        LastSeen: info.LastSeen\n      }); //if group\n\n      if (ids.length > 1) {\n        const formData = new FormData();\n        formData.append(\"file\", ConversationImage);\n        const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n\n        if (fileResponse.data.msg == \"file uploaded\") {\n          const {\n            fileName,\n            filePath\n          } = fileResponse.data;\n          ConversationImage = \"uploads/\" + fileName;\n        } else ConversationImage = \"no image\";\n\n        isGroup = true;\n      }\n\n      let newConversation = {\n        Name: name,\n        creatorId: sessionStorage[\"id\"],\n        Participants: participants,\n        Messages: [],\n        LastMessage: {\n          id: \"\",\n          sender: \"\",\n          message: \"\"\n        },\n        ConversationImage: ConversationImage,\n        isGroup\n      }; //updateDB\n\n      try {\n        let Response = await axios.post(\"http://localhost:5000/api/conversations\", newConversation, config);\n\n        if (Response.data.status == \"created\") {\n          console.log(Response.data.conversation);\n          setSelectedConversation(Response.data.conversation); //show conversation only if messages sent\n\n          if (Response.data.conversation.Messages.length > 0) setConversations(prevConversations => {\n            return [...prevConversations, Response.data.conversation];\n          }); // }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n\n  const addMessageToConversation = useCallback(async ({\n    UpdatedConv\n  }) => {\n    let ConversationExists = false;\n    let newListOfConversations = RefConversations.current.map(conversation => {\n      if (conversation._id === UpdatedConv._id) {\n        ConversationExists = true;\n        let newConv = { ...conversation,\n          Messages: UpdatedConv.Messages,\n          LastMessage: UpdatedConv.LastMessage\n        };\n\n        if (currentConversationRef.current) {\n          if (currentConversationRef.current._id === UpdatedConv._id) setSelectedConversation(newConv);\n        }\n\n        return newConv;\n      } else return conversation;\n    });\n\n    if (!ConversationExists) {\n      if (!UpdatedConv.isGroup) {\n        let newConversation = { ...UpdatedConv,\n          Name: UpdatedConv.Participants[0].name,\n          ConversationImage: UpdatedConv.Participants[0].imageName\n        };\n        setConversations(prevConversations => [...prevConversations, newConversation]);\n      } else setConversations(prevConversations => [...prevConversations, UpdatedConv]);\n    } else setConversations(newListOfConversations);\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket.current == null) return;\n    RefConversations.current = conversations;\n    currentConversationRef.current = selectedConversation;\n    socket.current.on(\"receive-message\", addMessageToConversation);\n    return () => socket.current.off(\"receive-message\", addMessageToConversation);\n  }, [conversations, selectedConversation]);\n\n  const updateSenderConversation = AddMessage => {\n    let ConversationExists = false;\n    setSelectedConversation(AddMessage);\n    let newListOfConcversations = conversations.map(conversation => {\n      if (conversation._id == AddMessage._id) {\n        ConversationExists = true;\n        return AddMessage;\n      } else return conversation;\n    });\n\n    if (ConversationExists) {\n      setConversations(newListOfConcversations);\n    } else setConversations(prevConversations => [...prevConversations, AddMessage]);\n  };\n\n  function sendMessage(text) {\n    let CurrentMessage = {\n      id: info.id,\n      name: info.name,\n      message: text\n    };\n    let sender = {\n      id: info.id,\n      phone: info.phone,\n      name: info.name,\n      image: info.imageName\n    };\n    let AddMessage = { ...selectedConversation,\n      Messages: [...selectedConversation.Messages, CurrentMessage],\n      LastMessage: CurrentMessage\n    };\n    socket.current.emit(\"send-message\", {\n      sender: sender,\n      UpdatedConversation: AddMessage,\n      conversationId: selectedConversation._id\n    });\n    updateSenderConversation(AddMessage);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation,\n      currentConversationIsConnected,\n      typingFlag,\n      setTypingFlag\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"LJqA+iI2Myal3Cldqp3vGSFW8TU=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useRef","useState","useEffect","useUser","useSocket","axios","Contacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","RefConversations","currentConversationRef","createGroupFlag","setCreateGroupFlag","socket","ConnectedUsers","typingFlag","setTypingFlag","currentConversationIsConnected","setCurrentConversationIsConnected","config","headers","sessionStorage","current","on","user","conversationId","console","log","_id","name","isGroup","some","userId","Participants","response","get","data","LastSeen","ConversationsList","map","conversation","UpdatedConversation","length","Name","ConversationImage","image","err","createConversation","ids","ConversationExists","find","participants","addContactToConversation","filter","contact","push","phone","imageName","formData","FormData","append","fileResponse","post","msg","fileName","filePath","newConversation","creatorId","Messages","LastMessage","sender","message","Response","status","prevConversations","addMessageToConversation","UpdatedConv","newListOfConversations","newConv","off","updateSenderConversation","AddMessage","newListOfConcversations","sendMessage","text","CurrentMessage","emit"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,WAA5B,EAAyCC,MAAzC,QAAuD,OAAvD;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,oBAAoB,gBAAGV,KAAK,CAACW,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAOX,UAAU,CAACS,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAA/B,EAAiD;AAAA;;AACtD,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAmBX,OAAO,EAAhC;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACgB,oBAAD,EAAuBC,uBAAvB,IAAkDjB,QAAQ,EAAhE;AACA,QAAMkB,gBAAgB,GAAGnB,MAAM,CAACe,aAAD,CAA/B;AACA,QAAMK,sBAAsB,GAAGpB,MAAM,CAACiB,oBAAD,CAArC;AACA,QAAM,CAACI,eAAD,EAAkBC,kBAAlB,IAAwCrB,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAAEsB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA6BpB,SAAS,EAA5C;AACA,QAAM,CAACqB,UAAD,EAAYC,aAAZ,IAA4BzB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC0B,8BAAD,EAAgCC,iCAAhC,IAAqE3B,QAAQ,CAAC,EAAD,CAAnF;AACA,QAAM4B,MAAM,GAAG;AAAEC,IAAAA,OAAO,EAAE;AAAE,wBAAkBC,cAAc,CAAC,QAAD;AAAlC;AAAX,GAAf;AAGA7B,EAAAA,SAAS,CAAC,MAAI;AAEZ,QAAGqB,MAAM,CAACS,OAAP,IAAiB,IAApB,EAA2B;AAC3BT,IAAAA,MAAM,CAACS,OAAP,CAAeC,EAAf,CAAkB,aAAlB,EAAgC,CAAC;AAACC,MAAAA,IAAD;AAAMC,MAAAA;AAAN,KAAD,KAChC;AAEEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYpB,oBAAZ;;AACE,UAAGA,oBAAH,EACA;AACE,YAAGA,oBAAoB,CAACqB,GAArB,IAA4BH,cAA/B,EACA;AACGT,UAAAA,aAAa,CAACQ,IAAI,CAACK,IAAN,CAAb;AACF;AACF;AACJ,KAZD;AAaD,GAhBQ,EAgBP,CAAC5B,EAAD,CAhBO,CAAT;AAkBAT,EAAAA,SAAS,CAAC,YACV;AACE,QAAGe,oBAAH,EACA;AACA,UAAG,CAACA,oBAAoB,CAACuB,OAAzB,EACC;AACC,YAAGhB,cAAc,CAACiB,IAAf,CAAoBP,IAAI,IAAGA,IAAI,CAACQ,MAAL,IAAczB,oBAAoB,CAAC0B,YAArB,CAAkC,CAAlC,EAAqChC,EAA9E,CAAH,EACA;AACEiB,UAAAA,iCAAiC,CAAC,EAAD,CAAjC;AACD,SAHD,MAKA;AACE,cAAIgB,QAAQ,GAAG,MAAMvC,KAAK,CAACwC,GAAN,CAAU,qCAAoC5B,oBAAoB,CAAC0B,YAArB,CAAkC,CAAlC,EAAqChC,EAAnF,EAAsFkB,MAAtF,CAArB;AACAD,UAAAA,iCAAiC,CAACgB,QAAQ,CAACE,IAAT,CAAcC,QAAf,CAAjC;AACD;AACD;AACD;AACF,GAjBQ,EAiBP,CAACvB,cAAD,EAAgBP,oBAAhB,CAjBO,CAAT;AAmBAf,EAAAA,SAAS,CAAC,YACV;AACE,QAAI;AACF,UAAI0C,QAAQ,GAAG,MAAMvC,KAAK,CAACwC,GAAN,CACnB,+DACEd,cAAc,CAAC,IAAD,CAFG,EAGnBF,MAHmB,CAArB;AAMA,UAAImB,iBAAiB,GAAGJ,QAAQ,CAACE,IAAT,CAAcG,GAAd,CAAmBC,YAAD,IAC1C;AAEE,YAAIC,mBAAmB,GAAED,YAAzB;;AAEA,YAAIA,YAAY,CAACP,YAAb,CAA0BS,MAA1B,IAAoC,CAApC,IAAyCF,YAAY,CAACG,IAAb,IAAqBtB,cAAc,CAAC,MAAD,CAAhF,EACA;AACEoB,UAAAA,mBAAmB,GAAG,EACpB,GAAGA,mBADiB;AAEpBE,YAAAA,IAAI,EAAEH,YAAY,CAACP,YAAb,CAA0B,CAA1B,EAA6BJ,IAFf;AAGpBe,YAAAA,iBAAiB,EAACJ,YAAY,CAACP,YAAb,CAA0B,CAA1B,EAA6BY;AAH3B,WAAtB;AAKH;;AAEC,YAAGtC,oBAAH,EACA;AACA,cAAGA,oBAAoB,CAACN,EAArB,IAA2BwC,mBAAmB,CAACxC,EAAlD,EACGO,uBAAuB,CAACiC,mBAAD,CAAvB;AACF;;AAED,eAAOA,mBAAP;AACD,OArBuB,CAAxB;AAsBA;AACN;;AAEMnC,MAAAA,gBAAgB,CAACgC,iBAAD,CAAhB;AACD,KAjCD,CAiCE,OAAOQ,GAAP,EAAY;AACZpB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAZ;AACD;AACF,GAtCQ,EAsCN,EAtCM,CAAT;;AA6CA,iBAAeC,kBAAf,CAAkCC,GAAlC,EAAuCnB,IAAvC,EAA6CgB,KAA7C,EAAoD;AAClD,QAAID,iBAAiB,GAAGC,KAAxB;AACA,QAAIf,OAAO,GAAG,KAAd,CAFkD,CAIlD;;AACA,QAAIkB,GAAG,CAACN,MAAJ,IAAc,CAAlB,EAAqB;AACnBhB,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA;AACD,KARiD,CAUlD;;;AACA,QAAIsB,kBAAkB,GAAG,IAAzB;;AACA,QAAID,GAAG,CAACN,MAAJ,IAAc,CAAlB,EAAqB;AACnBO,MAAAA,kBAAkB,GAAG5C,aAAa,CAAC6C,IAAd,CAClBV,YAAD,IAAkBA,YAAY,CAACG,IAAb,IAAqBd,IADpB,CAArB;AAGD;;AAED,QAAIoB,kBAAJ,EAAwBzC,uBAAuB,CAACyC,kBAAD,CAAvB,CAAxB,CAEA;AAFA,SAGK;AAEH;AACA,YAAME,YAAY,GAAGH,GAAG,CAACT,GAAJ,CAAStC,EAAD,IAAQ;AACnC,YAAImD,wBAAwB,GAAGjD,QAAQ,CAACkD,MAAT,CAC5BC,OAAD,IAAarD,EAAE,KAAKqD,OAAO,CAACrD,EADC,CAA/B;AAGA,eAAOmD,wBAAwB,CAAC,CAAD,CAA/B;AACD,OALoB,CAArB,CAHG,CAWH;;AACAD,MAAAA,YAAY,CAACI,IAAb,CAAkB;AAChBtD,QAAAA,EAAE,EAAEG,IAAI,CAACH,EADO;AAEhB4B,QAAAA,IAAI,EAAEzB,IAAI,CAACyB,IAFK;AAGhB2B,QAAAA,KAAK,EAAEpD,IAAI,CAACoD,KAHI;AAIhBC,QAAAA,SAAS,EAAErD,IAAI,CAACqD,SAJA;AAKhBpB,QAAAA,QAAQ,EAAEjC,IAAI,CAACiC;AALC,OAAlB,EAZG,CAoBH;;AACA,UAAIW,GAAG,CAACN,MAAJ,GAAa,CAAjB,EAAoB;AAClB,cAAMgB,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,QAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBhB,iBAAxB;AACA,cAAMiB,YAAY,GAAG,MAAMlE,KAAK,CAACmE,IAAN,CACzB,4DADyB,EAEzBJ,QAFyB,EAGzB;AACEtC,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT;AADX,SAHyB,CAA3B;;AASA,YAAIyC,YAAY,CAACzB,IAAb,CAAkB2B,GAAlB,IAAyB,eAA7B,EAA8C;AAC5C,gBAAM;AAAEC,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,cAAyBJ,YAAY,CAACzB,IAA5C;AACAQ,UAAAA,iBAAiB,GAAG,aAAaoB,QAAjC;AACD,SAHD,MAGOpB,iBAAiB,GAAG,UAApB;;AACPd,QAAAA,OAAO,GAAG,IAAV;AACD;;AAED,UAAIoC,eAAe,GAAG;AACpBvB,QAAAA,IAAI,EAAEd,IADc;AAEpBsC,QAAAA,SAAS,EAAE9C,cAAc,CAAC,IAAD,CAFL;AAGpBY,QAAAA,YAAY,EAAEkB,YAHM;AAIpBiB,QAAAA,QAAQ,EAAE,EAJU;AAKpBC,QAAAA,WAAW,EAAE;AAAEpE,UAAAA,EAAE,EAAE,EAAN;AAAUqE,UAAAA,MAAM,EAAE,EAAlB;AAAsBC,UAAAA,OAAO,EAAE;AAA/B,SALO;AAMpB3B,QAAAA,iBAAiB,EAAEA,iBANC;AAOpBd,QAAAA;AAPoB,OAAtB,CAxCG,CAkDH;;AACA,UAAI;AACF,YAAI0C,QAAQ,GAAG,MAAM7E,KAAK,CAACmE,IAAN,CACnB,yCADmB,EAEnBI,eAFmB,EAGnB/C,MAHmB,CAArB;;AAKA,YAAIqD,QAAQ,CAACpC,IAAT,CAAcqC,MAAd,IAAwB,SAA5B,EAAuC;AACrC/C,UAAAA,OAAO,CAACC,GAAR,CAAY6C,QAAQ,CAACpC,IAAT,CAAcI,YAA1B;AACAhC,UAAAA,uBAAuB,CAACgE,QAAQ,CAACpC,IAAT,CAAcI,YAAf,CAAvB,CAFqC,CAIrC;;AACA,cAAIgC,QAAQ,CAACpC,IAAT,CAAcI,YAAd,CAA2B4B,QAA3B,CAAoC1B,MAApC,GAA6C,CAAjD,EACEpC,gBAAgB,CAAEoE,iBAAD,IAAuB;AACtC,mBAAO,CAAC,GAAGA,iBAAJ,EAAuBF,QAAQ,CAACpC,IAAT,CAAcI,YAArC,CAAP;AACD,WAFe,CAAhB,CANmC,CASrC;AACD;AACF,OAjBD,CAiBE,OAAOM,GAAP,EAAY;AACZpB,QAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAZ;AACD;AACF;AACF;;AAED,QAAM6B,wBAAwB,GAAGtF,WAAW,CAAC,OAAO;AAAEuF,IAAAA;AAAF,GAAP,KAC5C;AACG,QAAI3B,kBAAkB,GAAG,KAAzB;AACA,QAAI4B,sBAAsB,GAAGpE,gBAAgB,CAACa,OAAjB,CAAyBiB,GAAzB,CAA8BC,YAAD,IAAiB;AACvE,UAAIA,YAAY,CAACZ,GAAb,KAAqBgD,WAAW,CAAChD,GAArC,EAA0C;AACxCqB,QAAAA,kBAAkB,GAAG,IAArB;AACA,YAAI6B,OAAO,GAAG,EAAE,GAAGtC,YAAL;AACZ4B,UAAAA,QAAQ,EAAEQ,WAAW,CAACR,QADV;AAEZC,UAAAA,WAAW,EAAEO,WAAW,CAACP;AAFb,SAAd;;AAGA,YAAI3D,sBAAsB,CAACY,OAA3B,EAAoC;AAClC,cAAIZ,sBAAsB,CAACY,OAAvB,CAA+BM,GAA/B,KAAuCgD,WAAW,CAAChD,GAAvD,EACEpB,uBAAuB,CAACsE,OAAD,CAAvB;AACH;;AAED,eAAOA,OAAP;AACD,OAXD,MAWO,OAAOtC,YAAP;AACR,KAb0B,CAA7B;;AAiBA,QAAI,CAACS,kBAAL,EAAyB;AACvB,UAAI,CAAC2B,WAAW,CAAC9C,OAAjB,EACC;AACE,YAAIoC,eAAe,GAAG,EAAE,GAAGU,WAAL;AACrBjC,UAAAA,IAAI,EAAEiC,WAAW,CAAC3C,YAAZ,CAAyB,CAAzB,EAA4BJ,IADb;AAErBe,UAAAA,iBAAiB,EAAEgC,WAAW,CAAC3C,YAAZ,CAAyB,CAAzB,EAA4BwB;AAF1B,SAAtB;AAIDnD,QAAAA,gBAAgB,CAAEoE,iBAAD,IAAuB,CAAC,GAAGA,iBAAJ,EAAuBR,eAAvB,CAAxB,CAAhB;AACD,OAPD,MAQE5D,gBAAgB,CAAEoE,iBAAD,IAAuB,CAAC,GAAGA,iBAAJ,EAAsBE,WAAtB,CAAxB,CAAhB;AACH,KAVD,MAUOtE,gBAAgB,CAACuE,sBAAD,CAAhB;AACR,GA/ByC,EA+BxC,CAACvE,gBAAD,CA/BwC,CAA5C;AAiCAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,MAAM,CAACS,OAAP,IAAkB,IAAtB,EAA4B;AAE5Bb,IAAAA,gBAAgB,CAACa,OAAjB,GAA2BjB,aAA3B;AACAK,IAAAA,sBAAsB,CAACY,OAAvB,GAAiCf,oBAAjC;AACAM,IAAAA,MAAM,CAACS,OAAP,CAAeC,EAAf,CAAkB,iBAAlB,EAAqCoD,wBAArC;AAEA,WAAO,MACL9D,MAAM,CAACS,OAAP,CAAeyD,GAAf,CAAmB,iBAAnB,EAAsCJ,wBAAtC,CADF;AAED,GATQ,EASN,CAACtE,aAAD,EAAgBE,oBAAhB,CATM,CAAT;;AAYA,QAAMyE,wBAAwB,GAAIC,UAAD,IAAgB;AAC/C,QAAIhC,kBAAkB,GAAG,KAAzB;AACAzC,IAAAA,uBAAuB,CAACyE,UAAD,CAAvB;AAEA,QAAIC,uBAAuB,GAAG7E,aAAa,CAACkC,GAAd,CAAmBC,YAAD,IAAkB;AAChE,UAAIA,YAAY,CAACZ,GAAb,IAAoBqD,UAAU,CAACrD,GAAnC,EAAwC;AACtCqB,QAAAA,kBAAkB,GAAG,IAArB;AACA,eAAOgC,UAAP;AACD,OAHD,MAGO,OAAOzC,YAAP;AACR,KAL6B,CAA9B;;AAOA,QAAIS,kBAAJ,EAAwB;AACtB3C,MAAAA,gBAAgB,CAAC4E,uBAAD,CAAhB;AACD,KAFD,MAGE5E,gBAAgB,CAAEoE,iBAAD,IAAuB,CACtC,GAAGA,iBADmC,EAEtCO,UAFsC,CAAxB,CAAhB;AAIH,GAlBD;;AAmBA,WAASE,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAIC,cAAc,GAAG;AAAEpF,MAAAA,EAAE,EAAEG,IAAI,CAACH,EAAX;AAAe4B,MAAAA,IAAI,EAAEzB,IAAI,CAACyB,IAA1B;AAAgC0C,MAAAA,OAAO,EAAEa;AAAzC,KAArB;AACA,QAAId,MAAM,GAAG;AACXrE,MAAAA,EAAE,EAAEG,IAAI,CAACH,EADE;AAEXuD,MAAAA,KAAK,EAAEpD,IAAI,CAACoD,KAFD;AAGX3B,MAAAA,IAAI,EAAEzB,IAAI,CAACyB,IAHA;AAIXgB,MAAAA,KAAK,EAAEzC,IAAI,CAACqD;AAJD,KAAb;AAMA,QAAIwB,UAAU,GAAG,EACf,GAAG1E,oBADY;AAEf6D,MAAAA,QAAQ,EAAE,CAAC,GAAG7D,oBAAoB,CAAC6D,QAAzB,EAAmCiB,cAAnC,CAFK;AAGfhB,MAAAA,WAAW,EAAEgB;AAHE,KAAjB;AAKAxE,IAAAA,MAAM,CAACS,OAAP,CAAegE,IAAf,CAAoB,cAApB,EAAoC;AAClChB,MAAAA,MAAM,EAAEA,MAD0B;AAElC7B,MAAAA,mBAAmB,EAAEwC,UAFa;AAGlCxD,MAAAA,cAAc,EAAElB,oBAAoB,CAACqB;AAHH,KAApC;AAMAoD,IAAAA,wBAAwB,CAACC,UAAD,CAAxB;AACD;;AAED,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AACE,IAAA,KAAK,EAAE;AACLtE,MAAAA,eADK;AAELC,MAAAA,kBAFK;AAGLuE,MAAAA,WAHK;AAIL9E,MAAAA,aAJK;AAKL0C,MAAAA,kBALK;AAMLzC,MAAAA,gBANK;AAOLE,MAAAA,uBAPK;AAQLD,MAAAA,oBARK;AASLU,MAAAA,8BATK;AAULF,MAAAA,UAVK;AAWLC,MAAAA;AAXK,KADT;AAAA,cAeGd;AAfH;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;IAvSeF,qB;UACWP,O,EAMUC,S;;;KAPrBM,qB","sourcesContent":["import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\nimport Contacts from \"../components/contacts\";\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\r\n  const { socket, ConnectedUsers } = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n\r\n      console.log(conversationId)\r\n      console.log(selectedConversation)\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id == conversationId)\r\n          {\r\n             setTypingFlag(user.name)\r\n          }\r\n        }\r\n    } )\r\n  },[id])\r\n\r\n  useEffect(async ()=>\r\n  {\r\n    if(selectedConversation)\r\n    {\r\n    if(!selectedConversation.isGroup)\r\n     {\r\n      if(ConnectedUsers.some(user=> user.userId ==selectedConversation.Participants[0].id))\r\n      {\r\n        setCurrentConversationIsConnected('')\r\n      }\r\n      else\r\n      {\r\n        let response = await axios.get(\"http://localhost:5000/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n        setCurrentConversationIsConnected(response.data.LastSeen)\r\n      }\r\n     }\r\n    }\r\n  },[ConnectedUsers,selectedConversation])\r\n\r\n  useEffect(async () =>\r\n  {\r\n    try {\r\n      let response = await axios.get(\r\n        \"http://localhost:5000/api/conversations/UserConversations/\" +\r\n          sessionStorage[\"id\"],\r\n        config\r\n      );\r\n\r\n      let ConversationsList = response.data.map((conversation) =>\r\n      {\r\n\r\n        let UpdatedConversation= conversation\r\n\r\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage[\"name\"])\r\n        {\r\n          UpdatedConversation = {\r\n            ...UpdatedConversation,\r\n            Name: conversation.Participants[0].name,\r\n            ConversationImage:conversation.Participants[0].image\r\n        }\r\n      }\r\n\r\n        if(selectedConversation)\r\n        {\r\n        if(selectedConversation.id == UpdatedConversation.id)\r\n           setSelectedConversation(UpdatedConversation)\r\n        }\r\n          \r\n        return UpdatedConversation;\r\n      });\r\n      /*  if(ConversationsList.length>0)\r\n      setSelectedConversation(ConversationsList[0])*/\r\n\r\n      setConversations(ConversationsList);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }, []);\r\n\r\n\r\n\r\n        \r\n\r\n\r\n  async function createConversation(ids, name, image) {\r\n    let ConversationImage = image;\r\n    let isGroup = false;\r\n\r\n    //no participants chosen\r\n    if (ids.length == 0) {\r\n      console.log(\"no participants choosen\");\r\n      return;\r\n    }\r\n\r\n    //check if conversation already exists\r\n    let ConversationExists = null;\r\n    if (ids.length == 1) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name == name\r\n      );\r\n    }\r\n\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      //if group\r\n      if (ids.length > 1) {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", ConversationImage);\r\n        const fileResponse = await axios.post(\r\n          \"http://localhost:5000/api/conversations/AddConversationPic\",\r\n          formData,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n          }\r\n        );\r\n        if (fileResponse.data.msg == \"file uploaded\") {\r\n          const { fileName, filePath } = fileResponse.data;\r\n          ConversationImage = \"uploads/\" + fileName;\r\n        } else ConversationImage = \"no image\";\r\n        isGroup = true;\r\n      }\r\n\r\n      let newConversation = {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: [],\r\n        LastMessage: { id: \"\", sender: \"\", message: \"\" },\r\n        ConversationImage: ConversationImage,\r\n        isGroup,\r\n      };\r\n\r\n      //updateDB\r\n      try {\r\n        let Response = await axios.post(\r\n          \"http://localhost:5000/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n        if (Response.data.status == \"created\") {\r\n          console.log(Response.data.conversation);\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent\r\n          if (Response.data.conversation.Messages.length > 0)\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n          // }\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n   {\r\n      let ConversationExists = false;\r\n      let newListOfConversations = RefConversations.current.map((conversation) =>{\r\n          if (conversation._id === UpdatedConv._id) {\r\n            ConversationExists = true;\r\n            let newConv = { ...conversation,\r\n              Messages: UpdatedConv.Messages,\r\n              LastMessage: UpdatedConv.LastMessage,};\r\n            if (currentConversationRef.current) {\r\n              if (currentConversationRef.current._id === UpdatedConv._id)\r\n                setSelectedConversation(newConv);\r\n            }\r\n\r\n            return newConv;\r\n          } else return conversation;\r\n        }\r\n      );\r\n\r\n\r\n      if (!ConversationExists) {\r\n        if (!UpdatedConv.isGroup)\r\n         {\r\n           let newConversation = { ...UpdatedConv,\r\n            Name: UpdatedConv.Participants[0].name,\r\n            ConversationImage: UpdatedConv.Participants[0].imageName,\r\n          };\r\n          setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n        } else\r\n          setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n      } else setConversations(newListOfConversations);\r\n    },[setConversations]);\r\n\r\n  useEffect(() => {\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  }, [conversations, selectedConversation]);\r\n\r\n\r\n  const updateSenderConversation = (AddMessage) => {\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => {\r\n      if (conversation._id == AddMessage._id) {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } else return conversation;\r\n    });\r\n\r\n    if (ConversationExists) {\r\n      setConversations(newListOfConcversations);\r\n    } else\r\n      setConversations((prevConversations) => [\r\n        ...prevConversations,\r\n        AddMessage,\r\n      ]);\r\n  };\r\n  function sendMessage(text) {\r\n    let CurrentMessage = { id: info.id, name: info.name, message: text };\r\n    let sender = {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      image: info.imageName,\r\n    };\r\n    let AddMessage = {\r\n      ...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n    socket.current.emit(\"send-message\", {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        createGroupFlag,\r\n        setCreateGroupFlag,\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag\r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}