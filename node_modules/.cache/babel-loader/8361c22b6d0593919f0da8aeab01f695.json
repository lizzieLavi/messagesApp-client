{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useUser } from './userprovider';\nimport { useSocket } from './socketprovider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const [newMessageFlag, setNewMessageFlag] = useState(false);\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const socket = useSocket();\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n\n  const getConversations = async () => {\n    console.log('here');\n\n    try {\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\" + sessionStorage['id'], config);\n      let ConversationsList = response.data.map(conversation => {\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage['name']) {\n          let UpdatedNameConversation = conversation;\n          UpdatedNameConversation = { ...UpdatedNameConversation,\n            Name: conversation.Participants[0].name\n          };\n          return UpdatedNameConversation;\n        } else return conversation;\n      });\n      setConversations(ConversationsList);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  async function createConversation(ids, name, image) {\n    let ConversationImage = image;\n\n    if (ids.length == 0) {\n      console.log('no participants choosen');\n      return;\n    }\n\n    let participants = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n    participants = [...participants, {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    }];\n\n    if (ids.length > 1) {\n      const formData = new FormData();\n      formData.append('file', ConversationImage);\n      const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\", formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const {\n        fileName,\n        filePath\n      } = fileResponse.data;\n      ConversationImage = 'uploads/' + fileName;\n    } //updateDB\n\n\n    let newConversation = {\n      name: name,\n      creatorId: sessionStorage['id'],\n      participants: participants,\n      messages: [],\n      lastMessage: {\n        id: '',\n        sender: '',\n        message: ''\n      },\n      ConversationImage: ConversationImage\n    };\n\n    try {\n      await axios.post(\"http://localhost:5000/api/conversations\", newConversation, config);\n    } catch (err) {\n      console.log(err);\n    }\n\n    getConversations();\n  }\n\n  async function addMessageToConversation({\n    currentConversation,\n    fromMe\n  }) {\n    if (fromMe) {\n      let response = await axios.put(\"http://localhost:5000/api/conversations/\" + currentConversation._id, currentConversation, config);\n    }\n\n    if (selectedConversation._id == currentConversation._id) {\n      setSelectedConversation(prevSelectedConversation => {\n        return { ...prevSelectedConversation,\n          LastMessage: currentConversation.LastMessage,\n          Messages: currentConversation.Messages\n        };\n      });\n    }\n\n    getConversations();\n  }\n\n  function sendMessage(currentConversation, text) {\n    let senderParticipant = {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    };\n    let CurrentMessage = {\n      id: sessionStorage['id'],\n      name: info.name,\n      message: text\n    };\n    let updatedConversation = { ...currentConversation,\n      LastMessage: CurrentMessage,\n      Messages: [...currentConversation.Messages, CurrentMessage],\n      Participants: [...currentConversation.Participants, senderParticipant]\n    };\n    addMessageToConversation({\n      currentConversation: updatedConversation,\n      fromMe: true\n    });\n    socket.emit('send-message', {\n      currentConversation: updatedConversation,\n      fromMe: false\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n  useEffect(async () => {\n    getConversations();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"xPjV+S4xN0qZ0hlvPrRj+OfbrSQ=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","newMessageFlag","setNewMessageFlag","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","createGroupFlag","setCreateGroupFlag","socket","config","sessionStorage","getConversations","console","log","response","get","ConversationsList","data","map","conversation","Participants","length","Name","UpdatedNameConversation","name","err","createConversation","ids","image","ConversationImage","participants","addContactToConversation","filter","contact","phone","ProfilePic","formData","FormData","append","fileResponse","post","headers","fileName","filePath","newConversation","creatorId","messages","lastMessage","sender","message","addMessageToConversation","currentConversation","fromMe","put","_id","prevSelectedConversation","LastMessage","Messages","sendMessage","text","senderParticipant","CurrentMessage","updatedConversation","emit","on","off"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useUser } from './userprovider'\r\nimport { useSocket } from './socketprovider'\r\nimport axios from 'axios'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const [newMessageFlag,setNewMessageFlag] =useState(false)\r\n  const {contacts,info} = useUser()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversation,setSelectedConversation] = useState()\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const socket = useSocket()\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}};\r\n\r\nconst getConversations = async() =>\r\n{\r\n\r\n  console.log('here')\r\n  try\r\n  {\r\n    let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\"+sessionStorage['id'],config)\r\n    let ConversationsList =  response.data.map(conversation=>\r\n    {\r\n      if(conversation.Participants.length == 1 && conversation.Name == sessionStorage['name'] )\r\n      {\r\n        let UpdatedNameConversation = conversation\r\n        UpdatedNameConversation= {...UpdatedNameConversation,Name:conversation.Participants[0].name}\r\n\r\n        return UpdatedNameConversation\r\n      }\r\n\r\n      else return conversation\r\n        \r\n    })\r\n      \r\n    setConversations(ConversationsList)\r\n\r\n   }catch(err){console.log(err)}\r\n}\r\nasync function createConversation(ids,name,image) \r\n  {\r\n    let  ConversationImage= image\r\n    if(ids.length == 0)\r\n    {\r\n     console.log('no participants choosen')\r\n     return;\r\n    }\r\n     let participants =ids.map(id=>\r\n    { \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n\r\n    participants=[...participants,{id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}]\r\n    \r\n    if(ids.length > 1)\r\n    {\r\n      const formData= new FormData();\r\n      formData.append('file',ConversationImage)\r\n      const fileResponse =await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\",formData,{headers: {\r\n      'Content-Type': 'multipart/form-data'}})\r\n      const {fileName,filePath} =fileResponse.data\r\n      ConversationImage='uploads/'+fileName\r\n    }\r\n\r\n    //updateDB\r\n    let newConversation = {name:name,creatorId: sessionStorage['id'],participants:participants,messages:[],lastMessage:{id:'',sender:'',message:''},ConversationImage:ConversationImage}\r\n    try{\r\n       await axios.post(\"http://localhost:5000/api/conversations\",newConversation,config)\r\n    } catch(err){console.log(err)}\r\n    \r\n    getConversations()\r\n\r\n\r\n  }\r\n\r\n\r\n  \r\n async function addMessageToConversation ({currentConversation,fromMe}) \r\n  {\r\n    if(fromMe)\r\n    {\r\n  \r\n      let response = await axios.put(\"http://localhost:5000/api/conversations/\" + currentConversation._id,currentConversation,config) \r\n    } \r\n\r\n    if(selectedConversation._id == currentConversation._id)  \r\n    {\r\n       setSelectedConversation(prevSelectedConversation =>\r\n        { return {...prevSelectedConversation,LastMessage: currentConversation.LastMessage,Messages: currentConversation.Messages}})\r\n    }\r\n\r\n    \r\n    getConversations()\r\n\r\n      \r\n  }\r\n\r\n\r\n  function sendMessage(currentConversation,text) \r\n  {\r\n    let senderParticipant = {id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}\r\n    let CurrentMessage ={ id: sessionStorage['id'], name: info.name,message: text}\r\n    let updatedConversation={...currentConversation,LastMessage : CurrentMessage,Messages: [...currentConversation.Messages , CurrentMessage],Participants:[...currentConversation.Participants , senderParticipant]}\r\n    addMessageToConversation({currentConversation:updatedConversation,fromMe:true})\r\n    socket.emit('send-message', {currentConversation:updatedConversation,fromMe:false})\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return\r\n\r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('receive-message')\r\n  }, [socket, addMessageToConversation])\r\n\r\n\r\n\r\n  useEffect(async () =>\r\n  {\r\n    getConversations();\r\n\r\n  },[]) \r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversation}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}