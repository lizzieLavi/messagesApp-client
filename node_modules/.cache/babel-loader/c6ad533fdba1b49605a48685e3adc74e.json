{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useUser } from './userprovider';\nimport { useSocket } from './socketprovider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const socket = useSocket();\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  useEffect(async () => {\n    try {\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\" + sessionStorage['id'], config);\n      setConversations(response.data);\n    } catch (err) {\n      console.log(err);\n    }\n  }, [setConversations]);\n\n  async function createConversation(ids, name, image) {\n    let isGroup = false;\n    let ConversationImage = image;\n\n    if (ids.length == 0) {\n      console.log('no participants choosen');\n      return;\n    }\n\n    let participants = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n    participants = [...participants, {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    }];\n\n    if (ids.length > 1) {\n      const formData = new FormData();\n      formData.append('file', ConversationImage);\n      const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\", formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const {\n        fileName,\n        filePath\n      } = fileResponse.data;\n      ConversationImage = 'uploads/' + fileName;\n      isGroup = true;\n    }\n\n    let newConversation = {\n      name: name,\n      creatorId: sessionStorage['id'],\n      participants: participants,\n      messages: [],\n      lastMessage: {\n        sender: '',\n        message: ''\n      },\n      ConversationImage: ConversationImage,\n      isGroup: isGroup\n    };\n\n    try {\n      let response = await axios.post(\"http://localhost:5000/api/conversations\", newConversation, config);\n\n      if (response.data.status == 'created') {\n        setConversations(prevConversations => {\n          return [...prevConversations, response.data.conversation];\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const addMessageToConversation = useCallback(({\n    currentConversation,\n    message,\n    fromMe,\n    sender\n  }) => {\n    let NewConversations = conversations.map(async conversation => {\n      let ConversationExists = false;\n\n      if (conversation._id == currentConversation._id) {\n        ConversationExists = true;\n        let CurrentMessage = {\n          id: sender.id,\n          name: sender.name,\n          message: message,\n          fromMe: fromMe\n        };\n        let senderParticipant = {\n          id: info.id,\n          name: info.name,\n          phone: info.phone,\n          image: info.ProfilePic\n        };\n        let updatedConversation = conversation;\n        updatedConversation = { ...updatedConversation,\n          LastMessage: CurrentMessage,\n          Messages: [...conversation.Messages, CurrentMessage]\n        };\n\n        if (fromMe) {\n          setSelectedConversation(updatedConversation);\n          updatedConversation = { ...updatedConversation,\n            Participants: [...conversation.Participants, senderParticipant]\n          };\n          let response = await axios.put(\"http://localhost:5000/api/conversations/\" + conversation._id, updatedConversation, config);\n\n          if (response.data = \"Updated\") {\n            return updatedConversation;\n          }\n        } else {}\n      } else return conversation;\n    });\n    /* if(flag ==0)\r\n     {\r\n       let CurrentMessage ={ id: sender.id, name: sender.name,message: message, fromMe: fromMe}\r\n       let newConversation = {participants:currentConversation.participants,messages:[CurrentMessage],lastMessage:CurrentMessage,name:conversationName}\r\n       NewConversations=[...prevConversations,newConversation]\r\n     }*/\n\n    return NewConversations;\n  }, [setConversations]);\n\n  function sendMessage(currentConversation, text) {\n    let sender = {\n      id: sessionStorage['id'],\n      name: info.name\n    };\n    socket.emit('send-message', {\n      currentConversation: currentConversation,\n      message: text,\n      sender: sender\n    });\n    addMessageToConversation({\n      currentConversation: selectedConversation,\n      message: text,\n      fromMe: true,\n      sender: sender\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('recieve-message');\n  }, [socket, addMessageToConversation]);\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"5W918Q1s0Rfwp1wW4SVZXPUmxGo=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","createGroupFlag","setCreateGroupFlag","socket","config","sessionStorage","response","get","data","err","console","log","createConversation","ids","name","image","isGroup","ConversationImage","length","participants","map","addContactToConversation","filter","contact","phone","ProfilePic","formData","FormData","append","fileResponse","post","headers","fileName","filePath","newConversation","creatorId","messages","lastMessage","sender","message","status","prevConversations","conversation","addMessageToConversation","currentConversation","fromMe","NewConversations","ConversationExists","_id","CurrentMessage","senderParticipant","updatedConversation","LastMessage","Messages","Participants","put","sendMessage","text","emit","on","off"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useUser } from './userprovider'\r\nimport { useSocket } from './socketprovider'\r\nimport axios from 'axios'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts,info} = useUser()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversation,setSelectedConversation] = useState()\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const socket = useSocket()\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}};\r\n\r\n    \r\n  useEffect(async () =>\r\n  {\r\n     try{\r\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\"+sessionStorage['id'],config)\r\n      setConversations(response.data)\r\n     }catch(err){console.log(err)}\r\n\r\n\r\n  },[setConversations]) \r\n\r\n  \r\n  async function createConversation(ids,name,image) \r\n  {\r\n    let isGroup=false;\r\n    let  ConversationImage= image\r\n    if(ids.length == 0)\r\n    {\r\n     console.log('no participants choosen')\r\n     return;\r\n    }\r\n     let participants =ids.map(id=>\r\n    { \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n    participants=[...participants,{id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}]\r\n    \r\n    if(ids.length > 1)\r\n    {\r\n      const formData= new FormData();\r\n      formData.append('file',ConversationImage)\r\n      const fileResponse =await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\",formData,{headers: {\r\n      'Content-Type': 'multipart/form-data'}})\r\n      const {fileName,filePath} =fileResponse.data\r\n      ConversationImage='uploads/'+fileName\r\n      isGroup=true;\r\n    }\r\n\r\n\r\n\r\n    let newConversation = {name:name,creatorId: sessionStorage['id'],participants:participants,messages:[],lastMessage:{sender:'',message:''},ConversationImage:ConversationImage,isGroup:isGroup}\r\n    try{\r\n    let response = await axios.post(\"http://localhost:5000/api/conversations\",newConversation,config)\r\n    if(response.data.status == 'created')\r\n       {\r\n        setConversations(prevConversations =>\r\n          {\r\n            return [...prevConversations,response.data.conversation]\r\n          })\r\n       }\r\n    } catch(err){console.log(err)}\r\n\r\n  }\r\n\r\n  const addMessageToConversation =useCallback( ({currentConversation, message, fromMe, sender})=>\r\n  {\r\n         let NewConversations =conversations.map(async(conversation)=>\r\n          {\r\n            let ConversationExists = false;\r\n            if(conversation._id == currentConversation._id)\r\n            {\r\n              ConversationExists =true;\r\n              let CurrentMessage ={ id: sender.id, name: sender.name,message: message, fromMe: fromMe}\r\n              let senderParticipant = {id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}\r\n              let updatedConversation = conversation\r\n              updatedConversation={... updatedConversation,LastMessage : CurrentMessage,Messages: [...conversation.Messages , CurrentMessage]}\r\n\r\n              if(fromMe)\r\n              {\r\n                setSelectedConversation(updatedConversation)\r\n                updatedConversation = {...updatedConversation,Participants: [...conversation.Participants, senderParticipant]}\r\n                let response = await axios.put(\"http://localhost:5000/api/conversations/\" + conversation._id,updatedConversation,config)\r\n                if(response.data = \"Updated\")\r\n                {\r\n                  return updatedConversation\r\n                }\r\n              }\r\n\r\n              else\r\n              {\r\n                 \r\n              }\r\n            }\r\n\r\n            else return conversation;\r\n          })\r\n         /* if(flag ==0)\r\n          {\r\n            let CurrentMessage ={ id: sender.id, name: sender.name,message: message, fromMe: fromMe}\r\n            let newConversation = {participants:currentConversation.participants,messages:[CurrentMessage],lastMessage:CurrentMessage,name:conversationName}\r\n            NewConversations=[...prevConversations,newConversation]\r\n          }*/\r\n          return NewConversations;\r\n      \r\n  },[setConversations],)\r\n\r\n  function sendMessage(currentConversation,text) {\r\n\r\n\r\n    let sender ={id: sessionStorage['id'], name: info.name}\r\n\r\n    socket.emit('send-message', {currentConversation:currentConversation ,message:text,sender:sender})\r\n    addMessageToConversation({currentConversation:selectedConversation,message:text ,fromMe: true,sender:sender})\r\n\r\n  }\r\n\r\n  \r\n  useEffect(() =>\r\n  {\r\n    if(socket == null)  return\r\n    \r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('recieve-message')\r\n\r\n\r\n  },[socket,addMessageToConversation]) \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversation}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}