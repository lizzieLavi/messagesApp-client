{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useUser } from './userprovider';\nimport { useSocket } from './socketprovider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const [newMessageFlag, setNewMessageFlag] = useState(false);\n  const socket = useSocket();\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  useEffect(async () => {\n    try {\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\" + sessionStorage['id'], config);\n      let ConversationsList = response.data.map(conversation => {\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage['name']) {\n          let UpdatedNameConversation = conversation;\n          UpdatedNameConversation = { ...UpdatedNameConversation,\n            Name: conversation.Participants[0].name\n          };\n          return UpdatedNameConversation;\n        } else return conversation;\n      });\n      setConversations(ConversationsList);\n    } catch (err) {\n      console.log(err);\n    }\n  }, [setConversations, createConversation, newMessageFlag]);\n\n  async function createConversation(ids, name, image) {\n    let ConversationImage = image;\n\n    if (ids.length == 0) {\n      console.log('no participants choosen');\n      return;\n    }\n\n    let participants = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n    participants = [...participants, {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    }];\n\n    if (ids.length > 1) {\n      const formData = new FormData();\n      formData.append('file', ConversationImage);\n      const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\", formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const {\n        fileName,\n        filePath\n      } = fileResponse.data;\n      ConversationImage = 'uploads/' + fileName;\n    } //updateDB\n\n\n    let newConversation = {\n      name: name,\n      creatorId: sessionStorage['id'],\n      participants: participants,\n      messages: [],\n      lastMessage: {\n        id: '',\n        sender: '',\n        message: ''\n      },\n      ConversationImage: ConversationImage\n    };\n\n    try {\n      await axios.post(\"http://localhost:5000/api/conversations\", newConversation, config);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const addMessageToConversation = async UpdatedConversation => {\n    console.log(UpdatedConversation);\n    let senderParticipant = {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    };\n    let updateDBConversation = { ...UpdatedConversation,\n      Participants: [...UpdatedConversation.Participants, senderParticipant]\n    };\n    let response = await axios.put(\"http://localhost:5000/api/conversations/\" + UpdatedConversation._id, updateDBConversation, config);\n  };\n\n  function GotNewMessage(UpdatedConversation) {\n    setNewMessageFlag(!newMessageFlag);\n\n    if (UpdatedConversation._id == selectedConversation._id) {\n      setSelectedConversation(UpdatedConversation);\n    }\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', GotNewMessage);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(currentConversation, text) {\n    let CurrentMessage = {\n      id: sessionStorage['id'],\n      name: info.name,\n      message: text\n    };\n    let updatedConversation = { ...currentConversation,\n      LastMessage: CurrentMessage,\n      Messages: [...currentConversation.Messages, CurrentMessage]\n    };\n    setSelectedConversation(updatedConversation);\n    socket.emit('send-message', {\n      currentConversation: updatedConversation\n    });\n    addMessageToConversation(updatedConversation);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"1tgRacDDNMXJtTjbA7h/moJ4tk0=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","createGroupFlag","setCreateGroupFlag","newMessageFlag","setNewMessageFlag","socket","config","sessionStorage","response","get","ConversationsList","data","map","conversation","Participants","length","Name","UpdatedNameConversation","name","err","console","log","createConversation","ids","image","ConversationImage","participants","addContactToConversation","filter","contact","phone","ProfilePic","formData","FormData","append","fileResponse","post","headers","fileName","filePath","newConversation","creatorId","messages","lastMessage","sender","message","addMessageToConversation","UpdatedConversation","senderParticipant","updateDBConversation","put","_id","GotNewMessage","on","off","sendMessage","currentConversation","text","CurrentMessage","updatedConversation","LastMessage","Messages","emit"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useUser } from './userprovider'\r\nimport { useSocket } from './socketprovider'\r\nimport axios from 'axios'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts,info} = useUser()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversation,setSelectedConversation] = useState()\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const [newMessageFlag,setNewMessageFlag] =useState(false)\r\n  const socket = useSocket()\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}};\r\n\r\n    \r\n  useEffect(async () =>\r\n  {\r\n     try{\r\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\"+sessionStorage['id'],config)\r\n      let ConversationsList =  response.data.map(conversation=>\r\n        {\r\n          if(conversation.Participants.length == 1 && conversation.Name == sessionStorage['name'] )\r\n          {\r\n              let UpdatedNameConversation = conversation\r\n              UpdatedNameConversation= {...UpdatedNameConversation,Name:conversation.Participants[0].name}\r\n\r\n              return UpdatedNameConversation\r\n        \r\n            \r\n          }\r\n\r\n          else return conversation\r\n\r\n          \r\n        })\r\n        \r\n      setConversations(ConversationsList)\r\n     }catch(err){console.log(err)}\r\n\r\n\r\n  },[setConversations,createConversation,newMessageFlag]) \r\n\r\n  \r\n  async function createConversation(ids,name,image) \r\n  {\r\n    let  ConversationImage= image\r\n    if(ids.length == 0)\r\n    {\r\n     console.log('no participants choosen')\r\n     return;\r\n    }\r\n     let participants =ids.map(id=>\r\n    { \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n\r\n    participants=[...participants,{id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}]\r\n    \r\n    if(ids.length > 1)\r\n    {\r\n      const formData= new FormData();\r\n      formData.append('file',ConversationImage)\r\n      const fileResponse =await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\",formData,{headers: {\r\n      'Content-Type': 'multipart/form-data'}})\r\n      const {fileName,filePath} =fileResponse.data\r\n      ConversationImage='uploads/'+fileName\r\n    }\r\n\r\n\r\n    //updateDB\r\n    let newConversation = {name:name,creatorId: sessionStorage['id'],participants:participants,messages:[],lastMessage:{id:'',sender:'',message:''},ConversationImage:ConversationImage}\r\n    try{\r\n       await axios.post(\"http://localhost:5000/api/conversations\",newConversation,config)\r\n    } catch(err){console.log(err)}\r\n\r\n  }\r\n\r\n\r\n  \r\n  const addMessageToConversation =async (UpdatedConversation) =>\r\n  {\r\n\r\n    console.log(UpdatedConversation)\r\n      let senderParticipant = {id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}\r\n      let updateDBConversation = {...UpdatedConversation,Participants: [...UpdatedConversation.Participants, senderParticipant]}\r\n      let response = await axios.put(\"http://localhost:5000/api/conversations/\" + UpdatedConversation._id,updateDBConversation,config)\r\n      \r\n  }\r\n\r\n  function GotNewMessage(UpdatedConversation) \r\n  {\r\n    setNewMessageFlag(!newMessageFlag)\r\n    if(UpdatedConversation._id == selectedConversation._id)\r\n    {\r\n       setSelectedConversation(UpdatedConversation)\r\n    }\r\n\r\n  }\r\n  useEffect(() => {\r\n    if (socket == null) return\r\n\r\n    socket.on('receive-message', GotNewMessage)\r\n\r\n    return () => socket.off('receive-message')\r\n  }, [socket,addMessageToConversation])\r\n\r\n\r\n  function sendMessage(currentConversation,text) \r\n  {\r\n    let CurrentMessage ={ id: sessionStorage['id'], name: info.name,message: text}\r\n    let updatedConversation={...currentConversation,LastMessage : CurrentMessage,Messages: [...currentConversation.Messages , CurrentMessage]}\r\n    setSelectedConversation(updatedConversation)\r\n    socket.emit('send-message', {currentConversation:updatedConversation})\r\n    addMessageToConversation(updatedConversation)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversation}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}