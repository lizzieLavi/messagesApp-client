{"ast":null,"code":"import _toConsumableArray from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useCallback,useRef}from\"react\";import{useState,useEffect}from\"react\";import{useUser}from\"./userprovider\";import{useSocket}from\"./socketprovider\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";var ConversationsContext=/*#__PURE__*/React.createContext();export function useConversations(){return useContext(ConversationsContext);}export function ConversationsProvider(_ref){var children=_ref.children;var _useUser=useUser(),contacts=_useUser.contacts,info=_useUser.info;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),conversations=_useState2[0],setConversations=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),selectedConversation=_useState4[0],setSelectedConversation=_useState4[1];var RefConversations=useRef(conversations);var currentConversationRef=useRef(selectedConversation);var _useSocket=useSocket(),socket=_useSocket.socket,ConnectedUsers=_useSocket.ConnectedUsers;var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),typingFlag=_useState6[0],setTypingFlag=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),currentConversationIsConnected=_useState8[0],setCurrentConversationIsConnected=_useState8[1];var config={headers:{\"x-access-token\":sessionStorage[\"config\"]}};var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),showDetails=_useState10[0],setShowDetails=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),removedFromGroupFlag=_useState12[0],setRemovedFromGroupFlag=_useState12[1];var audio=new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');var _useState13=useState(true),_useState14=_slicedToArray(_useState13,2),renderFlag=_useState14[0],setRenderFlag=_useState14[1];var updateFunction=function updateFunction(){setRenderFlag(true);};useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(socket.current==null)){_context2.next=2;break;}return _context2.abrupt(\"return\");case 2://when other user updates conversation information, update this user on changes\nsocket.current.on('update-conversation',updateFunction);//when user was removed, remove this user from conversation\nsocket.current.on('removed-user',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:getConversations().then(function(res){setConversations(res);if(selectedConversation){/*if this selected conversation dosn't exists in conversations anymore, this is the deleted user, \r\n          let him know he was deleted and remove this chat from selected conversation*/var checkIfDeleted=res.filter(function(conversation){return conversation._id===selectedConversation._id;});if(checkIfDeleted.length===0)setRemovedFromGroupFlag(true);}});case 1:case\"end\":return _context.stop();}}},_callee);})));return _context2.abrupt(\"return\",function(){socket.current.off('update-conversation',updateFunction);socket.current.off('remove-conversation');});case 5:case\"end\":return _context2.stop();}}},_callee2);}));return _fetchData.apply(this,arguments);}fetchData();},[]);/*everytime a user is connected/dissconnected/ this user entered new conversation,\r\n check if the current conversation user is connected or not*/useEffect(function(){function fetchData(){return _fetchData2.apply(this,arguments);}function _fetchData2(){_fetchData2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var response;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!selectedConversation){_context3.next=10;break;}if(selectedConversation.isGroup){_context3.next=10;break;}if(!ConnectedUsers.some(function(user){return user.userId===selectedConversation.Participants[0].id;})){_context3.next=6;break;}setCurrentConversationIsConnected('');_context3.next=10;break;case 6:_context3.next=8;return axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+selectedConversation.Participants[0].id,config);case 8:response=_context3.sent;setCurrentConversationIsConnected(response.data.LastSeen);case 10:case\"end\":return _context3.stop();}}},_callee3);}));return _fetchData2.apply(this,arguments);}fetchData();},[ConnectedUsers,selectedConversation]);//on first render,and every time conversation updates, get new conversations from DB\nuseEffect(function(){function fetchData(){return _fetchData3.apply(this,arguments);}function _fetchData3(){_fetchData3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:getConversations().then(function(res){return setConversations(res);});case 1:case\"end\":return _context4.stop();}}},_callee4);}));return _fetchData3.apply(this,arguments);}if(renderFlag){fetchData();setRenderFlag(false);}},[renderFlag]);//when other user is typing, and this user is on this conversation, let him know other user is typing\nuseEffect(function(){if(socket.current==null)return;socket.current.on('user-typing',function(_ref3){var user=_ref3.user,conversationId=_ref3.conversationId;if(selectedConversation){if(selectedConversation._id===conversationId){setTypingFlag(user.name);}}});},[selectedConversation]);//get updated conversations from DB when needed\nfunction getConversations(){return _getConversations.apply(this,arguments);}//on search event, update shown conversations list\nfunction _getConversations(){_getConversations=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(){var response,ConversationsList;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;_context7.next=3;return axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\"+sessionStorage[\"id\"],config);case 3:response=_context7.sent;ConversationsList=response.data.map(function(conversation){var UpdatedConversation=conversation;/*if this is a private conversation, and the name and picture saved as this user name, \r\n        update the conversation to other user name and picture*/if(!conversation.isGroup&&conversation.Name===sessionStorage['name'])UpdatedConversation=_objectSpread(_objectSpread({},UpdatedConversation),{},{Name:conversation.Participants[0].name,ConversationImage:conversation.Participants[0].imageName});//update the current shown on screen conversation\nif(selectedConversation){if(selectedConversation._id===UpdatedConversation._id)setSelectedConversation(UpdatedConversation);}return UpdatedConversation;});return _context7.abrupt(\"return\",ConversationsList);case 8:_context7.prev=8;_context7.t0=_context7[\"catch\"](0);console.log(_context7.t0);case 11:case\"end\":return _context7.stop();}}},_callee7,null,[[0,8]]);}));return _getConversations.apply(this,arguments);}function getSearchConverastions(_x){return _getSearchConverastions.apply(this,arguments);}//create new conversation\nfunction _getSearchConverastions(){_getSearchConverastions=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(str){return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:getConversations().then(function(res){var SearchResult=res.filter(function(conversation){return conversation.Name.includes(str)===true;});setConversations(SearchResult);});case 1:case\"end\":return _context8.stop();}}},_callee8);}));return _getSearchConverastions.apply(this,arguments);}function createConversation(_x2,_x3,_x4,_x5){return _createConversation.apply(this,arguments);}//update existing conversation details when changed \nfunction _createConversation(){_createConversation=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(ids,name,image,groupFlag){var ConversationImage,isGroup,messages,lastMessage,ConversationExists,participants,createdDate,parts,data,response,newConversation,Response;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:ConversationImage=image;isGroup=groupFlag;messages=[];lastMessage='';//no participants chosen\nif(!(ids.length===0)){_context9.next=6;break;}return _context9.abrupt(\"return\",{status:'error',message:'no participants choosen'});case 6://check if conversation already exists and it's not a group.\nConversationExists=null;if(ids.length===1&&!isGroup){ConversationExists=conversations.find(function(conversation){return conversation.Name===name;});}//if already exists, show the existing one\nif(!ConversationExists){_context9.next=12;break;}setSelectedConversation(ConversationExists);//create new conversation\n_context9.next=45;break;case 12://get conversation participants\nparticipants=ids.map(function(id){var addContactToConversation=contacts.filter(function(contact){return id===contact.id;});return addContactToConversation[0];});//add creator to participants\nparticipants.push({id:info.id,name:info.name,phone:info.phone,imageName:info.imageName,LastSeen:info.LastSeen});createdDate='';//if group add creation date,add creation message and upload group picture\nif(!isGroup){_context9.next=34;break;}parts=new Intl.DateTimeFormat('en',{hc:'h12',year:'numeric',month:'2-digit',day:'2-digit',hour:'numeric',minute:'numeric',timeZone:'Asia/Jerusalem'}).formatToParts(new Date()).reduce(function(acc,part){acc[part.type]=part.value;return acc;},Object.create(null));createdDate=\"\".concat(parts.day,\"/\").concat(parts.month,\"/\").concat(parts.year,\" \").concat(parts.hour,\":\").concat(parts.minute);lastMessage={name:\"manager\",message:info.name+\" created this group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null};messages.push(lastMessage);data=new FormData();data.append('file',ConversationImage);data.append(\"upload_preset\",\"whatsApp_clone\");data.append(\"cloud_name\",\"dsrgpqnyv\");_context9.prev=24;_context9.next=27;return axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data);case 27:response=_context9.sent;ConversationImage=response.data.url;_context9.next=34;break;case 31:_context9.prev=31;_context9.t0=_context9[\"catch\"](24);console.log(_context9.t0);case 34:newConversation={Name:name,creatorId:sessionStorage[\"id\"],Participants:participants,Messages:messages,LastMessage:lastMessage,ConversationImage:ConversationImage,isGroup:isGroup,createdDate:createdDate,description:\"Add Description\"};//updateDB\n_context9.prev=35;_context9.next=38;return axios.post(\"https://messagesapp1.herokuapp.com/api/conversations\",newConversation,config);case 38:Response=_context9.sent;if(Response.data.status===\"created\"){setSelectedConversation(Response.data.conversation);//show conversation only if messages sent or if its A group\nif(Response.data.conversation.Messages.length>0||Response.data.conversation.isGroup===true){setConversations(function(prevConversations){return[].concat(_toConsumableArray(prevConversations),[Response.data.conversation]);});socket.current.emit('conversation-changed',Response.data.conversation);}}_context9.next=45;break;case 42:_context9.prev=42;_context9.t1=_context9[\"catch\"](35);console.log(_context9.t1);case 45:case\"end\":return _context9.stop();}}},_callee9,null,[[24,31],[35,42]]);}));return _createConversation.apply(this,arguments);}function UpdateConversation(_x6){return _UpdateConversation.apply(this,arguments);}function _UpdateConversation(){_UpdateConversation=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(updatedConversation){var updateDBConv,addCurrentParticipant,participants,response,UpdatedConversations;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:updateDBConv=_objectSpread({},updatedConversation);//if user left the group, dont add him to DB\nif(!updatedConversation.LastMessage.message.includes('left')){addCurrentParticipant={id:info.id,phone:info.phone,name:info.name,imageName:info.imageName,Status:info.Status,color:info.color};participants=[].concat(_toConsumableArray(updatedConversation.Participants),[addCurrentParticipant]);updateDBConv=_objectSpread(_objectSpread({},updateDBConv),{},{Participants:participants});}delete updateDBConv._id;_context10.prev=3;_context10.next=6;return axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+selectedConversation._id,updateDBConv,config);case 6:response=_context10.sent;if(response.data.status==='Updated'){UpdatedConversations=[];if(!updatedConversation.LastMessage.message.includes('left')){setSelectedConversation(updatedConversation);conversations.forEach(function(conversation){if(conversation._id===updatedConversation._id)UpdatedConversations.push(updatedConversation);else UpdatedConversations.push(conversation);});}else{UpdatedConversations=conversations.filter(function(conversation){return conversation._id!==selectedConversation._id;});setSelectedConversation();}//if user where removed by admin, send to user deleted case, so server let him know he was deleted\nif(updatedConversation.LastMessage.message.includes('removed'))socket.current.emit('user-deleted',selectedConversation);else socket.current.emit('conversation-changed',selectedConversation);setConversations(UpdatedConversations);}_context10.next=13;break;case 10:_context10.prev=10;_context10.t0=_context10[\"catch\"](3);console.log(_context10.t0);case 13:case\"end\":return _context10.stop();}}},_callee10,null,[[3,10]]);}));return _UpdateConversation.apply(this,arguments);}function updateConversationParticipant(userUpdatedInfo,infoFlag,information){var updateConv=[];conversations.map(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(conversation){var updateCon,newParticipants,tempCon;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:updateCon='';if(conversation.Name===userUpdatedInfo.info&&conversation.isGroup==false){if(infoFlag==='name'){updateCon=_objectSpread(_objectSpread({},conversation),{},{Name:information});}else if(infoFlag=='image')updateCon=_objectSpread(_objectSpread({},conversation),{},{ConversationImage:information});}else updateCon=_objectSpread({},conversation);updateConv.push(updateCon);newParticipants=[].concat(_toConsumableArray(conversation.Participants),[userUpdatedInfo]);tempCon=_objectSpread(_objectSpread({},updateCon),{},{Participants:newParticipants});delete tempCon._id;_context5.prev=6;_context5.next=9;return axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+conversation._id,tempCon,config);case 9:_context5.next=14;break;case 11:_context5.prev=11;_context5.t0=_context5[\"catch\"](6);console.log(_context5.t0);case 14:socket.current.emit('conversation-changed',updateCon);setConversations(updateConv);case 16:case\"end\":return _context5.stop();}}},_callee5,null,[[6,11]]);}));return function(_x7){return _ref4.apply(this,arguments);};}());}//add message got from other user to conversation\nvar addMessageToConversation=useCallback(/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref5){var UpdatedConv,ConversationExists,newListOfConversations,newConversation;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:UpdatedConv=_ref5.UpdatedConv;//voice alert\naudio.play();ConversationExists=false;//use refConversations to void infinite loop\nnewListOfConversations=RefConversations.current.map(function(conversation){if(conversation._id===UpdatedConv._id){ConversationExists=true;var newConv=_objectSpread(_objectSpread({},conversation),{},{Messages:UpdatedConv.Messages,LastMessage:UpdatedConv.LastMessage});if(currentConversationRef.current){if(currentConversationRef.current._id===UpdatedConv._id)setSelectedConversation(newConv);}return newConv;}else return conversation;});// if this is a new conversation first message, update user conversations\nif(!ConversationExists){if(!UpdatedConv.isGroup){newConversation=_objectSpread(_objectSpread({},UpdatedConv),{},{Name:UpdatedConv.Participants[0].name,ConversationImage:UpdatedConv.Participants[0].imageName});setConversations(function(prevConversations){return[].concat(_toConsumableArray(prevConversations),[newConversation]);});}else setConversations(function(prevConversations){return[].concat(_toConsumableArray(prevConversations),[UpdatedConv]);});}else setConversations(newListOfConversations);case 5:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x8){return _ref6.apply(this,arguments);};}(),[setConversations]);//handle messages socket\nuseEffect(function(){if(socket.current==null)return;RefConversations.current=conversations;currentConversationRef.current=selectedConversation;socket.current.on(\"receive-message\",addMessageToConversation);return function(){return socket.current.off(\"receive-message\",addMessageToConversation);};},[conversations,selectedConversation]);//update the message sender conversations\nvar updateSenderConversation=function updateSenderConversation(AddMessage){var ConversationExists=false;setSelectedConversation(AddMessage);var newListOfConcversations=conversations.map(function(conversation){if(conversation._id===AddMessage._id){ConversationExists=true;return AddMessage;}else return conversation;});if(ConversationExists){setConversations(newListOfConcversations);}else setConversations(function(prevConversations){return[].concat(_toConsumableArray(prevConversations),[AddMessage]);});};//send new message to chat users\nfunction sendMessage(text,imageFlag,imageURL,recordURL){var parts=new Intl.DateTimeFormat('en',{hc:'h12',year:'numeric',month:'2-digit',day:'2-digit',hour:'numeric',minute:'numeric',timeZone:'Asia/Jerusalem'}).formatToParts(new Date()).reduce(function(acc,part){acc[part.type]=part.value;return acc;},Object.create(null));var time=\"\".concat(parts.day,\"/\").concat(parts.month,\"/\").concat(parts.year,\"  \").concat(parts.hour,\":\").concat(parts.minute);var recordFlag=false;if(recordURL!=null)recordFlag=true;var CurrentMessage={id:info.id,name:info.name,color:info.color,message:text,timeSent:time,containsImage:imageFlag,containsRecord:recordFlag,recordURL:recordURL};if(imageFlag===true)CurrentMessage=_objectSpread(_objectSpread({},CurrentMessage),{},{imageURL:imageURL});var sender={id:info.id,phone:info.phone,name:info.name,imageName:info.imageName};var AddMessage=_objectSpread(_objectSpread({},selectedConversation),{},{Messages:[].concat(_toConsumableArray(selectedConversation.Messages),[CurrentMessage]),LastMessage:CurrentMessage});socket.current.emit(\"send-message\",{sender:sender,UpdatedConversation:AddMessage,conversationId:selectedConversation._id});updateSenderConversation(AddMessage);}return/*#__PURE__*/_jsx(ConversationsContext.Provider,{value:{sendMessage:sendMessage,conversations:conversations,createConversation:createConversation,setConversations:setConversations,setSelectedConversation:setSelectedConversation,selectedConversation:selectedConversation,currentConversationIsConnected:currentConversationIsConnected,typingFlag:typingFlag,setTypingFlag:setTypingFlag,getSearchConverastions:getSearchConverastions,showDetails:showDetails,setShowDetails:setShowDetails,UpdateConversation:UpdateConversation,removedFromGroupFlag:removedFromGroupFlag,setRemovedFromGroupFlag:setRemovedFromGroupFlag,updateConversationParticipant:updateConversationParticipant},children:children});}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useRef","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","RefConversations","currentConversationRef","socket","ConnectedUsers","typingFlag","setTypingFlag","currentConversationIsConnected","setCurrentConversationIsConnected","config","headers","sessionStorage","showDetails","setShowDetails","removedFromGroupFlag","setRemovedFromGroupFlag","audio","Audio","renderFlag","setRenderFlag","updateFunction","fetchData","current","on","getConversations","then","res","checkIfDeleted","filter","conversation","_id","length","off","isGroup","some","user","userId","Participants","id","get","response","data","LastSeen","conversationId","name","ConversationsList","map","UpdatedConversation","Name","ConversationImage","imageName","console","log","getSearchConverastions","str","SearchResult","includes","createConversation","ids","image","groupFlag","messages","lastMessage","status","message","ConversationExists","find","participants","addContactToConversation","contact","push","phone","createdDate","parts","Intl","DateTimeFormat","hc","year","month","day","hour","minute","timeZone","formatToParts","Date","reduce","acc","part","type","value","Object","create","timeSent","containsImage","containsRecord","recordURL","FormData","append","post","url","newConversation","creatorId","Messages","LastMessage","description","Response","prevConversations","emit","UpdateConversation","updatedConversation","updateDBConv","addCurrentParticipant","Status","color","put","UpdatedConversations","forEach","updateConversationParticipant","userUpdatedInfo","infoFlag","information","updateConv","updateCon","newParticipants","tempCon","addMessageToConversation","UpdatedConv","play","newListOfConversations","newConv","updateSenderConversation","AddMessage","newListOfConcversations","sendMessage","text","imageFlag","imageURL","time","recordFlag","CurrentMessage","sender"],"mappings":"u0BAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,WAA5B,CAAyCC,MAAzC,KAAuD,OAAvD,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,OAAT,KAAwB,gBAAxB,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,C,2CAIA,GAAMC,CAAAA,oBAAoB,cAAGT,KAAK,CAACU,aAAN,EAA7B,CAEA,MAAO,SAASC,CAAAA,gBAAT,EACP,CACE,MAAOV,CAAAA,UAAU,CAACQ,oBAAD,CAAjB,CACD,CAED,MAAO,SAASG,CAAAA,qBAAT,MACP,IADuCC,CAAAA,QACvC,MADuCA,QACvC,CAEE,aAAyBP,OAAO,EAAhC,CAAOQ,QAAP,UAAOA,QAAP,CAAiBC,IAAjB,UAAiBA,IAAjB,CACA,cAA0CX,QAAQ,CAAC,EAAD,CAAlD,wCAAOY,aAAP,eAAsBC,gBAAtB,eACA,eAAwDb,QAAQ,EAAhE,yCAAOc,oBAAP,eAA6BC,uBAA7B,eACA,GAAMC,CAAAA,gBAAgB,CAAGjB,MAAM,CAACa,aAAD,CAA/B,CACA,GAAMK,CAAAA,sBAAsB,CAAGlB,MAAM,CAACe,oBAAD,CAArC,CACA,eAAiCX,SAAS,EAA1C,CAAOe,MAAP,YAAOA,MAAP,CAAeC,cAAf,YAAeA,cAAf,CACA,eAAkCnB,QAAQ,CAAC,EAAD,CAA1C,yCAAOoB,UAAP,eAAkBC,aAAlB,eACA,eAA2ErB,QAAQ,CAAC,EAAD,CAAnF,yCAAOsB,8BAAP,eAAsCC,iCAAtC,eACA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,OAAO,CAAE,CAAE,iBAAkBC,cAAc,CAAC,QAAD,CAAlC,CAAX,CAAf,CACA,eAAoC1B,QAAQ,CAAC,KAAD,CAA5C,0CAAO2B,WAAP,gBAAmBC,cAAnB,gBACA,gBAAuD5B,QAAQ,CAAC,KAAD,CAA/D,2CAAO6B,oBAAP,gBAA4BC,uBAA5B,gBACA,GAAMC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,KAAJ,CAAU,qFAAV,CAAd,CACA,gBAAiChC,QAAQ,CAAC,IAAD,CAAzC,2CAAOiC,UAAP,gBAAkBC,aAAlB,gBAGA,GAAMC,CAAAA,cAAc,CAAC,QAAfA,CAAAA,cAAe,EACrB,CACED,aAAa,CAAC,IAAD,CAAb,CACD,CAHD,CAKAjC,SAAS,CAAC,UACV,SACiBmC,CAAAA,SADjB,qIACE,6IAGKlB,MAAM,CAACmB,OAAP,EAAiB,IAHtB,oEAIE;AACAnB,MAAM,CAACmB,OAAP,CAAeC,EAAf,CAAkB,qBAAlB,CAAwCH,cAAxC,EAIF;AACAjB,MAAM,CAACmB,OAAP,CAAeC,EAAf,CAAkB,cAAlB,sEAAiC,mIAE/BC,gBAAgB,GAAGC,IAAnB,CAAwB,SAAAC,GAAG,CAC3B,CACE5B,gBAAgB,CAAC4B,GAAD,CAAhB,CACA,GAAG3B,oBAAH,CACA,CACE;AACV,uFACU,GAAI4B,CAAAA,cAAc,CAACD,GAAG,CAACE,MAAJ,CAAW,SAAAC,YAAY,QAAGA,CAAAA,YAAY,CAACC,GAAb,GAAqB/B,oBAAoB,CAAC+B,GAA7C,EAAvB,CAAnB,CACA,GAAGH,cAAc,CAACI,MAAf,GAA0B,CAA7B,CACEhB,uBAAuB,CAAC,IAAD,CAAvB,CAEH,CAEF,CAbD,EAF+B,sDAAjC,IAVA,iCA6BO,UAAK,CACZZ,MAAM,CAACmB,OAAP,CAAeU,GAAf,CAAmB,qBAAnB,CAAyCZ,cAAzC,EACAjB,MAAM,CAACmB,OAAP,CAAeU,GAAf,CAAmB,qBAAnB,EAA0C,CA/B1C,0DADF,4CAoCAX,SAAS,GAER,CAvCQ,CAuCP,EAvCO,CAAT,CAyCF;AACA,6DACEnC,SAAS,CAAE,UACX,SACiBmC,CAAAA,SADjB,wIACE,yJAGKtB,oBAHL,8BAKQA,oBAAoB,CAACkC,OAL7B,+BAOQ7B,cAAc,CAAC8B,IAAf,CAAoB,SAAAC,IAAI,QAAGA,CAAAA,IAAI,CAACC,MAAL,GAAerC,oBAAoB,CAACsC,YAArB,CAAkC,CAAlC,EAAqCC,EAAvD,EAAxB,CAPR,0BASM9B,iCAAiC,CAAC,EAAD,CAAjC,CATN,sDAa2BnB,CAAAA,KAAK,CAACkD,GAAN,CAAU,gDAAiDxC,oBAAoB,CAACsC,YAArB,CAAkC,CAAlC,EAAqCC,EAAhG,CAAmG7B,MAAnG,CAb3B,QAaU+B,QAbV,gBAcMhC,iCAAiC,CAACgC,QAAQ,CAACC,IAAT,CAAcC,QAAf,CAAjC,CAdN,yDADF,6CAqBArB,SAAS,GAER,CAxBQ,CAwBP,CAACjB,cAAD,CAAgBL,oBAAhB,CAxBO,CAAT,CA2BA;AACAb,SAAS,CAAC,UACV,SAEiBmC,CAAAA,SAFjB,wIAEE,wIAEEG,gBAAgB,GAAGC,IAAnB,CAAwB,SAAAC,GAAG,QAAG5B,CAAAA,gBAAgB,CAAC4B,GAAD,CAAnB,EAA3B,EAFF,wDAFF,6CAOE,GAAGR,UAAH,CACA,CAEEG,SAAS,GACTF,aAAa,CAAC,KAAD,CAAb,CACD,CAEF,CAfQ,CAeN,CAACD,UAAD,CAfM,CAAT,CAiBA;AACAhC,SAAS,CAAC,UACV,CAEE,GAAGiB,MAAM,CAACmB,OAAP,EAAiB,IAApB,CAA2B,OAC3BnB,MAAM,CAACmB,OAAP,CAAeC,EAAf,CAAkB,aAAlB,CAAgC,eAChC,IADkCY,CAAAA,IAClC,OADkCA,IAClC,CADuCQ,cACvC,OADuCA,cACvC,CACE,GAAG5C,oBAAH,CACA,CACE,GAAGA,oBAAoB,CAAC+B,GAArB,GAA6Ba,cAAhC,CACA,CACGrC,aAAa,CAAC6B,IAAI,CAACS,IAAN,CAAb,CACF,CACF,CACF,CATD,EAWD,CAfQ,CAeP,CAAC7C,oBAAD,CAfO,CAAT,CAmBA;AAlIF,QAmIiByB,CAAAA,gBAnIjB,mDAoKE;AApKF,uGAmIE,+MAKyBnC,CAAAA,KAAK,CAACkD,GAAN,CAAU,0EAA2E5B,cAAc,CAAC,IAAD,CAAnG,CAA0GF,MAA1G,CALzB,QAKQ+B,QALR,gBAMQK,iBANR,CAM4BL,QAAQ,CAACC,IAAT,CAAcK,GAAd,CAAkB,SAACjB,YAAD,CAC1C,CACE,GAAIkB,CAAAA,mBAAmB,CAAElB,YAAzB,CAEA;AACR,gEACQ,GAAI,CAACA,YAAY,CAACI,OAAd,EAAyBJ,YAAY,CAACmB,IAAb,GAAuBrC,cAAc,CAAC,MAAD,CAAlE,CACEoC,mBAAmB,gCAAQA,mBAAR,MAA4BC,IAAI,CAAEnB,YAAY,CAACQ,YAAb,CAA0B,CAA1B,EAA6BO,IAA/D,CAAoEK,iBAAiB,CAACpB,YAAY,CAACQ,YAAb,CAA0B,CAA1B,EAA6Ba,SAAnH,EAAnB,CAGF;AACA,GAAGnD,oBAAH,CACA,CACE,GAAGA,oBAAoB,CAAC+B,GAArB,GAA6BiB,mBAAmB,CAACjB,GAApD,CACE9B,uBAAuB,CAAC+C,mBAAD,CAAvB,CACH,CAEA,MAAOA,CAAAA,mBAAP,CAEF,CAnBuB,CAN5B,kCA2BWF,iBA3BX,6DA6BiBM,OAAO,CAACC,GAAR,eA7BjB,sEAnIF,2DAqKiBC,CAAAA,sBArKjB,2DAiLE;AAjLF,mHAqKE,kBAAsCC,GAAtC,sHAEE9B,gBAAgB,GAAGC,IAAnB,CAAwB,SAAAC,GAAG,CAC3B,CACE,GAAI6B,CAAAA,YAAY,CAAG7B,GAAG,CAACE,MAAJ,CAAW,SAAAC,YAAY,QAC1CA,CAAAA,YAAY,CAACmB,IAAb,CAAkBQ,QAAlB,CAA2BF,GAA3B,IAAmC,IADO,EAAvB,CAAnB,CAEAxD,gBAAgB,CAACyD,YAAD,CAAhB,CACD,CALD,EAFF,wDArKF,iEAkLiBE,CAAAA,kBAlLjB,oEAgTE;AAhTF,2GAkLE,kBAAkCC,GAAlC,CAAuCd,IAAvC,CAA6Ce,KAA7C,CAAmDC,SAAnD,kQAGMX,iBAHN,CAG0BU,KAH1B,CAIM1B,OAJN,CAIgB2B,SAJhB,CAKMC,QALN,CAKiB,EALjB,CAMMC,WANN,CAMkB,EANlB,CASE;AATF,KAUMJ,GAAG,CAAC3B,MAAJ,GAAe,CAVrB,4DAWW,CAACgC,MAAM,CAAC,OAAR,CAAgBC,OAAO,CAAC,yBAAxB,CAXX,SAcE;AACIC,kBAfN,CAe2B,IAf3B,CAgBE,GAAIP,GAAG,CAAC3B,MAAJ,GAAe,CAAf,EAAoB,CAACE,OAAzB,CAAkC,CAChCgC,kBAAkB,CAAGpE,aAAa,CAACqE,IAAd,CACnB,SAACrC,YAAD,QAAkBA,CAAAA,YAAY,CAACmB,IAAb,GAAsBJ,IAAxC,EADmB,CAArB,CAGD,CAGD;AAvBF,IAwBMqB,kBAxBN,2BAwB0BjE,uBAAuB,CAACiE,kBAAD,CAAvB,CAExB;AA1BF,gCA6BI;AACME,YA9BV,CA8ByBT,GAAG,CAACZ,GAAJ,CAAQ,SAACR,EAAD,CAC7B,CACE,GAAI8B,CAAAA,wBAAwB,CAAGzE,QAAQ,CAACiC,MAAT,CAC7B,SAACyC,OAAD,QAAa/B,CAAAA,EAAE,GAAK+B,OAAO,CAAC/B,EAA5B,EAD6B,CAA/B,CAGA,MAAO8B,CAAAA,wBAAwB,CAAC,CAAD,CAA/B,CACD,CANoB,CA9BzB,CAwCI;AACAD,YAAY,CAACG,IAAb,CAAkB,CAChBhC,EAAE,CAAE1C,IAAI,CAAC0C,EADO,CAEhBM,IAAI,CAAEhD,IAAI,CAACgD,IAFK,CAGhB2B,KAAK,CAAE3E,IAAI,CAAC2E,KAHI,CAIhBrB,SAAS,CAAEtD,IAAI,CAACsD,SAJA,CAKhBR,QAAQ,CAAE9C,IAAI,CAAC8C,QALC,CAAlB,EAQI8B,WAjDR,CAiDoB,EAjDpB,CAmDI;AAnDJ,IAoDQvC,OApDR,2BAsDUwC,KAtDV,CAsDkB,GAAIC,CAAAA,IAAI,CAACC,cAAT,CAAwB,IAAxB,CAA8B,CACxCC,EAAE,CAAE,KADoC,CAExCC,IAAI,CAAE,SAFkC,CAGxCC,KAAK,CAAE,SAHiC,CAIxCC,GAAG,CAAE,SAJmC,CAKxCC,IAAI,CAAE,SALkC,CAMxCC,MAAM,CAAE,SANgC,CAOxCC,QAAQ,CAAC,gBAP+B,CAA9B,EAQXC,aARW,CAQG,GAAIC,CAAAA,IAAJ,EARH,EASXC,MATW,CASJ,SAACC,GAAD,CAAMC,IAAN,CAAe,CACrBD,GAAG,CAACC,IAAI,CAACC,IAAN,CAAH,CAAiBD,IAAI,CAACE,KAAtB,CACA,MAAOH,CAAAA,GAAP,CACD,CAZW,CAYTI,MAAM,CAACC,MAAP,CAAc,IAAd,CAZS,CAtDlB,CAoEMnB,WAAW,WAAKC,KAAK,CAACM,GAAX,aAAkBN,KAAK,CAACK,KAAxB,aAAiCL,KAAK,CAACI,IAAvC,aAA+CJ,KAAK,CAACO,IAArD,aAA6DP,KAAK,CAACQ,MAAnE,CAAX,CAEAnB,WAAW,CAAC,CAAClB,IAAI,CAAC,SAAN,CAAgBoB,OAAO,CAAEpE,IAAI,CAACgD,IAAL,CAAW,qBAApC,CAA0DgD,QAAQ,CAAC,EAAnE,CAAsEC,aAAa,CAAC,KAApF,CAA0FC,cAAc,CAAC,KAAzG,CAA+GC,SAAS,CAAC,IAAzH,CAAZ,CACAlC,QAAQ,CAACS,IAAT,CAAcR,WAAd,EAEMrB,IAzEZ,CAyEmB,GAAIuD,CAAAA,QAAJ,EAzEnB,CA0EMvD,IAAI,CAACwD,MAAL,CAAY,MAAZ,CAAmBhD,iBAAnB,EACAR,IAAI,CAACwD,MAAL,CAAY,eAAZ,CAA4B,gBAA5B,EACAxD,IAAI,CAACwD,MAAL,CAAY,YAAZ,CAAyB,WAAzB,EA5EN,0CA+E6B5G,CAAAA,KAAK,CAAC6G,IAAN,CAAW,wDAAX,CAAoEzD,IAApE,CA/E7B,SA+EYD,QA/EZ,gBAgFQS,iBAAiB,CAAGT,QAAQ,CAACC,IAAT,CAAc0D,GAAlC,CAhFR,sFAkFkBhD,OAAO,CAACC,GAAR,eAlFlB,QAsFQgD,eAtFR,CAuFI,CACEpD,IAAI,CAAEJ,IADR,CAEEyD,SAAS,CAAE1F,cAAc,CAAC,IAAD,CAF3B,CAGE0B,YAAY,CAAE8B,YAHhB,CAIEmC,QAAQ,CAAEzC,QAJZ,CAKE0C,WAAW,CAACzC,WALd,CAMEb,iBAAiB,CAAEA,iBANrB,CAOEhB,OAAO,CAACA,OAPV,CAQEuC,WAAW,CAACA,WARd,CASEgC,WAAW,CAAE,iBATf,CAvFJ,CAmGI;AAnGJ,0CAsG2BnH,CAAAA,KAAK,CAAC6G,IAAN,CACnB,sDADmB,CAEnBE,eAFmB,CAGnB3F,MAHmB,CAtG3B,SAsGUgG,QAtGV,gBA4GM,GAAIA,QAAQ,CAAChE,IAAT,CAAcsB,MAAd,GAAyB,SAA7B,CACA,CACE/D,uBAAuB,CAACyG,QAAQ,CAAChE,IAAT,CAAcZ,YAAf,CAAvB,CAEA;AACA,GAAI4E,QAAQ,CAAChE,IAAT,CAAcZ,YAAd,CAA2ByE,QAA3B,CAAoCvE,MAApC,CAA6C,CAA7C,EAAmD0E,QAAQ,CAAChE,IAAT,CAAcZ,YAAd,CAA2BI,OAA3B,GAAuC,IAA9F,CACA,CACEnC,gBAAgB,CAAC,SAAC4G,iBAAD,CAAuB,CACtC,mCAAWA,iBAAX,GAA8BD,QAAQ,CAAChE,IAAT,CAAcZ,YAA5C,GACD,CAFe,CAAhB,CAGA1B,MAAM,CAACmB,OAAP,CAAeqF,IAAf,CAAoB,sBAApB,CAA2CF,QAAQ,CAAChE,IAAT,CAAcZ,YAAzD,EACD,CACF,CAxHP,sFAyHkBsB,OAAO,CAACC,GAAR,eAzHlB,gFAlLF,6DAiTiBwD,CAAAA,kBAjTjB,mKAiTE,mBAAkCC,mBAAlC,4MAGMC,YAHN,kBAGuBD,mBAHvB,EAKE;AACA,GAAG,CAAEA,mBAAmB,CAACN,WAApB,CAAgCvC,OAAhC,CAAwCR,QAAxC,CAAiD,MAAjD,CAAL,CACA,CACMuD,qBADN,CAC6B,CAACzE,EAAE,CAAE1C,IAAI,CAAC0C,EAAV,CAAaiC,KAAK,CAAE3E,IAAI,CAAC2E,KAAzB,CAA+B3B,IAAI,CAAEhD,IAAI,CAACgD,IAA1C,CAA+CM,SAAS,CAAEtD,IAAI,CAACsD,SAA/D,CAAyE8D,MAAM,CAACpH,IAAI,CAACoH,MAArF,CAA4FC,KAAK,CAACrH,IAAI,CAACqH,KAAvG,CAD7B,CAEM9C,YAFN,8BAEuB0C,mBAAmB,CAACxE,YAF3C,GAEwD0E,qBAFxD,GAGED,YAAY,gCAAKA,YAAL,MAAkBzE,YAAY,CAAC8B,YAA/B,EAAZ,CACD,CAED,MAAO2C,CAAAA,YAAY,CAAChF,GAApB,CAbF,0CAiBuBzC,CAAAA,KAAK,CAAC6H,GAAN,CAAU,wDAAyDnH,oBAAoB,CAAC+B,GAAxF,CAA4FgF,YAA5F,CAAyGrG,MAAzG,CAjBvB,QAiBQ+B,QAjBR,iBAkBI,GAAGA,QAAQ,CAACC,IAAT,CAAcsB,MAAd,GAAuB,SAA1B,CACA,CACMoD,oBADN,CAC2B,EAD3B,CAEE,GAAG,CAAEN,mBAAmB,CAACN,WAApB,CAAgCvC,OAAhC,CAAwCR,QAAxC,CAAiD,MAAjD,CAAL,CACA,CACExD,uBAAuB,CAAC6G,mBAAD,CAAvB,CACAhH,aAAa,CAACuH,OAAd,CAAsB,SAAAvF,YAAY,CAClC,CACE,GAAGA,YAAY,CAACC,GAAb,GAAmB+E,mBAAmB,CAAC/E,GAA1C,CACEqF,oBAAoB,CAAC7C,IAArB,CAA0BuC,mBAA1B,EADF,IAEKM,CAAAA,oBAAoB,CAAC7C,IAArB,CAA0BzC,YAA1B,EAEN,CAND,EAOD,CAVD,IAYA,CACEsF,oBAAoB,CAACtH,aAAa,CAAC+B,MAAd,CAAqB,SAAAC,YAAY,QAAGA,CAAAA,YAAY,CAACC,GAAb,GAAqB/B,oBAAoB,CAAC+B,GAA7C,EAAjC,CAArB,CACA9B,uBAAuB,GACxB,CAGD;AACA,GAAG6G,mBAAmB,CAACN,WAApB,CAAgCvC,OAAhC,CAAwCR,QAAxC,CAAiD,SAAjD,CAAH,CACErD,MAAM,CAACmB,OAAP,CAAeqF,IAAf,CAAoB,cAApB,CAAmC5G,oBAAnC,EADF,IAGEI,CAAAA,MAAM,CAACmB,OAAP,CAAeqF,IAAf,CAAoB,sBAApB,CAA2C5G,oBAA3C,EAEFD,gBAAgB,CAACqH,oBAAD,CAAhB,CAED,CA/CL,yFAgDchE,OAAO,CAACC,GAAR,gBAhDd,yEAjTF,qDAoWE,QAASiE,CAAAA,6BAAT,CAAuCC,eAAvC,CAAuDC,QAAvD,CAAgEC,WAAhE,CACA,CAEE,GAAIC,CAAAA,UAAU,CAAC,EAAf,CACA5H,aAAa,CAACiD,GAAd,2FAAkB,kBAAOjB,YAAP,4JAEZ6F,SAFY,CAEA,EAFA,CAIhB,GAAG7F,YAAY,CAACmB,IAAb,GAAsBsE,eAAe,CAAC1H,IAAtC,EAA8CiC,YAAY,CAACI,OAAb,EAAsB,KAAvE,CACA,CACE,GAAGsF,QAAQ,GAAK,MAAhB,CACA,CACEG,SAAS,gCAAO7F,YAAP,MAAoBmB,IAAI,CAACwE,WAAzB,EAAT,CACD,CAHD,IAKK,IAAGD,QAAQ,EAAE,OAAb,CACDG,SAAS,gCAAO7F,YAAP,MAAoBoB,iBAAiB,CAACuE,WAAtC,EAAT,CAGP,CAXC,IAaKE,CAAAA,SAAS,kBAAO7F,YAAP,CAAT,CAEL4F,UAAU,CAACnD,IAAX,CAAgBoD,SAAhB,EAGIC,eAtBY,8BAsBQ9F,YAAY,CAACQ,YAtBrB,GAsBkCiF,eAtBlC,GAuBZM,OAvBY,gCAuBAF,SAvBA,MAuBUrF,YAAY,CAACsF,eAvBvB,GAwBhB,MAAOC,CAAAA,OAAO,CAAC9F,GAAf,CAxBgB,wCA4BRzC,CAAAA,KAAK,CAAC6H,GAAN,CAAU,wDAAyDrF,YAAY,CAACC,GAAhF,CAAoF8F,OAApF,CAA4FnH,MAA5F,CA5BQ,6FA8BJ0C,OAAO,CAACC,GAAR,eA9BI,QAiChBjD,MAAM,CAACmB,OAAP,CAAeqF,IAAf,CAAoB,sBAApB,CAA2Ce,SAA3C,EACA5H,gBAAgB,CAAC2H,UAAD,CAAhB,CAlCgB,uEAAlB,kEAsCD,CAGD;AACA,GAAMI,CAAAA,wBAAwB,CAAG9I,WAAW,2FAAC,uNAAS+I,WAAT,OAASA,WAAT,CAG3C;AACA9G,KAAK,CAAC+G,IAAN,GAEI9D,kBANuC,CAMlB,KANkB,CAQ3C;AACI+D,sBATuC,CASd/H,gBAAgB,CAACqB,OAAjB,CAAyBwB,GAAzB,CAA6B,SAACjB,YAAD,CAC1D,CACE,GAAIA,YAAY,CAACC,GAAb,GAAqBgG,WAAW,CAAChG,GAArC,CACA,CACEmC,kBAAkB,CAAG,IAArB,CACA,GAAIgE,CAAAA,OAAO,gCACNpG,YADM,MAETyE,QAAQ,CAAEwB,WAAW,CAACxB,QAFb,CAGTC,WAAW,CAAEuB,WAAW,CAACvB,WAHhB,EAAX,CAIE,GAAIrG,sBAAsB,CAACoB,OAA3B,CACA,CACC,GAAIpB,sBAAsB,CAACoB,OAAvB,CAA+BQ,GAA/B,GAAuCgG,WAAW,CAAChG,GAAvD,CACE9B,uBAAuB,CAACiI,OAAD,CAAvB,CACF,CAEH,MAAOA,CAAAA,OAAP,CAED,CAfD,IAgBK,OAAOpG,CAAAA,YAAP,CACN,CAnB4B,CATc,CA8B5C;AACC,GAAI,CAACoC,kBAAL,CACA,CACE,GAAI,CAAC6D,WAAW,CAAC7F,OAAjB,CACA,CACMmE,eADN,gCAEO0B,WAFP,MAGE9E,IAAI,CAAE8E,WAAW,CAACzF,YAAZ,CAAyB,CAAzB,EAA4BO,IAHpC,CAIEK,iBAAiB,CAAE6E,WAAW,CAACzF,YAAZ,CAAyB,CAAzB,EAA4Ba,SAJjD,GAOEpD,gBAAgB,CAAC,SAAC4G,iBAAD,qCAA2BA,iBAA3B,GAA8CN,eAA9C,IAAD,CAAhB,CACD,CATD,IAWEtG,CAAAA,gBAAgB,CAAC,SAAC4G,iBAAD,qCAA2BA,iBAA3B,GAA6CoB,WAA7C,IAAD,CAAhB,CACH,CAdD,IAeKhI,CAAAA,gBAAgB,CAACkI,sBAAD,CAAhB,CA9CsC,wDAAD,iEA+C1C,CAAClI,gBAAD,CA/C0C,CAA5C,CAkDA;AACAZ,SAAS,CAAC,UACV,CAEE,GAAIiB,MAAM,CAACmB,OAAP,EAAkB,IAAtB,CAA4B,OAE5BrB,gBAAgB,CAACqB,OAAjB,CAA2BzB,aAA3B,CACAK,sBAAsB,CAACoB,OAAvB,CAAiCvB,oBAAjC,CACAI,MAAM,CAACmB,OAAP,CAAeC,EAAf,CAAkB,iBAAlB,CAAqCsG,wBAArC,EAEA,MAAO,kBACL1H,CAAAA,MAAM,CAACmB,OAAP,CAAeU,GAAf,CAAmB,iBAAnB,CAAsC6F,wBAAtC,CADK,EAAP,CAED,CAXQ,CAWP,CAAChI,aAAD,CAAgBE,oBAAhB,CAXO,CAAT,CAeA;AACA,GAAMmI,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,UAAD,CACjC,CAEE,GAAIlE,CAAAA,kBAAkB,CAAG,KAAzB,CACAjE,uBAAuB,CAACmI,UAAD,CAAvB,CAEA,GAAIC,CAAAA,uBAAuB,CAAGvI,aAAa,CAACiD,GAAd,CAAkB,SAACjB,YAAD,CAChD,CACE,GAAIA,YAAY,CAACC,GAAb,GAAqBqG,UAAU,CAACrG,GAApC,CACA,CACEmC,kBAAkB,CAAG,IAArB,CACA,MAAOkE,CAAAA,UAAP,CACD,CAJD,IAKK,OAAOtG,CAAAA,YAAP,CAEN,CAT6B,CAA9B,CAWA,GAAIoC,kBAAJ,CACA,CACEnE,gBAAgB,CAACsI,uBAAD,CAAhB,CACD,CAHD,IAKEtI,CAAAA,gBAAgB,CAAC,SAAC4G,iBAAD,qCAA2BA,iBAA3B,GAA6CyB,UAA7C,IAAD,CAAhB,CACH,CAvBD,CA2BA;AACA,QAASE,CAAAA,WAAT,CAAqBC,IAArB,CAA0BC,SAA1B,CAAoCC,QAApC,CAA6CzC,SAA7C,CAAwD,CAGtD,GAAItB,CAAAA,KAAK,CAAG,GAAIC,CAAAA,IAAI,CAACC,cAAT,CAAwB,IAAxB,CAA8B,CAC1CC,EAAE,CAAE,KADsC,CAE1CC,IAAI,CAAE,SAFoC,CAG1CC,KAAK,CAAE,SAHmC,CAI1CC,GAAG,CAAE,SAJqC,CAK1CC,IAAI,CAAE,SALoC,CAM1CC,MAAM,CAAE,SANkC,CAO1CC,QAAQ,CAAC,gBAPiC,CAA9B,EAQXC,aARW,CAQG,GAAIC,CAAAA,IAAJ,EARH,EASXC,MATW,CASJ,SAACC,GAAD,CAAMC,IAAN,CACR,CACED,GAAG,CAACC,IAAI,CAACC,IAAN,CAAH,CAAiBD,IAAI,CAACE,KAAtB,CACA,MAAOH,CAAAA,GAAP,CACD,CAbW,CAaTI,MAAM,CAACC,MAAP,CAAc,IAAd,CAbS,CAAZ,CAeA,GAAI8C,CAAAA,IAAI,WAAMhE,KAAK,CAACM,GAAZ,aAAmBN,KAAK,CAACK,KAAzB,aAAkCL,KAAK,CAACI,IAAxC,cAAiDJ,KAAK,CAACO,IAAvD,aAA+DP,KAAK,CAACQ,MAArE,CAAR,CAEA,GAAIyD,CAAAA,UAAU,CAAE,KAAhB,CAEA,GAAG3C,SAAS,EAAE,IAAd,CACG2C,UAAU,CAAC,IAAX,CAEH,GAAIC,CAAAA,cAAc,CAAG,CAAErG,EAAE,CAAE1C,IAAI,CAAC0C,EAAX,CAAeM,IAAI,CAAEhD,IAAI,CAACgD,IAA1B,CAA+BqE,KAAK,CAACrH,IAAI,CAACqH,KAA1C,CAAiDjD,OAAO,CAAEsE,IAA1D,CAAiE1C,QAAQ,CAAE6C,IAA3E,CAAiF5C,aAAa,CAAE0C,SAAhG,CAA0GzC,cAAc,CAAC4C,UAAzH,CAAoI3C,SAAS,CAACA,SAA9I,CAArB,CACA,GAAGwC,SAAS,GAAI,IAAhB,CACGI,cAAc,gCAAMA,cAAN,MAAqBH,QAAQ,CAACA,QAA9B,EAAd,CAEH,GAAII,CAAAA,MAAM,CACV,CACEtG,EAAE,CAAE1C,IAAI,CAAC0C,EADX,CAEEiC,KAAK,CAAE3E,IAAI,CAAC2E,KAFd,CAGE3B,IAAI,CAAEhD,IAAI,CAACgD,IAHb,CAIEM,SAAS,CAAEtD,IAAI,CAACsD,SAJlB,CADA,CAQA,GAAIiF,CAAAA,UAAU,gCACVpI,oBADU,MAEZuG,QAAQ,8BAAMvG,oBAAoB,CAACuG,QAA3B,GAAqCqC,cAArC,EAFI,CAGZpC,WAAW,CAAEoC,cAHD,EAAd,CAMAxI,MAAM,CAACmB,OAAP,CAAeqF,IAAf,CAAoB,cAApB,CACA,CACEiC,MAAM,CAAEA,MADV,CAEE7F,mBAAmB,CAAEoF,UAFvB,CAGExF,cAAc,CAAE5C,oBAAoB,CAAC+B,GAHvC,CADA,EAOAoG,wBAAwB,CAACC,UAAD,CAAxB,CACD,CAED,mBACE,KAAC,oBAAD,CAAsB,QAAtB,EACE,KAAK,CAAE,CACLE,WAAW,CAAXA,WADK,CAELxI,aAAa,CAAbA,aAFK,CAGL4D,kBAAkB,CAAlBA,kBAHK,CAIL3D,gBAAgB,CAAhBA,gBAJK,CAKLE,uBAAuB,CAAvBA,uBALK,CAMLD,oBAAoB,CAApBA,oBANK,CAOLQ,8BAA8B,CAA9BA,8BAPK,CAQLF,UAAU,CAAVA,UARK,CASLC,aAAa,CAAbA,aATK,CAUL+C,sBAAsB,CAAtBA,sBAVK,CAWLzC,WAAW,CAAXA,WAXK,CAYLC,cAAc,CAAdA,cAZK,CAaL+F,kBAAkB,CAAlBA,kBAbK,CAcL9F,oBAAoB,CAApBA,oBAdK,CAeLC,uBAAuB,CAAvBA,uBAfK,CAgBLsG,6BAA6B,CAA7BA,6BAhBK,CADT,UAqBG3H,QArBH,EADF,CAyBD","sourcesContent":["import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() \r\n{\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({children }) \r\n{\r\n\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const {socket, ConnectedUsers} = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n  const [showDetails,setShowDetails] =useState(false)\r\n  const [removedFromGroupFlag,setRemovedFromGroupFlag] = useState(false)\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n  const [renderFlag,setRenderFlag]=useState(true)\r\n \r\n\r\n  const updateFunction=()=>\r\n  {\r\n    setRenderFlag(true)\r\n  }\r\n\r\n  useEffect(()=>\r\n  {\r\n    async function fetchData() \r\n    {\r\n\r\n      if(socket.current ==null ) return;\r\n      //when other user updates conversation information, update this user on changes\r\n      socket.current.on('update-conversation',updateFunction)\r\n   \r\n\r\n\r\n    //when user was removed, remove this user from conversation\r\n    socket.current.on('removed-user',async ()=>\r\n    {\r\n      getConversations().then(res=> \r\n      {\r\n        setConversations(res)\r\n        if(selectedConversation)\r\n        {\r\n          /*if this selected conversation dosn't exists in conversations anymore, this is the deleted user, \r\n          let him know he was deleted and remove this chat from selected conversation*/\r\n          let checkIfDeleted=res.filter(conversation=> conversation._id === selectedConversation._id)\r\n          if(checkIfDeleted.length === 0 ) \r\n            setRemovedFromGroupFlag(true)\r\n\r\n        }\r\n\r\n      })\r\n    \r\n    })\r\n    \r\n    return () =>{\r\n    socket.current.off('update-conversation',updateFunction)\r\n    socket.current.off('remove-conversation')}\r\n\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[])\r\n\r\n/*everytime a user is connected/dissconnected/ this user entered new conversation,\r\n check if the current conversation user is connected or not*/\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() \r\n    {\r\n\r\n      if(selectedConversation)\r\n      {\r\n        if(!selectedConversation.isGroup)\r\n        {\r\n         if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n        {\r\n          setCurrentConversationIsConnected('')\r\n        }\r\n        else\r\n        {\r\n          let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n          setCurrentConversationIsConnected(response.data.LastSeen)\r\n        }\r\n     }\r\n    }\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,selectedConversation])\r\n\r\n\r\n  //on first render,and every time conversation updates, get new conversations from DB\r\n  useEffect(() =>\r\n  {\r\n\r\n    async function fetchData() \r\n    {\r\n      getConversations().then(res=> setConversations(res))\r\n    }\r\n\r\n    if(renderFlag)\r\n    {\r\n      \r\n      fetchData();\r\n      setRenderFlag(false)\r\n    }\r\n    \r\n  }, [renderFlag]);\r\n\r\n  //when other user is typing, and this user is on this conversation, let him know other user is typing\r\n  useEffect(() =>\r\n  {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n      if(selectedConversation)\r\n      {\r\n        if(selectedConversation._id === conversationId)\r\n        {\r\n           setTypingFlag(user.name)\r\n        }\r\n      }\r\n    })\r\n\r\n  },[selectedConversation])\r\n\r\n\r\n\r\n  //get updated conversations from DB when needed\r\n  async function getConversations()\r\n  {\r\n\r\n    try\r\n    {\r\n      let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n      let ConversationsList = response.data.map((conversation) =>\r\n      {\r\n        let UpdatedConversation= conversation\r\n\r\n        /*if this is a private conversation, and the name and picture saved as this user name, \r\n        update the conversation to other user name and picture*/\r\n        if (!conversation.isGroup && conversation.Name ===  sessionStorage['name'])\r\n          UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].imageName}\r\n\r\n\r\n        //update the current shown on screen conversation\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === UpdatedConversation._id)\r\n            setSelectedConversation(UpdatedConversation)\r\n        }\r\n\r\n         return UpdatedConversation;\r\n\r\n      })\r\n\r\n      return ConversationsList \r\n\r\n    } catch (err) {console.log(err);}\r\n\r\n  }\r\n\r\n  //on search event, update shown conversations list\r\n  async function getSearchConverastions(str)\r\n  {\r\n    getConversations().then(res=>\r\n    {\r\n      let SearchResult = res.filter(conversation=> \r\n      conversation.Name.includes(str) ===true)\r\n      setConversations(SearchResult)\r\n    })\r\n\r\n  }\r\n        \r\n\r\n  //create new conversation\r\n  async function createConversation(ids, name, image,groupFlag)\r\n  {\r\n\r\n    let ConversationImage = image;\r\n    let isGroup = groupFlag;\r\n    let messages = []\r\n    let lastMessage=''\r\n\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      return {status:'error',message:'no participants choosen'};\r\n    }\r\n\r\n    //check if conversation already exists and it's not a group.\r\n    let ConversationExists = null;\r\n    if (ids.length === 1 && !isGroup) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n\r\n    //if already exists, show the existing one\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => \r\n      {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      let createdDate=''\r\n\r\n      //if group add creation date,add creation message and upload group picture\r\n      if (isGroup) \r\n      {\r\n        let parts = new Intl.DateTimeFormat('en', {\r\n          hc: 'h12',\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          timeZone:'Asia/Jerusalem'})\r\n        .formatToParts(new Date())\r\n        .reduce((acc, part) => {\r\n          acc[part.type] = part.value;\r\n          return acc;\r\n        }, Object.create(null));\r\n\r\n        createdDate= `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}`;\r\n\r\n        lastMessage={name:\"manager\",message: info.name +\" created this group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n        messages.push(lastMessage)\r\n\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n          ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      }\r\n    \r\n      let newConversation = \r\n      {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: messages,\r\n        LastMessage:lastMessage,\r\n        ConversationImage: ConversationImage,\r\n        isGroup:isGroup,\r\n        createdDate:createdDate,\r\n        description: \"Add Description\",\r\n      };\r\n\r\n      //updateDB\r\n      try \r\n      {\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n\r\n        if (Response.data.status === \"created\") \r\n        {\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent or if its A group\r\n          if (Response.data.conversation.Messages.length > 0  || Response.data.conversation.isGroup === true)\r\n          {\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n            socket.current.emit('conversation-changed',Response.data.conversation)\r\n          }\r\n        }\r\n      }catch (err) {console.log(err);}\r\n    }\r\n  }\r\n\r\n\r\n  //update existing conversation details when changed \r\n  async function UpdateConversation(updatedConversation)\r\n  {\r\n\r\n    let updateDBConv={...updatedConversation}\r\n\r\n    //if user left the group, dont add him to DB\r\n    if(!(updatedConversation.LastMessage.message.includes('left')))\r\n    {\r\n      let addCurrentParticipant= {id: info.id,phone: info.phone,name: info.name,imageName: info.imageName,Status:info.Status,color:info.color}\r\n      let participants=[...updatedConversation.Participants,addCurrentParticipant]\r\n      updateDBConv={...updateDBConv,Participants:participants}\r\n    }\r\n\r\n    delete updateDBConv._id\r\n\r\n    try\r\n    {\r\n      let response=await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+ selectedConversation._id,updateDBConv,config)\r\n      if(response.data.status==='Updated')\r\n      {\r\n        let UpdatedConversations=[]\r\n        if(!(updatedConversation.LastMessage.message.includes('left')))\r\n        {\r\n          setSelectedConversation(updatedConversation)\r\n          conversations.forEach(conversation=>\r\n          { \r\n            if(conversation._id===updatedConversation._id)    \r\n              UpdatedConversations.push(updatedConversation)\r\n            else UpdatedConversations.push(conversation)\r\n\r\n          })\r\n        }\r\n        else\r\n        {\r\n          UpdatedConversations=conversations.filter(conversation=> conversation._id !== selectedConversation._id)\r\n          setSelectedConversation()\r\n        }\r\n\r\n\r\n        //if user where removed by admin, send to user deleted case, so server let him know he was deleted\r\n        if(updatedConversation.LastMessage.message.includes('removed'))\r\n          socket.current.emit('user-deleted',selectedConversation)\r\n        else\r\n          socket.current.emit('conversation-changed',selectedConversation)\r\n\r\n        setConversations(UpdatedConversations)\r\n              \r\n      }\r\n    }catch(err){console.log(err)}\r\n  }\r\n\r\n  function updateConversationParticipant(userUpdatedInfo,infoFlag,information)\r\n  {\r\n\r\n    let updateConv=[]\r\n    conversations.map(async (conversation)=>\r\n    {\r\n      let updateCon = ''\r\n\r\n      if(conversation.Name === userUpdatedInfo.info && conversation.isGroup==false)\r\n      {\r\n        if(infoFlag === 'name')\r\n        {\r\n          updateCon = {...conversation,Name:information}\r\n        }\r\n\r\n        else if(infoFlag=='image')\r\n            updateCon = {...conversation,ConversationImage:information}\r\n\r\n\r\n    }\r\n\r\n      else updateCon = {...conversation}\r\n\r\n      updateConv.push(updateCon)\r\n\r\n\r\n      let newParticipants=[...conversation.Participants,userUpdatedInfo]\r\n      let tempCon={...updateCon,Participants:newParticipants}\r\n      delete tempCon._id\r\n\r\n      try\r\n      {\r\n        await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+ conversation._id,tempCon,config)\r\n\r\n      }catch(err){console.log(err)}\r\n\r\n      \r\n      socket.current.emit('conversation-changed',updateCon)\r\n      setConversations(updateConv)\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n  //add message got from other user to conversation\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n  {\r\n\r\n    //voice alert\r\n    audio.play()\r\n\r\n    let ConversationExists = false;\r\n\r\n    //use refConversations to void infinite loop\r\n    let newListOfConversations = RefConversations.current.map((conversation) =>\r\n    {\r\n      if (conversation._id === UpdatedConv._id) \r\n      {\r\n        ConversationExists = true;\r\n        let newConv = \r\n        { ...conversation,\r\n          Messages: UpdatedConv.Messages,\r\n          LastMessage: UpdatedConv.LastMessage,};\r\n          if (currentConversationRef.current) \r\n          {\r\n           if (currentConversationRef.current._id === UpdatedConv._id)\r\n             setSelectedConversation(newConv);\r\n          }\r\n\r\n        return newConv;\r\n\r\n      }\r\n      else return conversation;\r\n    });\r\n\r\n   // if this is a new conversation first message, update user conversations\r\n    if (!ConversationExists) \r\n    {\r\n      if (!UpdatedConv.isGroup)\r\n      {\r\n        let newConversation = \r\n        { ...UpdatedConv,\r\n        Name: UpdatedConv.Participants[0].name,\r\n        ConversationImage: UpdatedConv.Participants[0].imageName,\r\n        };\r\n\r\n        setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n      } \r\n      else\r\n        setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n    } \r\n    else setConversations(newListOfConversations);\r\n  },[setConversations]);\r\n\r\n\r\n  //handle messages socket\r\n  useEffect(() => \r\n  {\r\n\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  },[conversations, selectedConversation]);\r\n\r\n\r\n\r\n  //update the message sender conversations\r\n  const updateSenderConversation = (AddMessage) => \r\n  {\r\n\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => \r\n    {\r\n      if (conversation._id === AddMessage._id) \r\n      {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } \r\n      else return conversation;\r\n\r\n    });\r\n\r\n    if (ConversationExists) \r\n    {\r\n      setConversations(newListOfConcversations);\r\n    } \r\n    else\r\n      setConversations((prevConversations) => [...prevConversations,AddMessage]);\r\n  };\r\n\r\n\r\n\r\n  //send new message to chat users\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n    let parts = new Intl.DateTimeFormat('en', {\r\n    hc: 'h12',\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => \r\n    {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name,color:info.color, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = \r\n    {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      imageName: info.imageName,\r\n    };\r\n\r\n    let AddMessage = \r\n    {...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n\r\n    socket.current.emit(\"send-message\", \r\n    {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n        showDetails,\r\n        setShowDetails,\r\n        UpdateConversation,\r\n        removedFromGroupFlag,\r\n        setRemovedFromGroupFlag,\r\n        updateConversationParticipant\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}