{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { useState } from 'react';\nimport { useContacts } from './contactsprovider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts\n  } = useContacts();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const [selectedConversationDetails, setSelectedConversationDetails] = useState();\n  const [numberOfConversations, setNumberOfConversations] = useState(0);\n\n  function createConversation(ids) {\n    let conversation = ids.map(id => {\n      return contacts.filter(contact => id === contact.id);\n    });\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        id: numberOfConversations,\n        participants: conversation,\n        messages: []\n      }];\n    });\n    setNumberOfConversations(numberOfConversations + 1);\n  }\n\n  function addMessageToConversation({\n    currentConversation,\n    text,\n    sender\n  }) {\n    currentConversation.messages.push(text);\n    setConversations(prevConversations => {\n      let index = prevConversations.findIndex(conversation => conversation.id === currentConversation.id);\n      prevConversations[index] = currentConversation;\n    });\n  }\n\n  function sendMessage(currentConversation, text) {\n    addMessageToConversation({\n      currentConversation,\n      text,\n      sender: id\n    });\n  }\n\n  function setSelectedConversation(index) {\n    setSelectedConversationIndex(index);\n    setSelectedConversationDetails(conversations[index]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversationDetails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"b5dKm6pJhfMI7FedXjJy37j8BlY=\", false, function () {\n  return [useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useState","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","selectedConversationDetails","setSelectedConversationDetails","numberOfConversations","setNumberOfConversations","createConversation","ids","conversation","map","filter","contact","prevConversations","participants","messages","addMessageToConversation","currentConversation","text","sender","push","index","findIndex","sendMessage","setSelectedConversation"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGJ,KAAK,CAACK,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAOL,UAAU,CAACG,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAACC,EAAAA,EAAD;AAAKC,EAAAA;AAAL,CAA/B,EAAgD;AAAA;;AACrD,QAAM;AAACC,IAAAA;AAAD,MAAaP,WAAW,EAA9B;AACA,QAAM,CAACQ,aAAD,EAAeC,gBAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACW,yBAAD,EAA2BC,4BAA3B,IAA2DZ,QAAQ,CAAC,CAAD,CAAzE;AACA,QAAM,CAACa,2BAAD,EAA6BC,8BAA7B,IAA+Dd,QAAQ,EAA7E;AACA,QAAM,CAACe,qBAAD,EAAuBC,wBAAvB,IAAkDhB,QAAQ,CAAC,CAAD,CAAhE;;AAEA,WAASiB,kBAAT,CAA4BC,GAA5B,EACA;AACE,QAAIC,YAAY,GAAED,GAAG,CAACE,GAAJ,CAAQd,EAAE,IAC5B;AACE,aAAOE,QAAQ,CAACa,MAAT,CAAgBC,OAAO,IAAGhB,EAAE,KAAGgB,OAAO,CAAChB,EAAvC,CAAP;AACD,KAHiB,CAAlB;AAKEI,IAAAA,gBAAgB,CAACa,iBAAiB,IAClC;AACE,aAAO,CAAC,GAAGA,iBAAJ,EAAsB;AAACjB,QAAAA,EAAE,EAAES,qBAAL;AAA2BS,QAAAA,YAAY,EAACL,YAAxC;AAAqDM,QAAAA,QAAQ,EAAC;AAA9D,OAAtB,CAAP;AACD,KAHe,CAAhB;AAKAT,IAAAA,wBAAwB,CAACD,qBAAqB,GAAE,CAAxB,CAAxB;AAGH;;AAED,WAASW,wBAAT,CAAkC;AAACC,IAAAA,mBAAD;AAAsBC,IAAAA,IAAtB;AAA4BC,IAAAA;AAA5B,GAAlC,EACA;AACEF,IAAAA,mBAAmB,CAACF,QAApB,CAA6BK,IAA7B,CAAkCF,IAAlC;AACAlB,IAAAA,gBAAgB,CAACa,iBAAiB,IAChC;AACE,UAAIQ,KAAK,GAAGR,iBAAiB,CAACS,SAAlB,CAA4Bb,YAAY,IAAEA,YAAY,CAACb,EAAb,KAAkBqB,mBAAmB,CAACrB,EAAhF,CAAZ;AAEAiB,MAAAA,iBAAiB,CAACQ,KAAD,CAAjB,GAAyBJ,mBAAzB;AACD,KALa,CAAhB;AAQD;;AAED,WAASM,WAAT,CAAqBN,mBAArB,EAAyCC,IAAzC,EAA+C;AAC7CF,IAAAA,wBAAwB,CAAC;AAACC,MAAAA,mBAAD;AAAqBC,MAAAA,IAArB;AAA0BC,MAAAA,MAAM,EAACvB;AAAjC,KAAD,CAAxB;AAED;;AAED,WAAS4B,uBAAT,CAAiCH,KAAjC,EACA;AACKnB,IAAAA,4BAA4B,CAACmB,KAAD,CAA5B;AACAjB,IAAAA,8BAA8B,CAACL,aAAa,CAACsB,KAAD,CAAd,CAA9B;AACJ;;AAID,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAE;AAAEE,MAAAA,WAAF;AAAcxB,MAAAA,aAAd;AAA4BQ,MAAAA,kBAA5B;AAA+CP,MAAAA,gBAA/C;AAAgEwB,MAAAA,uBAAhE;AAAwFrB,MAAAA;AAAxF,KAAtC;AAAA,cACGN;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAvDeF,qB;UACKJ,W;;;KADLI,qB","sourcesContent":["import React, { useContext } from 'react'\r\nimport { useState } from 'react'\r\nimport { useContacts } from './contactsprovider'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts} = useContacts()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversationIndex,setSelectedConversationIndex] = useState(0)\r\n  const [selectedConversationDetails,setSelectedConversationDetails] = useState()\r\n  const [numberOfConversations,setNumberOfConversations] =useState(0)\r\n\r\n  function createConversation(ids) \r\n  {\r\n    let conversation= ids.map(id=>\r\n    {\r\n      return contacts.filter(contact=> id===contact.id)    \r\n    })\r\n\r\n      setConversations(prevConversations =>\r\n      {\r\n        return [...prevConversations,{id: numberOfConversations,participants:conversation,messages:[]}]\r\n      })\r\n\r\n      setNumberOfConversations(numberOfConversations +1)\r\n\r\n\r\n  }\r\n\r\n  function addMessageToConversation({currentConversation, text, sender})\r\n  {\r\n    currentConversation.messages.push(text)\r\n    setConversations(prevConversations=>\r\n      {\r\n        let index = prevConversations.findIndex(conversation=>conversation.id===currentConversation.id)\r\n\r\n        prevConversations[index]=currentConversation \r\n      }\r\n      )\r\n\r\n  }\r\n\r\n  function sendMessage(currentConversation,text) {\r\n    addMessageToConversation({currentConversation,text,sender:id})\r\n\r\n  }\r\n\r\n  function setSelectedConversation(index)\r\n  {\r\n       setSelectedConversationIndex(index)\r\n       setSelectedConversationDetails(conversations[index])\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{ sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversationDetails}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}