{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\userprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { useSocket } from \"./socketprovider\";\nimport Contacts from '../components/contacts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/React.createContext();\nexport function useUser() {\n  _s();\n\n  return useContext(UserContext);\n}\n\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function UserProvider({\n  children\n}) {\n  _s2();\n\n  const [contacts, setContacts] = useState([]);\n  const [info, setInfo] = useState({});\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  const {\n    ConnectedUsers\n  } = useSocket();\n  /* useEffect(async ()=>\r\n   {\r\n       const response = await axios.get(\"http://localhost:5000/api/logIn/\"+sessionStorage['id'],config);\r\n       setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen})\r\n       ContactsList = response.data.contacts.map(contact=> \r\n         {\r\n  \n         })\r\n        \r\n    }, [setInfo]);*/\n\n  useEffect(async () => {\n    const response = await axios.get(\"http://localhost:5000/api/logIn/\" + sessionStorage['id'], config);\n    let userContacts = response.data.contacts;\n    console.log(userContacts);\n    setInfo({\n      id: response.data._id,\n      name: response.data.name,\n      phone: response.data.phone,\n      imageName: response.data.imageName,\n      LastSeen: response.data.LastSeen\n    });\n    let ContactsList = userContacts.contacts.map(async contact => {\n      let userIsConnected = ConnectedUsers.some(user => user.userId == contact.id);\n\n      if (userIsConnected) {\n        contact.connected = true;\n        return contact;\n      } else {\n        const contactResponse = await axios.get(\"http://localhost:5000/api/logIn/\" + contact.id, config);\n        console.log(contactResponse);\n        let updatedContact = contactResponse.data;\n        updatedContact = { ...updatedContact,\n          connected: false\n        };\n        return updatedContact;\n      }\n    });\n    console.log(ContactsList);\n    setContacts(ContactsList);\n  }, [ConnectedUsers]);\n\n  async function createContact(phone) {\n    if (phone == info.phone) {\n      console.log('cant Add yourself');\n      return;\n    }\n\n    let checkIfExists = contacts.filter(contact => contact.phone == phone);\n\n    if (checkIfExists.length != 0) {\n      console.log('already exists');\n      return;\n    }\n\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/logIn/getByPhone/\" + phone, config);\n\n      if (response != 'no such user') {\n        const contact = {\n          id: response.data._id,\n          phone: response.data.phone,\n          name: response.data.name,\n          image: response.data.imageName,\n          LastSeen: response.data.LastSeen\n        };\n        let newContacts = [...contacts, contact];\n        setContacts(prevContacts => {\n          return [...prevContacts, contact];\n        });\n        let UpdatedUser = info;\n        UpdatedUser = { ...info,\n          contacts: newContacts\n        };\n\n        try {\n          await axios.put(\"http://localhost:5000/api/logIn/\" + sessionStorage['id'], UpdatedUser, {\n            'headers': {\n              'x-access-token': sessionStorage['config']\n            }\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      } else console.log('user dosent exist');\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      setContacts,\n      setInfo,\n      info,\n      config,\n      contacts,\n      createContact\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(UserProvider, \"7k5jN4Erq3NPWGPx6rIicXw32ms=\", false, function () {\n  return [useSocket];\n});\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/userprovider.js"],"names":["React","useState","useEffect","useContext","axios","useSocket","Contacts","UserContext","createContext","useUser","UserProvider","children","contacts","setContacts","info","setInfo","config","sessionStorage","ConnectedUsers","response","get","userContacts","data","console","log","id","_id","name","phone","imageName","LastSeen","ContactsList","map","contact","userIsConnected","some","user","userId","connected","contactResponse","updatedContact","createContact","checkIfExists","filter","length","image","newContacts","prevContacts","UpdatedUser","put","err"],"mappings":";;;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AACA,MAAMC,WAAW,gBAAGP,KAAK,CAACQ,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACxB,SAAON,UAAU,CAACI,WAAD,CAAjB;AACD;;GAFeE,O;;AAIhB,OAAQ,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EACR;AAAA;;AACE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,IAAD,EAAMC,OAAN,IAAgBd,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAMe,MAAM,GAAE;AAAC,eAAW;AAAC,wBAAiBC,cAAc,CAAC,QAAD;AAAhC;AAAZ,GAAd;AACA,QAAM;AAACC,IAAAA;AAAD,MAAoBb,SAAS,EAAnC;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEGH,EAAAA,SAAS,CAAC,YACV;AAEC,UAAMiB,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAU,qCAAmCH,cAAc,CAAC,IAAD,CAA3D,EAAkED,MAAlE,CAAvB;AACA,QAAIK,YAAY,GAAGF,QAAQ,CAACG,IAAT,CAAcV,QAAjC;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACAN,IAAAA,OAAO,CAAC;AAACU,MAAAA,EAAE,EAACN,QAAQ,CAACG,IAAT,CAAcI,GAAlB;AAAsBC,MAAAA,IAAI,EAACR,QAAQ,CAACG,IAAT,CAAcK,IAAzC;AAA8CC,MAAAA,KAAK,EAACT,QAAQ,CAACG,IAAT,CAAcM,KAAlE;AAAwEC,MAAAA,SAAS,EAACV,QAAQ,CAACG,IAAT,CAAcO,SAAhG;AAA0GC,MAAAA,QAAQ,EAACX,QAAQ,CAACG,IAAT,CAAcQ;AAAjI,KAAD,CAAP;AACA,QAAIC,YAAY,GAAGV,YAAY,CAACT,QAAb,CAAsBoB,GAAtB,CAA0B,MAAOC,OAAP,IAC3C;AACE,UAAIC,eAAe,GAAGhB,cAAc,CAACiB,IAAf,CAAoBC,IAAI,IAAIA,IAAI,CAACC,MAAL,IAAeJ,OAAO,CAACR,EAAnD,CAAtB;;AACA,UAAGS,eAAH,EACA;AACED,QAAAA,OAAO,CAACK,SAAR,GAAmB,IAAnB;AACA,eAAOL,OAAP;AACD,OAJD,MAOA;AACE,cAAMM,eAAe,GAAG,MAAMnC,KAAK,CAACgB,GAAN,CAAU,qCAAmCa,OAAO,CAACR,EAArD,EAAwDT,MAAxD,CAA9B;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYe,eAAZ;AACE,YAAIC,cAAc,GAAED,eAAe,CAACjB,IAApC;AACAkB,QAAAA,cAAc,GAAE,EAAC,GAAGA,cAAJ;AAAoBF,UAAAA,SAAS,EAAC;AAA9B,SAAhB;AACA,eAAOE,cAAP;AAIH;AAEF,KArBgB,CAAnB;AAuBEjB,IAAAA,OAAO,CAACC,GAAR,CAAYO,YAAZ;AAEFlB,IAAAA,WAAW,CAACkB,YAAD,CAAX;AAEA,GAlCQ,EAkCP,CAACb,cAAD,CAlCO,CAAT;;AAqCD,iBAAeuB,aAAf,CAA6Bb,KAA7B,EACA;AACE,QAAGA,KAAK,IAAEd,IAAI,CAACc,KAAf,EACA;AACEL,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACC;AACF;;AAED,QAAIkB,aAAa,GAAG9B,QAAQ,CAAC+B,MAAT,CAAgBV,OAAO,IAAGA,OAAO,CAACL,KAAR,IAAeA,KAAzC,CAApB;;AAEA,QAAGc,aAAa,CAACE,MAAd,IAAwB,CAA3B,EACA;AACErB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACD;;AAED,QAAG;AAED,YAAML,QAAQ,GAAE,MAAMf,KAAK,CAACgB,GAAN,CAAU,gDAAgDQ,KAA1D,EAAgEZ,MAAhE,CAAtB;;AAEA,UAAGG,QAAQ,IAAI,cAAf,EACA;AACA,cAAMc,OAAO,GAAG;AAACR,UAAAA,EAAE,EAACN,QAAQ,CAACG,IAAT,CAAcI,GAAlB;AAAsBE,UAAAA,KAAK,EAACT,QAAQ,CAACG,IAAT,CAAcM,KAA1C;AAAgDD,UAAAA,IAAI,EAACR,QAAQ,CAACG,IAAT,CAAcK,IAAnE;AAAwEkB,UAAAA,KAAK,EAAC1B,QAAQ,CAACG,IAAT,CAAcO,SAA5F;AAAsGC,UAAAA,QAAQ,EAACX,QAAQ,CAACG,IAAT,CAAcQ;AAA7H,SAAhB;AACA,YAAIgB,WAAW,GAAG,CAAC,GAAGlC,QAAJ,EAAaqB,OAAb,CAAlB;AACApB,QAAAA,WAAW,CAACkC,YAAY,IAAG;AAAC,iBAAO,CAAC,GAAGA,YAAJ,EAAiBd,OAAjB,CAAP;AAAiC,SAAlD,CAAX;AACA,YAAIe,WAAW,GAAGlC,IAAlB;AACAkC,QAAAA,WAAW,GAAC,EAAC,GAAGlC,IAAJ;AAASF,UAAAA,QAAQ,EAACkC;AAAlB,SAAZ;;AACC,YAAG;AACF,gBAAM1C,KAAK,CAAC6C,GAAN,CAAU,qCAAqChC,cAAc,CAAC,IAAD,CAA7D,EAAoE+B,WAApE,EAAgF;AAAC,uBAAW;AAAC,gCAAiB/B,cAAc,CAAC,QAAD;AAAhC;AAAZ,WAAhF,CAAN;AACA,SAFD,CAEE,OAAMiC,GAAN,EAAU;AAAC3B,UAAAA,OAAO,CAACC,GAAR,CAAY0B,GAAZ;AAAiB;AAC9B,OAVD,MAWK3B,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAEN,KAjBD,CAiBE,OAAM0B,GAAN,EAAU;AAAC3B,MAAAA,OAAO,CAACC,GAAR,CAAY0B,GAAZ;AAAiB;AAC/B;;AAED,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACrC,MAAAA,WAAD;AAAaE,MAAAA,OAAb;AAAqBD,MAAAA,IAArB;AAA0BE,MAAAA,MAA1B;AAAiCJ,MAAAA,QAAjC;AAA0C6B,MAAAA;AAA1C,KAA7B;AAAA,cACG9B;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAjGgBD,Y;UAKWL,S;;;KALXK,Y","sourcesContent":["\r\nimport React, { useState ,useEffect, useContext } from 'react'\r\nimport axios from 'axios'\r\nimport { useSocket } from \"./socketprovider\";\r\nimport Contacts from '../components/contacts';\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n  const {ConnectedUsers } = useSocket();\r\n  \r\n\r\n /* useEffect(async ()=>\r\n  {\r\n      const response = await axios.get(\"http://localhost:5000/api/logIn/\"+sessionStorage['id'],config);\r\n      setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen})\r\n      ContactsList = response.data.contacts.map(contact=> \r\n        {\r\n\r\n        })\r\n       \r\n   }, [setInfo]);*/\r\n\r\n   useEffect(async () =>\r\n   {\r\n\r\n    const response = await axios.get(\"http://localhost:5000/api/logIn/\"+sessionStorage['id'],config);\r\n    let userContacts = response.data.contacts\r\n    console.log(userContacts)\r\n    setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen})\r\n    let ContactsList = userContacts.contacts.map(async (contact)=> \r\n      {\r\n        let userIsConnected = ConnectedUsers.some(user => user.userId == contact.id)\r\n        if(userIsConnected)\r\n        {\r\n          contact.connected= true  \r\n          return contact;\r\n        }\r\n\r\n        else\r\n        {\r\n          const contactResponse = await axios.get(\"http://localhost:5000/api/logIn/\"+contact.id,config)\r\n          console.log(contactResponse)\r\n            let updatedContact= contactResponse.data\r\n            updatedContact= {...updatedContact, connected:false}\r\n            return updatedContact;\r\n        \r\n         \r\n        \r\n        }     \r\n\r\n      })\r\n\r\n      console.log(ContactsList)\r\n\r\n    setContacts(ContactsList)\r\n\r\n   },[ConnectedUsers])\r\n\r\n\r\n  async function createContact(phone)\r\n  {\r\n    if(phone==info.phone)\r\n    {\r\n      console.log('cant Add yourself')\r\n       return;\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.phone==phone)\r\n\r\n    if(checkIfExists.length != 0)\r\n    {\r\n      console.log('already exists')\r\n      return;\r\n    }\r\n\r\n    try{ \r\n\r\n      const response= await axios.get(\"http://localhost:5000/api/logIn/getByPhone/\" + phone,config)\r\n\r\n      if(response != 'no such user')\r\n      {\r\n      const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,image:response.data.imageName,LastSeen:response.data.LastSeen}\r\n      let newContacts = [...contacts,contact]\r\n      setContacts(prevContacts=> {return [...prevContacts,contact]})\r\n      let UpdatedUser = info\r\n      UpdatedUser={...info,contacts:newContacts}\r\n       try{\r\n        await axios.put(\"http://localhost:5000/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n       } catch(err){console.log(err)}\r\n      }\r\n      else console.log('user dosent exist')\r\n     \r\n    } catch(err){console.log(err)}\r\n  }\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}