{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chat.js\",\n    _s = $RefreshSig$();\n\nimport '../css/chat.css';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { Avatar, IconButton, makeStyles } from '@material-ui/core';\nimport ChatBody from './chatbody';\nimport SendImageBody from './sendimagebody';\nimport CloseIcon from '@material-ui/icons/Close';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CheckIcon from '@material-ui/icons/Check';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport Picker from 'emoji-picker-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\"\n    }\n  }\n});\nexport default function Chat() {\n  _s();\n\n  const {\n    selectedConversation,\n    currentConversationIsConnected,\n    typingFlag,\n    setTypingFlag,\n    showDetails,\n    setShowDetails,\n    UpdateConversation\n  } = useConversations();\n  const [imageFlag, setImageFlag] = useState(false);\n  const [imageURL, setImageURL] = useState(false);\n  const [EditGroupNameGlag, setEditGroupNameGlag] = useState(false);\n  const [emojiFlag, setEmojiFlag] = useState(false);\n  const [Text, setText] = useState('');\n  const classes = useStyles();\n  useEffect(() => {\n    setEditGroupNameGlag(false);\n    setEmojiFlag(false);\n  }, [selectedConversation]);\n\n  const onEmojiClick = (event, emojiObject) => {\n    setText(Text + emojiObject.emoji);\n  };\n\n  const groupheader = () => {\n    let returnValue = '';\n\n    if (typingFlag !== '') {\n      returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lastSeen\",\n        children: [\" \", typingFlag, \" is typing...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 23\n      }, this);\n      setTimeout(() => setTypingFlag(''), 1000);\n    } else {\n      let UsersInGroup = '';\n      selectedConversation.Participants.forEach((participant, index) => {\n        if (index === selectedConversation.Participants.length - 1) UsersInGroup = UsersInGroup + participant.name;else UsersInGroup = UsersInGroup + participant.name + ', ';\n      });\n      returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lastSeen\",\n        children: [UsersInGroup, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 23\n      }, this);\n    }\n\n    return returnValue;\n  };\n\n  function chatBodyCallback(image) {\n    setImageURL(image);\n    setImageFlag(true);\n  }\n\n  function backToChatCallback() {\n    setImageURL(null);\n    setImageFlag(false);\n  }\n\n  const privateConversationHeader = () => {\n    let returnValue = '';\n\n    if (currentConversationIsConnected === '') {\n      if (typingFlag !== '') {\n        returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lastSeen\",\n          children: \" typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 27\n        }, this);\n        setTimeout(() => setTypingFlag(''), 1000);\n      } else returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 55\n        }, this), \" online \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 28\n      }, this);\n    } else returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lastSeen\",\n      children: currentConversationIsConnected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 27\n    }, this);\n\n    return returnValue;\n  };\n\n  function changeGroupName() {\n    console.log(selectedConversation);\n    let conversationId = selectedConversation._id;\n    let conversationToUpdate = selectedConversation;\n    delete conversationToUpdate._id;\n    conversationToUpdate = { ...conversationToUpdate,\n      Name: Text\n    };\n    UpdateConversation(conversationId, conversationToUpdate);\n    setEditGroupNameGlag(false);\n  }\n\n  const chatSide = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_header\",\n      onClick: () => setShowDetails(true),\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: selectedConversation.ConversationImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_header_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", selectedConversation.Name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), selectedConversation.isGroup ? groupheader() : privateConversationHeader()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 8\n    }, this), imageFlag ? /*#__PURE__*/_jsxDEV(SendImageBody, {\n      imageURL: imageURL,\n      backToChat: backToChatCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(ChatBody, {\n      imageCallback: chatBodyCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 91\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n\n  return showDetails ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat_with_details\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat narrow_chat\",\n      children: chatSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_details\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_details_top\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setShowDetails(false),\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            paddingLeft: '10px'\n          },\n          children: selectedConversation.isGroup ? 'Group Details:' : 'Contact Details:'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chat_details_body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user_info\",\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            src: selectedConversation.ConversationImage,\n            style: {\n              margin: '20px',\n              height: '140px',\n              width: '140px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"name_and_lastSeen\",\n            children: [selectedConversation.isGroup && EditGroupNameGlag ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"edit_group_name\",\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                className: classes.root,\n                style: {\n                  padding: '3px'\n                },\n                onClick: () => changeGroupName(),\n                children: /*#__PURE__*/_jsxDEV(CheckIcon, {\n                  fontSize: \"large\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 115\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 22\n              }, this), emojiFlag ? /*#__PURE__*/_jsxDEV(Picker, {\n                onEmojiClick: (e, emojiObject) => onEmojiClick(e, emojiObject),\n                pickerStyle: {\n                  width: '100%'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 35\n              }, this) : '', /*#__PURE__*/_jsxDEV(IconButton, {\n                className: classes.root,\n                style: {\n                  padding: '3px'\n                },\n                onClick: () => setEmojiFlag(!emojiFlag),\n                children: /*#__PURE__*/_jsxDEV(InsertEmoticonIcon, {\n                  fontSize: \"large\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 122\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 22\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                defaultValue: selectedConversation.Name,\n                onChange: e => setText(e.target.value),\n                style: {\n                  border: 'none',\n                  outline: 'none',\n                  width: '100%',\n                  backgroundColor: 'transparent',\n                  padding: '5px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 22\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 22\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"group_title\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: selectedConversation.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 20\n              }, this), !selectedConversation.isGroup ? '' : /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => setEditGroupNameGlag(true),\n                children: /*#__PURE__*/_jsxDEV(EditIcon, {\n                  style: {\n                    fontSize: 'large',\n                    marginLeft: '10px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 108\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 55\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"lastSeen\",\n              style: {\n                padding: '10px',\n                paddingLeft: '0px'\n              },\n              children: [\" \", !selectedConversation.isGroup ? privateConversationHeader() : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\" created at:  \", selectedConversation.createdDate, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 150\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 18\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 24\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: chatSide\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Chat, \"bVm8IoO115d71QgCKAUMD9p4oAE=\", false, function () {\n  return [useConversations, useStyles];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chat.js"],"names":["React","useState","useEffect","useConversations","Avatar","IconButton","makeStyles","ChatBody","SendImageBody","CloseIcon","EditIcon","CheckIcon","InsertEmoticonIcon","Picker","useStyles","root","backgroundColor","Chat","selectedConversation","currentConversationIsConnected","typingFlag","setTypingFlag","showDetails","setShowDetails","UpdateConversation","imageFlag","setImageFlag","imageURL","setImageURL","EditGroupNameGlag","setEditGroupNameGlag","emojiFlag","setEmojiFlag","Text","setText","classes","onEmojiClick","event","emojiObject","emoji","groupheader","returnValue","setTimeout","UsersInGroup","Participants","forEach","participant","index","length","name","chatBodyCallback","image","backToChatCallback","privateConversationHeader","changeGroupName","console","log","conversationId","_id","conversationToUpdate","Name","chatSide","ConversationImage","isGroup","paddingLeft","margin","height","width","padding","e","target","value","border","outline","fontSize","marginLeft","createdDate"],"mappings":"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","sourcesContent":["import '../css/chat.css'\r\nimport React from 'react'\r\nimport { useState,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { Avatar ,IconButton,makeStyles} from '@material-ui/core'\r\nimport ChatBody from './chatbody';\r\nimport SendImageBody from './sendimagebody';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport Picker from 'emoji-picker-react';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\"\r\n    }\r\n  }\r\n});\r\n\r\n\r\nexport default function Chat() {\r\n\r\n    const {selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag,showDetails,setShowDetails,UpdateConversation} = useConversations()\r\n    const [imageFlag,setImageFlag] =useState(false)\r\n    const [imageURL,setImageURL] =useState(false)\r\n    const [EditGroupNameGlag,setEditGroupNameGlag]=useState(false)\r\n    const [emojiFlag,setEmojiFlag]=useState(false)\r\n    const [Text,setText] = useState('')\r\n    const classes = useStyles();\r\n\r\n\r\n    useEffect(()=>{\r\n      setEditGroupNameGlag(false)\r\n      setEmojiFlag(false)\r\n\r\n    },[selectedConversation])\r\n    const onEmojiClick = (event, emojiObject) => {\r\n      setText(Text + emojiObject.emoji)\r\n    };\r\n\r\n    const groupheader = () =>\r\n    {\r\n      let returnValue = ''\r\n      if(typingFlag !== '')\r\n      {\r\n        returnValue = <div className='lastSeen'> {typingFlag} is typing...</div>\r\n        setTimeout(()=> setTypingFlag(''),1000)\r\n      }\r\n\r\n      else\r\n      {\r\n        let UsersInGroup = ''\r\n        selectedConversation.Participants.forEach((participant,index)=> \r\n        {\r\n            if(index ===  selectedConversation.Participants.length-1 )\r\n                UsersInGroup = UsersInGroup + participant.name\r\n            else\r\n                UsersInGroup= UsersInGroup + participant.name + ', '\r\n        })\r\n            \r\n        returnValue=  <div className='lastSeen'>{UsersInGroup} </div>\r\n\r\n      }\r\n\r\n      return returnValue\r\n    }\r\n\r\n    function chatBodyCallback(image)\r\n    {\r\n      setImageURL(image)\r\n      setImageFlag(true)\r\n    }\r\n\r\n    function backToChatCallback()\r\n    {\r\n      setImageURL(null)\r\n      setImageFlag(false)\r\n    }\r\n\r\n    const privateConversationHeader = () =>\r\n    {\r\n       let returnValue = ''\r\n       if(currentConversationIsConnected === '')\r\n       {\r\n        if(typingFlag !== '')\r\n        {\r\n            returnValue = <div className='lastSeen'> typing...</div>\r\n            setTimeout(()=> setTypingFlag(''),1000)\r\n\r\n        }\r\n\r\n        else returnValue = <div className='connected'><div className='circle'></div> online </div>\r\n            \r\n       }\r\n       else returnValue = <div className='lastSeen'>{currentConversationIsConnected}</div>\r\n\r\n\r\n      return returnValue\r\n\r\n    }\r\n\r\n    function changeGroupName()\r\n    {\r\n      console.log(selectedConversation)\r\n      let conversationId=selectedConversation._id\r\n      let conversationToUpdate=selectedConversation\r\n      delete conversationToUpdate._id\r\n      conversationToUpdate={...conversationToUpdate,Name:Text}\r\n      UpdateConversation(conversationId,conversationToUpdate)\r\n      setEditGroupNameGlag(false)\r\n\r\n    }\r\n\r\n    const chatSide=\r\n    <div>\r\n       <div className='chat_header' onClick={()=>setShowDetails(true)}>\r\n         <Avatar src={selectedConversation.ConversationImage}/>\r\n         <div className='chat_header_info'>\r\n            <h2> {selectedConversation.Name} </h2> \r\n            {selectedConversation.isGroup?  groupheader() : privateConversationHeader()}\r\n\r\n         </div>\r\n       </div>\r\n\r\n       {imageFlag?   <SendImageBody imageURL={imageURL} backToChat={backToChatCallback}/>:<ChatBody imageCallback={chatBodyCallback}/>} \r\n   </div>\r\n\r\n    return (\r\n       \r\n          showDetails? <div className='chat_with_details'>\r\n            <div className='chat narrow_chat'>\r\n            {chatSide}\r\n            </div>\r\n\r\n            <div className='chat_details'>\r\n            <div className='chat_details_top'>\r\n              <IconButton onClick={()=>setShowDetails(false)}>\r\n                 <CloseIcon fontSize='large'  />\r\n              </IconButton>\r\n              <h2 style={{paddingLeft:'10px'}}>{selectedConversation.isGroup? 'Group Details:' : 'Contact Details:' }</h2>\r\n            </div>\r\n\r\n\r\n            <span className='chat_details_body'>\r\n\r\n            <div className='user_info'>\r\n              <Avatar src={selectedConversation.ConversationImage} style={{margin:'20px',height:'140px',width:'140px'}}/>\r\n           \r\n              <span className='name_and_lastSeen'>\r\n                {selectedConversation.isGroup && EditGroupNameGlag?\r\n                     <div className='edit_group_name'>\r\n                     <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeGroupName()}><CheckIcon fontSize='large'/></IconButton>\r\n                     {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n                     <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setEmojiFlag(!emojiFlag)}><InsertEmoticonIcon fontSize='large'/></IconButton>\r\n                     <input defaultValue={selectedConversation.Name} onChange={(e)=>setText(e.target.value)} style={{border:'none',outline:'none',width:'100%',backgroundColor:'transparent',padding:'5px'}}></input>\r\n                  </div>:\r\n                <span className='group_title'>\r\n                   <h2>{selectedConversation.Name}</h2>\r\n                   {!selectedConversation.isGroup? '':<IconButton onClick={()=>setEditGroupNameGlag(true)}><EditIcon style={{fontSize:'large',marginLeft:'10px'}}/></IconButton>}\r\n                </span>\r\n           }\r\n                \r\n                 <span className='lastSeen' style={{padding:'10px',paddingLeft:'0px'}}> {!selectedConversation.isGroup? privateConversationHeader() :<span> created at:  {selectedConversation.createdDate} </span>}</span>\r\n              </span>\r\n             \r\n            </div>\r\n\r\n            </span>\r\n\r\n            </div>\r\n             \r\n          </div>:\r\n          <div className='chat'>\r\n              {chatSide}\r\n          </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}