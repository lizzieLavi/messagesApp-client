{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chat.js\",\n    _s = $RefreshSig$();\n\nimport '../css/chat.css';\nimport React from 'react';\nimport { useState } from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { Avatar, IconButton } from '@material-ui/core';\nimport ChatBody from './chatbody';\nimport SendImageBody from './sendimagebody';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n\n  const {\n    selectedConversation,\n    currentConversationIsConnected,\n    typingFlag,\n    setTypingFlag\n  } = useConversations();\n  const [imageFlag, setImageFlag] = useState(false);\n  const [imageURL, setImageURL] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n\n  const groupheader = () => {\n    let returnValue = '';\n\n    if (typingFlag !== '') {\n      returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lastSeen\",\n        children: [\" \", typingFlag, \" is typing...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 23\n      }, this);\n      setTimeout(() => setTypingFlag(''), 1000);\n    } else {\n      let UsersInGroup = '';\n      selectedConversation.Participants.forEach((participant, index) => {\n        if (index === selectedConversation.Participants.length - 1) UsersInGroup = UsersInGroup + participant.name;else UsersInGroup = UsersInGroup + participant.name + ', ';\n      });\n      returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lastSeen\",\n        children: [UsersInGroup, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 23\n      }, this);\n    }\n\n    return returnValue;\n  };\n\n  function chatBodyCallback(image) {\n    setImageURL(image);\n    setImageFlag(true);\n  }\n\n  function backToChatCallback() {\n    setImageURL(null);\n    setImageFlag(false);\n  }\n\n  const privateConversationHeader = () => {\n    let returnValue = '';\n\n    if (currentConversationIsConnected === '') {\n      if (typingFlag !== '') {\n        returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lastSeen\",\n          children: \" typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 27\n        }, this);\n        setTimeout(() => setTypingFlag(''), 1000);\n      } else returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 55\n        }, this), \" online \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 28\n      }, this);\n    } else returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lastSeen\",\n      children: currentConversationIsConnected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 27\n    }, this);\n\n    return returnValue;\n  };\n\n  const chatSide = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_header\",\n      onClick: () => setShowDetails(true),\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: selectedConversation.ConversationImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_header_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", selectedConversation.Name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), selectedConversation.isGroup ? groupheader() : privateConversationHeader()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 8\n    }, this), imageFlag ? /*#__PURE__*/_jsxDEV(SendImageBody, {\n      imageURL: imageURL,\n      backToChat: backToChatCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(ChatBody, {\n      imageCallback: chatBodyCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 91\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n\n  return showDetails ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat_with_details\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat narrow_chat\",\n      children: chatSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_details\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_details_top\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setShowDetails(false),\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            paddingLeft: '10px'\n          },\n          children: selectedConversation.isGroup ? 'Group Details:' : 'Contact Details:'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user_info\",\n        children: /*#__PURE__*/_jsxDEV(Avatar, {\n          src: selectedConversation.ConversationImage,\n          style: {\n            height: '100px',\n            width: '100px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 24\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: chatSide\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Chat, \"Fx3IQCymYKbfrwetPJu7tEcgXqg=\", false, function () {\n  return [useConversations];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chat.js"],"names":["React","useState","useConversations","Avatar","IconButton","ChatBody","SendImageBody","CloseIcon","Chat","selectedConversation","currentConversationIsConnected","typingFlag","setTypingFlag","imageFlag","setImageFlag","imageURL","setImageURL","showDetails","setShowDetails","groupheader","returnValue","setTimeout","UsersInGroup","Participants","forEach","participant","index","length","name","chatBodyCallback","image","backToChatCallback","privateConversationHeader","chatSide","ConversationImage","Name","isGroup","paddingLeft","height","width"],"mappings":"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","sourcesContent":["import '../css/chat.css'\r\nimport React from 'react'\r\nimport { useState} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { Avatar ,IconButton} from '@material-ui/core'\r\nimport ChatBody from './chatbody';\r\nimport SendImageBody from './sendimagebody';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nexport default function Chat() {\r\n\r\n    const {selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag} = useConversations()\r\n    const [imageFlag,setImageFlag] =useState(false)\r\n    const [imageURL,setImageURL] =useState(false)\r\n    const [showDetails,setShowDetails] =useState(false)\r\n\r\n    const groupheader = () =>\r\n    {\r\n      let returnValue = ''\r\n      if(typingFlag !== '')\r\n      {\r\n        returnValue = <div className='lastSeen'> {typingFlag} is typing...</div>\r\n        setTimeout(()=> setTypingFlag(''),1000)\r\n      }\r\n\r\n      else\r\n      {\r\n        let UsersInGroup = ''\r\n        selectedConversation.Participants.forEach((participant,index)=> \r\n        {\r\n            if(index ===  selectedConversation.Participants.length-1 )\r\n                UsersInGroup = UsersInGroup + participant.name\r\n            else\r\n                UsersInGroup= UsersInGroup + participant.name + ', '\r\n        })\r\n            \r\n        returnValue=  <div className='lastSeen'>{UsersInGroup} </div>\r\n\r\n      }\r\n\r\n      return returnValue\r\n    }\r\n\r\n    function chatBodyCallback(image)\r\n    {\r\n      setImageURL(image)\r\n      setImageFlag(true)\r\n    }\r\n\r\n    function backToChatCallback()\r\n    {\r\n      setImageURL(null)\r\n      setImageFlag(false)\r\n    }\r\n\r\n    const privateConversationHeader = () =>\r\n    {\r\n       let returnValue = ''\r\n       if(currentConversationIsConnected === '')\r\n       {\r\n        if(typingFlag !== '')\r\n        {\r\n            returnValue = <div className='lastSeen'> typing...</div>\r\n            setTimeout(()=> setTypingFlag(''),1000)\r\n\r\n        }\r\n\r\n        else returnValue = <div className='connected'><div className='circle'></div> online </div>\r\n            \r\n       }\r\n       else returnValue = <div className='lastSeen'>{currentConversationIsConnected}</div>\r\n\r\n\r\n      return returnValue\r\n\r\n    }\r\n\r\n    const chatSide=\r\n    <div>\r\n       <div className='chat_header' onClick={()=>setShowDetails(true)}>\r\n         <Avatar src={selectedConversation.ConversationImage}/>\r\n         <div className='chat_header_info'>\r\n            <h2> {selectedConversation.Name} </h2> \r\n            {selectedConversation.isGroup?  groupheader() : privateConversationHeader()}\r\n         </div>\r\n       </div>\r\n\r\n       {imageFlag?   <SendImageBody imageURL={imageURL} backToChat={backToChatCallback}/>:<ChatBody imageCallback={chatBodyCallback}/>} \r\n   </div>\r\n\r\n    return (\r\n       \r\n          showDetails? <div className='chat_with_details'>\r\n            <div className='chat narrow_chat'>\r\n            {chatSide}\r\n            </div>\r\n\r\n            <div className='chat_details'>\r\n            <div className='chat_details_top'>\r\n              <IconButton onClick={()=>setShowDetails(false)}>\r\n                 <CloseIcon fontSize='large'  />\r\n              </IconButton>\r\n              <h2 style={{paddingLeft:'10px'}}>{selectedConversation.isGroup? 'Group Details:' : 'Contact Details:' }</h2>\r\n            </div>\r\n\r\n            <div className='user_info'>\r\n              <Avatar src={selectedConversation.ConversationImage} style={{height:'100px',width:'100px'}}/>\r\n            </div>\r\n\r\n            </div>\r\n             \r\n          </div>:\r\n          <div className='chat'>\r\n              {chatSide}\r\n          </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}