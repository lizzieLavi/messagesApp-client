{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chat.js\",\n    _s = $RefreshSig$();\n\nimport '../css/chat.css';\nimport React, { useRef } from 'react';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { useSocket } from '../contexts/socketprovider';\nimport { useUser } from '../contexts/userprovider';\nimport { Avatar, IconButton, useForkRef } from '@material-ui/core';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ImageIcon from '@material-ui/icons/Image';\nimport Picker from 'emoji-picker-react';\nimport axios from 'axios';\nimport ChatBody from './chatbody';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n\n  const [Text, setText] = useState('');\n  const {\n    socket\n  } = useSocket();\n  const {\n    info\n  } = useUser();\n  const {\n    sendMessage,\n    selectedConversation,\n    currentConversationIsConnected,\n    typingFlag,\n    setTypingFlag\n  } = useConversations();\n  const inputRef = useRef(null);\n  const [emojiFlag, setEmojiFlag] = useState(false);\n  const [imageFlag, setImageFlag] = useState(false);\n  const [imageURL, setImageURL] = useState(false);\n\n  const groupheader = () => {\n    let returnValue = '';\n    console.log(typingFlag);\n\n    if (typingFlag != '') {\n      returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lastSeen\",\n        children: [\" \", typingFlag, \" is typing...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 23\n      }, this);\n      setTimeout(() => setTypingFlag(''), 1000);\n    } else {\n      let UsersInGroup = '';\n      selectedConversation.Participants.forEach((participant, index) => {\n        if (index === selectedConversation.Participants.length - 1) UsersInGroup = UsersInGroup + participant.name;else UsersInGroup = UsersInGroup + participant.name + ', ';\n      });\n      returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lastSeen\",\n        children: [UsersInGroup, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 23\n      }, this);\n    }\n\n    return returnValue;\n  };\n\n  function chatBodyCallback(image) {\n    setImageURL(image);\n    setImageFlag(true);\n  }\n\n  const privateConversationHeader = () => {\n    let returnValue = '';\n\n    if (currentConversationIsConnected == '') {\n      if (typingFlag != '') {\n        returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lastSeen\",\n          children: \" typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 27\n        }, this);\n        setTimeout(() => setTypingFlag(''), 1000);\n      } else returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 55\n        }, this), \" online \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 28\n      }, this);\n    } else returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lastSeen\",\n      children: currentConversationIsConnected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 27\n    }, this);\n\n    return returnValue;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_header\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: process.env.PUBLIC_URL + selectedConversation.ConversationImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_header_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", selectedConversation.Name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 20\n        }, this), selectedConversation.isGroup ? groupheader() : privateConversationHeader()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatBody, {\n      imageCallback: chatBodyCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"Kd3bhB0JcohjIy/xN1rvbrh/oJQ=\", false, function () {\n  return [useSocket, useUser, useConversations];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chat.js"],"names":["React","useRef","useState","useEffect","useCallback","useConversations","useSocket","useUser","Avatar","IconButton","useForkRef","InsertEmoticonIcon","MicIcon","CloseIcon","ImageIcon","Picker","axios","ChatBody","Chat","Text","setText","socket","info","sendMessage","selectedConversation","currentConversationIsConnected","typingFlag","setTypingFlag","inputRef","emojiFlag","setEmojiFlag","imageFlag","setImageFlag","imageURL","setImageURL","groupheader","returnValue","console","log","setTimeout","UsersInGroup","Participants","forEach","participant","index","length","name","chatBodyCallback","image","privateConversationHeader","process","env","PUBLIC_URL","ConversationImage","Name","isGroup"],"mappings":"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","sourcesContent":["import '../css/chat.css'\r\nimport React, { useRef } from 'react'\r\nimport { useState ,useEffect,useCallback} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\nimport { Avatar, IconButton, useForkRef } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport Picker from 'emoji-picker-react';\r\nimport axios from 'axios'\r\nimport ChatBody from './chatbody';\r\n\r\n\r\n\r\n\r\n\r\nexport default function Chat() {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag} = useConversations()\r\n    const inputRef = useRef(null)\r\n  \r\n    const [emojiFlag,setEmojiFlag] = useState(false)\r\n    const [imageFlag,setImageFlag] =useState(false)\r\n    const [imageURL,setImageURL] =useState(false)\r\n\r\n   \r\n\r\n    \r\n    const groupheader = () =>\r\n    {\r\n      let returnValue = ''\r\n      console.log(typingFlag)\r\n      if(typingFlag != '')\r\n      {\r\n        returnValue = <div className='lastSeen'> {typingFlag} is typing...</div>\r\n        setTimeout(()=> setTypingFlag(''),1000)\r\n      }\r\n\r\n      else\r\n      {\r\n        let UsersInGroup = ''\r\n        selectedConversation.Participants.forEach((participant,index)=> \r\n        {\r\n            if(index ===  selectedConversation.Participants.length-1 )\r\n                UsersInGroup = UsersInGroup + participant.name\r\n            else\r\n                UsersInGroup= UsersInGroup + participant.name + ', '\r\n        })\r\n            \r\n        returnValue=  <div className='lastSeen'>{UsersInGroup} </div>\r\n\r\n      }\r\n\r\n      return returnValue\r\n \r\n }\r\n\r\n function chatBodyCallback(image)\r\n {\r\n   setImageURL(image)\r\n   setImageFlag(true)\r\n }\r\n\r\n    const privateConversationHeader = () =>\r\n    {\r\n        let returnValue = ''\r\n       if(currentConversationIsConnected == '')\r\n       {\r\n        if(typingFlag != '')\r\n        {\r\n            returnValue = <div className='lastSeen'> typing...</div>\r\n            setTimeout(()=> setTypingFlag(''),1000)\r\n\r\n        }\r\n\r\n        else returnValue = <div className='connected'><div className='circle'></div> online </div>\r\n            \r\n       }\r\n       else returnValue = <div className='lastSeen'>{currentConversationIsConnected}</div>\r\n\r\n\r\n       return returnValue\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='chat'>\r\n            <div className='chat_header'>\r\n                \r\n                <Avatar src={process.env.PUBLIC_URL +selectedConversation.ConversationImage}/>\r\n                <div className='chat_header_info'>\r\n                   <h2> {selectedConversation.Name} </h2> \r\n                   {selectedConversation.isGroup?  groupheader() : privateConversationHeader()}\r\n               </div>\r\n           </div>\r\n\r\n    \r\n            <ChatBody imageCallback={chatBodyCallback}/>\r\n          \r\n\r\n        </div>\r\n \r\n\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}