{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chatbody.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { Avatar, IconButton, useForkRef } from '@material-ui/core';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ImageIcon from '@material-ui/icons/Image';\nimport Picker from 'emoji-picker-react';\nimport axios from 'axios';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSocket } from '../contexts/socketprovider';\nimport { useUser } from '../contexts/userprovider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatBody() {\n  _s();\n\n  const [Text, setText] = useState('');\n  const {\n    socket\n  } = useSocket();\n  const {\n    info\n  } = useUser();\n  const {\n    sendMessage,\n    selectedConversation,\n    currentConversationIsConnected,\n    typingFlag,\n    setTypingFlag\n  } = useConversations();\n  const inputRef = useRef(null);\n  const [emojiFlag, setEmojiFlag] = useState(false);\n  const [imageFlag, setImageFlag] = useState(false);\n  const setRef = useCallback(node => {\n    if (node) node.scrollIntoView({\n      smooth: true\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_body\",\n      children: selectedConversation.Messages.map((message, index) => {\n        const lastMessage = selectedConversation.Messages.length - 1 === index;\n        let sender = message.id == sessionStorage['id'] ? 'chat_message' : ' chat_message chat_reciever';\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: sender,\n          ref: lastMessage ? setRef : null,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sender_name\",\n            children: message.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message_time_and_content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message_content\",\n              children: message.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 53\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message_time\",\n              children: message.timeSent.substring(11, 17)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 13\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 14\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_footer_with_stickers\",\n      children: [emojiFlag ? /*#__PURE__*/_jsxDEV(Picker, {\n        onEmojiClick: (e, emojiObject) => onEmojiClick(e, emojiObject),\n        pickerStyle: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_footer\",\n        children: [emojiFlag ? /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setEmojiFlag(false),\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this) : '', /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setEmojiFlag(true),\n          children: /*#__PURE__*/_jsxDEV(InsertEmoticonIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          accept: \"image/*\",\n          className: \"invisibleInput\",\n          id: \"icon-button-file\",\n          type: \"file\",\n          style: {\n            visibility: 'hidden'\n          },\n          onChange: handleImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"icon-button-file\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            component: \"span\",\n            children: /*#__PURE__*/_jsxDEV(ImageIcon, {\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 4\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"message_section\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"message_input\",\n            ref: inputRef,\n            value: Text,\n            onChange: typing,\n            type: \"text\",\n            placeholder: \"type a message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \" send \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          children: /*#__PURE__*/_jsxDEV(MicIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"AZSam89sYIUCs30vLMcKkVZ7PLw=\", false, function () {\n  return [useSocket, useUser, useConversations];\n});\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chatbody.js"],"names":["React","useConversations","Avatar","IconButton","useForkRef","InsertEmoticonIcon","MicIcon","CloseIcon","ImageIcon","Picker","axios","useState","useEffect","useCallback","useSocket","useUser","ChatBody","Text","setText","socket","info","sendMessage","selectedConversation","currentConversationIsConnected","typingFlag","setTypingFlag","inputRef","useRef","emojiFlag","setEmojiFlag","imageFlag","setImageFlag","setRef","node","scrollIntoView","smooth","Messages","map","message","index","lastMessage","length","sender","id","sessionStorage","name","timeSent","substring","e","emojiObject","onEmojiClick","width","visibility","handleImage","handleSubmit","typing"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { Avatar, IconButton, useForkRef } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport Picker from 'emoji-picker-react';\r\nimport axios from 'axios'\r\nimport { useState ,useEffect,useCallback} from 'react'\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\n\r\nfunction ChatBody() {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag} = useConversations()\r\n    const inputRef = useRef(null)\r\n  \r\n    const [emojiFlag,setEmojiFlag] = useState(false)\r\n    const [imageFlag,setImageFlag] =useState(false)\r\n\r\n    const setRef = useCallback((node) => \r\n    {\r\n      if(node)\r\n         node.scrollIntoView({smooth:true})\r\n    },[])\r\n\r\n\r\n    return (\r\n        <div>\r\n        <div className='chat_body'>\r\n        {selectedConversation.Messages.map((message,index)=>\r\n        {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender = message.id==sessionStorage['id']? 'chat_message' : ' chat_message chat_reciever'\r\n\r\n            return (\r\n           \r\n             <p className={sender} ref={lastMessage ? setRef : null}>\r\n\r\n            <span className='sender_name'>{message.name}</span>\r\n            <p className='message_time_and_content'><span className='message_content'>{message.message}</span> \r\n            <span className='message_time'>{(message.timeSent).substring(11,17)}</span> </p>\r\n             </p>\r\n       \r\n            )}\r\n         )}\r\n\r\n    </div>\r\n\r\n<div className='chat_footer_with_stickers'>\r\n{emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n<div className='chat_footer'>\r\n{emojiFlag?   <IconButton  onClick={()=>setEmojiFlag(false)}>\r\n           <CloseIcon fontSize='large'/>\r\n           </IconButton>:''\r\n         }\r\n    <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n      <InsertEmoticonIcon fontSize='large'/>\r\n     </IconButton>\r\n\r\n     <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n     <label htmlFor=\"icon-button-file\">\r\n      <IconButton component=\"span\">\r\n   < ImageIcon  fontSize='large'></ImageIcon>\r\n    </IconButton>\r\n</label> \r\n\r\n      <form onSubmit={handleSubmit} className='message_section'>\r\n         <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n         <button type='submit' > send </button>\r\n      </form>\r\n      <IconButton>\r\n       <MicIcon fontSize='large'/>\r\n    </IconButton>\r\n    </div>\r\n</div>\r\n\r\n</div>\r\n\r\n    \r\n    )\r\n}\r\n\r\nexport default ChatBody\r\n"]},"metadata":{},"sourceType":"module"}