{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\userprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/React.createContext();\nexport function useUser() {\n  _s();\n\n  return useContext(UserContext);\n}\n\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function UserProvider({\n  children\n}) {\n  _s2();\n\n  const [contacts, setContacts] = useState([]);\n  const [info, setInfo] = useState({});\n  const [config, setConfig] = useState();\n\n  async function createContact(phone) {\n    if (phone == info.phone) {\n      console.log('cant Add yourself');\n      return;\n    }\n\n    let checkIfExists = contacts.filter(contact => contact.phone == phone);\n\n    if (checkIfExists.length != 0) {\n      console.log('already exists');\n      return;\n    }\n\n    const response = await axios.get(\"http://localhost:5000/api/logIn/\" + phone, config);\n    const contact = {\n      id: response.data._id,\n      phone: response.data.phone,\n      name: response.data.name,\n      image: response.data.imageName\n    };\n    setContacts(prevContacts => {\n      return [...prevContacts, contact];\n    });\n    UpdateUser = {};\n    const addContact = await axios.put(\"http://localhost:5000/api/logIn/\" + sessionStorage['phone'], contact);\n  }\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      contacts,\n      createContact\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(UserProvider, \"octhflJZhMfVBsRlQbwlECmu3y0=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/userprovider.js"],"names":["React","useContext","useState","axios","UserContext","createContext","useUser","UserProvider","children","contacts","setContacts","info","setInfo","config","setConfig","createContact","phone","console","log","checkIfExists","filter","contact","length","response","get","id","data","_id","name","image","imageName","prevContacts","UpdateUser","addContact","put","sessionStorage"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACxB,SAAOL,UAAU,CAACG,WAAD,CAAjB;AACD;;GAFeE,O;;AAIhB,OAAQ,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AAAA;;AAE1C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,IAAD,EAAMC,OAAN,IAAgBV,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACW,MAAD,EAAQC,SAAR,IAAoBZ,QAAQ,EAAlC;;AAEA,iBAAea,aAAf,CAA6BC,KAA7B,EAAoC;AAElC,QAAGA,KAAK,IAAEL,IAAI,CAACK,KAAf,EACA;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACC;AACF;;AAED,QAAIC,aAAa,GAAGV,QAAQ,CAACW,MAAT,CAAgBC,OAAO,IAAGA,OAAO,CAACL,KAAR,IAAeA,KAAzC,CAApB;;AAEA,QAAGG,aAAa,CAACG,MAAd,IAAwB,CAA3B,EACA;AACEL,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACD;;AAED,UAAMK,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAU,qCAAqCR,KAA/C,EAAqDH,MAArD,CAAvB;AACA,UAAMQ,OAAO,GAAG;AAACI,MAAAA,EAAE,EAACF,QAAQ,CAACG,IAAT,CAAcC,GAAlB;AAAsBX,MAAAA,KAAK,EAACO,QAAQ,CAACG,IAAT,CAAcV,KAA1C;AAAgDY,MAAAA,IAAI,EAACL,QAAQ,CAACG,IAAT,CAAcE,IAAnE;AAAwEC,MAAAA,KAAK,EAACN,QAAQ,CAACG,IAAT,CAAcI;AAA5F,KAAhB;AAGApB,IAAAA,WAAW,CAACqB,YAAY,IAAI;AAAE,aAAO,CAAC,GAAGA,YAAJ,EAAmBV,OAAnB,CAAP;AAAmC,KAAtD,CAAX;AAEAW,IAAAA,UAAU,GAAE,EAAZ;AACA,UAAMC,UAAU,GAAG,MAAM9B,KAAK,CAAC+B,GAAN,CAAU,qCAAoCC,cAAc,CAAC,OAAD,CAA5D,EAAsEd,OAAtE,CAAzB;AAED;;AAED,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEZ,MAAAA,QAAF;AAAYM,MAAAA;AAAZ,KAA7B;AAAA,cACGP;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAtCgBD,Y;;KAAAA,Y","sourcesContent":["import React, { useContext } from 'react'\r\nimport { useState } from 'react'\r\nimport axios from 'axios'\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children }) {\r\n  \r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const [config,setConfig] =useState()\r\n\r\n  async function createContact(phone) {\r\n\r\n    if(phone==info.phone)\r\n    {\r\n      console.log('cant Add yourself')\r\n       return;\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.phone==phone)\r\n\r\n    if(checkIfExists.length != 0)\r\n    {\r\n      console.log('already exists')\r\n      return;\r\n    }\r\n\r\n    const response = await axios.get(\"http://localhost:5000/api/logIn/\" + phone,config)\r\n    const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,image:response.data.imageName}\r\n\r\n\r\n    setContacts(prevContacts => { return [...prevContacts,  contact]})\r\n\r\n    UpdateUser ={}\r\n    const addContact = await axios.put(\"http://localhost:5000/api/logIn/\" +sessionStorage['phone'],contact)\r\n\r\n  }\r\n\r\n  return (\r\n    <UserContext.Provider value={{ contacts, createContact }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}