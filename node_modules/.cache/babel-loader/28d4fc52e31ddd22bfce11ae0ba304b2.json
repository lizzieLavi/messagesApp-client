{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\userprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { useSocket } from \"./socketprovider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/React.createContext();\nexport function useUser() {\n  _s();\n\n  return useContext(UserContext);\n}\n\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function UserProvider({\n  children\n}) {\n  _s2();\n\n  const [contacts, setContacts] = useState([]);\n  const [info, setInfo] = useState({});\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  const {\n    socket\n  } = useSocket();\n  const [updateFlag, setUpdateFlag] = useState(true);\n  useEffect(() => {\n    async function fetchData() {\n      getContacts().then(res => setContacts(res));\n    }\n\n    if (updateFlag) {\n      fetchData();\n      setUpdateFlag(false);\n    }\n  }, [updateFlag]);\n  useEffect(() => {\n    async function fetchData() {\n      if (socket.current == null) return; //when other user updates contact information, update this user on changes\n\n      socket.current.on('update-contact', async () => {\n        setUpdateFlag(true);\n      });\n    }\n\n    fetchData();\n  }, [updateFlag]);\n\n  async function getContacts() {\n    const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'], config);\n    setInfo({\n      id: response.data._id,\n      name: response.data.name,\n      phone: response.data.phone,\n      imageName: response.data.imageName,\n      LastSeen: response.data.LastSeen,\n      Status: response.data.Status\n    });\n    console.log(response.data.contacts);\n    return response.data.contacts;\n  }\n\n  function getSearchContacts(str) {\n    getContacts().then(res => {\n      let SearchResult = res.filter(contact => contact.name.includes(str) === true);\n      setContacts(SearchResult);\n    });\n  }\n\n  const createContact = async name => {\n    if (name === info.name) {\n      return {\n        status: 'error',\n        message: 'cant Add yourself'\n      };\n    }\n\n    let checkIfExists = contacts.filter(contact => contact.name === name);\n\n    if (checkIfExists.length !== 0) {\n      return {\n        status: 'error',\n        message: 'already exists'\n      };\n    }\n\n    try {\n      const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByName/\" + name, config);\n\n      if (response.data !== 'no such user') {\n        const contact = {\n          id: response.data._id,\n          phone: response.data.phone,\n          name: response.data.name,\n          imageName: response.data.imageName,\n          Status: response.data.Status\n        };\n        let newContacts = [...contacts, contact];\n        setContacts(newContacts);\n        let UpdatedUser = { ...info,\n          contacts: newContacts\n        };\n\n        try {\n          await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'], UpdatedUser, {\n            'headers': {\n              'x-access-token': sessionStorage['config']\n            }\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      } else return {\n        status: 'error',\n        message: 'user doesnt exist'\n      };\n    } catch (err) {\n      console.log(err);\n    }\n\n    return {\n      status: 'ok'\n    };\n  };\n\n  const updateInformation = async (user, userToContacts) => {\n    try {\n      let response = await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'], user, config);\n\n      if (response.data.status === 'Updated') {\n        setInfo(user);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    socket.current.emit('contact-changed', userToContacts);\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      setContacts,\n      setInfo,\n      info,\n      config,\n      contacts,\n      createContact,\n      getSearchContacts,\n      updateInformation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(UserProvider, \"KRAlVVrj2U3ZXl5MzANBjEcVl0U=\", false, function () {\n  return [useSocket];\n});\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/userprovider.js"],"names":["React","useState","useEffect","useContext","axios","useSocket","UserContext","createContext","useUser","UserProvider","children","contacts","setContacts","info","setInfo","config","sessionStorage","socket","updateFlag","setUpdateFlag","fetchData","getContacts","then","res","current","on","response","get","id","data","_id","name","phone","imageName","LastSeen","Status","console","log","getSearchContacts","str","SearchResult","filter","contact","includes","createContact","status","message","checkIfExists","length","newContacts","UpdatedUser","put","err","updateInformation","user","userToContacts","emit"],"mappings":"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","sourcesContent":["\r\nimport React, { useState ,useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nimport { useSocket } from \"./socketprovider\";\r\nconst UserContext = React.createContext()\r\n\r\n\r\nexport function useUser() \r\n{\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n  const {socket} = useSocket();\r\n  const [updateFlag,setUpdateFlag]=useState(true)\r\n  \r\n  \r\n\r\n\r\n  \r\n  useEffect( () =>\r\n  {\r\n    async function fetchData() \r\n    {\r\n      getContacts().then(res=> setContacts(res))\r\n    }\r\n\r\n    if(updateFlag)\r\n    {\r\n      fetchData();\r\n      setUpdateFlag(false)\r\n    }\r\n\r\n   },[updateFlag])\r\n\r\n   useEffect(()=>\r\n   {\r\n     async function fetchData() \r\n     {\r\n       if(socket.current ==null ) return;\r\n\r\n \r\n       //when other user updates contact information, update this user on changes\r\n       socket.current.on('update-contact',async ()=>\r\n       {\r\n         setUpdateFlag(true)\r\n       })\r\n \r\n   }\r\n \r\n   fetchData();\r\n \r\n   },[updateFlag])\r\n\r\n   async function getContacts()\r\n   {\r\n      const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+sessionStorage['id'],config);\r\n      setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen,Status:response.data.Status})\r\n      console.log(response.data.contacts)\r\n      return(response.data.contacts)\r\n\r\n   }\r\n   \r\n\r\n  function getSearchContacts(str)\r\n  {\r\n    getContacts().then(res=>\r\n    {\r\n      let SearchResult =res.filter(contact=> contact.name.includes(str) === true)\r\n      setContacts(SearchResult)\r\n    })\r\n\r\n  }\r\n\r\n\r\n  const createContact = async(name) =>\r\n  {\r\n    \r\n    if(name === info.name)\r\n    {\r\n      return {status:'error',message:'cant Add yourself'};\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.name === name)\r\n\r\n    if(checkIfExists.length !== 0)\r\n    {\r\n      return {status:'error',message:'already exists'};\r\n    }\r\n\r\n    try\r\n    { \r\n\r\n      const response= await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByName/\" + name,config)\r\n\r\n      if(response.data !== 'no such user')\r\n      {\r\n        const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName,Status:response.data.Status}\r\n        let newContacts = [...contacts,contact]\r\n        setContacts(newContacts)\r\n        let UpdatedUser={...info,contacts:newContacts}\r\n        try\r\n        {\r\n          await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n        } catch(err){console.log(err)}\r\n      }\r\n      else return {status:'error',message:'user doesnt exist'};\r\n     \r\n    }catch(err){console.log(err)}\r\n\r\n    return {status:'ok'}\r\n\r\n  }\r\n\r\n  const updateInformation = async(user,userToContacts) =>\r\n  {\r\n    try\r\n    {\r\n      let response = await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],user,config)\r\n      if(response.data.status==='Updated')\r\n      {\r\n        setInfo(user)\r\n      }\r\n    }catch(err){console.log(err)}\r\n\r\n     socket.current.emit('contact-changed',userToContacts)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact,getSearchContacts,updateInformation }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}