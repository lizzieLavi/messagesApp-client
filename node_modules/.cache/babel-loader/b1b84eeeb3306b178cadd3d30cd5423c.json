{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { useState } from 'react';\nimport { useContacts } from './contactsprovider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts\n  } = useContacts();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const [selectedConversationDetails, setSelectedConversationDetails] = useState();\n\n  function createConversation(ids) {\n    let conversation = ids.map(id => {\n      return contacts.filter(contact => id === contact.id);\n    });\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        participants: conversation,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToConversation(participants, text, sender) {}\n\n  function sendMessage(participants, text) {\n    addMessageToConversation(participants, text, id);\n  }\n\n  function setSelectedConversation(index) {\n    setSelectedConversationIndex(index);\n    setSelectedConversationDetails(conversations[index]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversationDetails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"zP2JHtbNwYATAi4VJPOnN+ICUwY=\", false, function () {\n  return [useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useState","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","selectedConversationDetails","setSelectedConversationDetails","createConversation","ids","conversation","map","filter","contact","prevConversations","participants","messages","addMessageToConversation","text","sender","sendMessage","setSelectedConversation","index"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGJ,KAAK,CAACK,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAOL,UAAU,CAACG,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAACC,EAAAA,EAAD;AAAKC,EAAAA;AAAL,CAA/B,EAAgD;AAAA;;AACrD,QAAM;AAACC,IAAAA;AAAD,MAAaP,WAAW,EAA9B;AACA,QAAM,CAACQ,aAAD,EAAeC,gBAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACW,yBAAD,EAA2BC,4BAA3B,IAA2DZ,QAAQ,CAAC,CAAD,CAAzE;AACA,QAAM,CAACa,2BAAD,EAA6BC,8BAA7B,IAA+Dd,QAAQ,EAA7E;;AAEA,WAASe,kBAAT,CAA4BC,GAA5B,EACA;AACG,QAAIC,YAAY,GAAED,GAAG,CAACE,GAAJ,CAAQZ,EAAE,IACzB;AACI,aAAOE,QAAQ,CAACW,MAAT,CAAgBC,OAAO,IAAGd,EAAE,KAAGc,OAAO,CAACd,EAAvC,CAAP;AAEH,KAJc,CAAlB;AAKGI,IAAAA,gBAAgB,CAACW,iBAAiB,IAC9B;AACI,aAAO,CAAC,GAAGA,iBAAJ,EAAsB;AAACC,QAAAA,YAAY,EAACL,YAAd;AAA2BM,QAAAA,QAAQ,EAAC;AAApC,OAAtB,CAAP;AACH,KAHW,CAAhB;AAKL;;AAED,WAASC,wBAAT,CAAkCF,YAAlC,EAAgDG,IAAhD,EAAsDC,MAAtD,EACA,CAEC;;AAED,WAASC,WAAT,CAAqBL,YAArB,EAAkCG,IAAlC,EAAwC;AACtCD,IAAAA,wBAAwB,CAACF,YAAD,EAAcG,IAAd,EAAmBnB,EAAnB,CAAxB;AAED;;AAED,WAASsB,uBAAT,CAAiCC,KAAjC,EACA;AACKjB,IAAAA,4BAA4B,CAACiB,KAAD,CAA5B;AACAf,IAAAA,8BAA8B,CAACL,aAAa,CAACoB,KAAD,CAAd,CAA9B;AACJ;;AAID,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAE;AAAEF,MAAAA,WAAF;AAAclB,MAAAA,aAAd;AAA4BM,MAAAA,kBAA5B;AAA+CL,MAAAA,gBAA/C;AAAgEkB,MAAAA,uBAAhE;AAAwFf,MAAAA;AAAxF,KAAtC;AAAA,cACGN;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IA3CeF,qB;UACKJ,W;;;KADLI,qB","sourcesContent":["import React, { useContext } from 'react'\r\nimport { useState } from 'react'\r\nimport { useContacts } from './contactsprovider'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts} = useContacts()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversationIndex,setSelectedConversationIndex] = useState(0)\r\n  const [selectedConversationDetails,setSelectedConversationDetails] = useState()\r\n\r\n  function createConversation(ids) \r\n  {\r\n     let conversation= ids.map(id=>\r\n        {\r\n            return contacts.filter(contact=> id===contact.id)\r\n            \r\n        })\r\n        setConversations(prevConversations =>\r\n            {\r\n                return [...prevConversations,{participants:conversation,messages:[]}]\r\n            })\r\n\r\n  }\r\n\r\n  function addMessageToConversation(participants, text, sender)\r\n  {\r\n\r\n  }\r\n\r\n  function sendMessage(participants,text) {\r\n    addMessageToConversation(participants,text,id)\r\n\r\n  }\r\n\r\n  function setSelectedConversation(index)\r\n  {\r\n       setSelectedConversationIndex(index)\r\n       setSelectedConversationDetails(conversations[index])\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{ sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversationDetails}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}