{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\userprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport axios from 'axios';\nimport { useSocket } from \"./socketprovider\";\nimport Contacts from '../components/contacts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/React.createContext();\nexport function useUser() {\n  _s();\n\n  return useContext(UserContext);\n}\n\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function UserProvider({\n  children\n}) {\n  _s2();\n\n  const [contacts, setContacts] = useState([]);\n  const [info, setInfo] = useState({});\n  const infoRef = useRef(info);\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  const {\n    ConnectedUsers\n  } = useSocket();\n  useEffect(async () => {\n    infoRef.current = info;\n  }, [setInfo]);\n\n  function getUpdatedContacts(contactsList) {\n    return Promise.all(contactsList.map(async contact => {\n      let newContact = null;\n      let userIsConnected = ConnectedUsers.some(user => user.userId == contact.id);\n\n      if (userIsConnected) {\n        contact.connected = true;\n        newContact = contact;\n      } else {\n        const contactResponse = await axios.get(\"http://localhost:5000/api/logIn/\" + contact.id, config);\n        let updatedContact = { ...contact,\n          id: contactResponse.data._id,\n          name: contactResponse.data.name,\n          phone: contactResponse.data.phone,\n          imageName: contactResponse.data.imageName,\n          LastSeen: contactResponse.data.LastSeen,\n          connected: false\n        };\n        newContact = updatedContact;\n      }\n\n      if (newContact) return newContact;\n    }));\n  }\n\n  useEffect(async () => {\n    if (ConnectedUsers.length > 0) {\n      const response = await axios.get(\"http://localhost:5000/api/logIn/\" + sessionStorage['id'], config);\n      setInfo({\n        id: response.data._id,\n        name: response.data.name,\n        phone: response.data.phone,\n        imageName: response.data.imageName,\n        LastSeen: response.data.LastSeen\n      });\n      let userContacts = response.data.contacts;\n      getUpdatedContacts(userContacts).then(res => setContacts(res));\n    }\n  }, [ConnectedUsers]);\n\n  const createContact = async (phone, inListFlag) => {\n    if (inListFlag == false) {\n      const response = await axios.get(\"http://localhost:5000/api/logIn/\" + sessionStorage['id'], config);\n      setInfo({\n        id: response.data._id,\n        name: response.data.name,\n        phone: response.data.phone,\n        imageName: response.data.imageName,\n        LastSeen: response.data.LastSeen\n      });\n    }\n\n    if (phone == info.phone) {\n      console.log('cant Add yourself');\n      return;\n    }\n\n    let checkIfExists = contacts.filter(contact => contact.phone == phone);\n\n    if (checkIfExists.length != 0) {\n      console.log('already exists');\n      return;\n    }\n\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/logIn/getByPhone/\" + phone, config);\n\n      if (response != 'no such user') {\n        const contact = {\n          id: response.data._id,\n          phone: response.data.phone,\n          name: response.data.name,\n          imageName: response.data.imageName,\n          LastSeen: response.data.LastSeen,\n          inContactList: inListFlag\n        };\n        let contactConnected = ConnectedUsers.some(user => user.userId == contact.id);\n\n        if (contactConnected) {\n          contact.connected = true;\n        } else contact.connected = false;\n\n        let newContacts = [...contacts, contact];\n        setContacts(prevContacts => {\n          return [...prevContacts, contact];\n        });\n        let UpdatedUser = {\n          name: info.name,\n          phone: info.phone,\n          imageName: info.imageName,\n          LastSeen: info.LastSeen\n        };\n        UpdatedUser = { ...info,\n          contacts: newContacts\n        };\n        console.log(UpdatedUser);\n\n        try {\n          await axios.put(\"http://localhost:5000/api/logIn/\" + sessionStorage['id'], UpdatedUser, {\n            'headers': {\n              'x-access-token': sessionStorage['config']\n            }\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      } else console.log('user dosent exist');\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      setContacts,\n      setInfo,\n      info,\n      config,\n      contacts,\n      createContact\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(UserProvider, \"zxo2gx9LlaRTrWWvKN79EWLG/qg=\", false, function () {\n  return [useSocket];\n});\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/userprovider.js"],"names":["React","useState","useEffect","useContext","useRef","axios","useSocket","Contacts","UserContext","createContext","useUser","UserProvider","children","contacts","setContacts","info","setInfo","infoRef","config","sessionStorage","ConnectedUsers","current","getUpdatedContacts","contactsList","Promise","all","map","contact","newContact","userIsConnected","some","user","userId","id","connected","contactResponse","get","updatedContact","data","_id","name","phone","imageName","LastSeen","length","response","userContacts","then","res","createContact","inListFlag","console","log","checkIfExists","filter","inContactList","contactConnected","newContacts","prevContacts","UpdatedUser","put","err"],"mappings":"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","sourcesContent":["\r\nimport React, { useState ,useEffect, useContext ,useRef} from 'react'\r\nimport axios from 'axios'\r\nimport { useSocket } from \"./socketprovider\";\r\nimport Contacts from '../components/contacts';\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const infoRef = useRef(info)\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n  const {ConnectedUsers } = useSocket();\r\n  \r\n\r\n  useEffect(async ()=>\r\n  {\r\n  \r\n      infoRef.current= info\r\n       \r\n   }, [setInfo]);\r\n\r\n   function getUpdatedContacts(contactsList)\r\n   {\r\n\r\n    return Promise.all(contactsList.map(async (contact)=> \r\n    {\r\n      let newContact = null\r\n      let userIsConnected = ConnectedUsers.some(user => user.userId == contact.id)\r\n      if(userIsConnected)\r\n      {\r\n        contact.connected= true  \r\n        newContact=contact;\r\n      }\r\n\r\n      else\r\n      {\r\n        const contactResponse = await axios.get(\"http://localhost:5000/api/logIn/\"+contact.id,config)\r\n          let updatedContact= {...contact,id:contactResponse.data._id,name:contactResponse.data.name,phone:contactResponse.data.phone,\r\n            imageName:contactResponse.data.imageName,LastSeen:contactResponse.data.LastSeen,connected:false}\r\n         newContact= updatedContact;\r\n      \r\n      }    \r\n      \r\n     if(newContact)\r\n      return newContact\r\n\r\n    }))\r\n   }\r\n\r\n   useEffect(async () =>\r\n   {\r\n\r\n    if(ConnectedUsers.length>0)\r\n    {\r\n    const response = await axios.get(\"http://localhost:5000/api/logIn/\"+sessionStorage['id'],config);\r\n    setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen})\r\n    let userContacts = response.data.contacts\r\n    getUpdatedContacts(userContacts).then(res=>setContacts(res))\r\n    }\r\n\r\n   },[ConnectedUsers])\r\n\r\n\r\n  const createContact = async(phone,inListFlag) =>\r\n  {\r\n\r\n     if(inListFlag == false)\r\n     {\r\n        const response = await axios.get(\"http://localhost:5000/api/logIn/\"+sessionStorage['id'],config);\r\n        setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen})\r\n     }\r\n\r\n\r\n    if(phone==info.phone)\r\n    {\r\n      console.log('cant Add yourself')\r\n       return;\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.phone==phone)\r\n\r\n    if(checkIfExists.length != 0)\r\n    {\r\n      console.log('already exists')\r\n      return;\r\n    }\r\n\r\n    try{ \r\n\r\n      const response= await axios.get(\"http://localhost:5000/api/logIn/getByPhone/\" + phone,config)\r\n\r\n\r\n\r\n      if(response != 'no such user')\r\n      {\r\n        \r\n       const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName,LastSeen:response.data.LastSeen,inContactList:inListFlag}\r\n       let contactConnected = ConnectedUsers.some(user=> user.userId == contact.id)\r\n       if(contactConnected)\r\n       {\r\n         contact.connected=true;\r\n       }\r\n       else contact.connected=false\r\n       let newContacts = [...contacts,contact]\r\n       setContacts(prevContacts=> {return [...prevContacts,contact]})\r\n       let UpdatedUser = {name:info.name,phone:info.phone,imageName:info.imageName,LastSeen:info.LastSeen}\r\n       UpdatedUser={...info,contacts:newContacts}\r\n       console.log(UpdatedUser)\r\n       try{\r\n         await axios.put(\"http://localhost:5000/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n       } catch(err){console.log(err)}\r\n      }\r\n      else console.log('user dosent exist')\r\n     \r\n    } catch(err){console.log(err)}\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}