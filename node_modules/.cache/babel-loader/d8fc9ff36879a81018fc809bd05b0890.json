{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback, useRef } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useUser } from \"./userprovider\";\nimport { useSocket } from \"./socketprovider\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const RefConversations = useRef(conversations);\n  const currentConversationRef = useRef(selectedConversation);\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const {\n    socket,\n    ConnectedUsers\n  } = useSocket();\n  const [typingFlag, setTypingFlag] = useState('');\n  const [currentConversationIsConnected, setCurrentConversationIsConnected] = useState('');\n  const config = {\n    headers: {\n      \"x-access-token\": sessionStorage[\"config\"]\n    }\n  };\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\n  useEffect(() => {\n    async function fetchData() {\n      if (socket.current == null) return;\n      socket.current.on('user-typing', ({\n        user,\n        conversationId\n      }) => {\n        if (selectedConversation) {\n          if (selectedConversation._id === conversationId) {\n            setTypingFlag(user.name);\n          }\n        }\n      });\n    }\n\n    fetchData();\n  }, [selectedConversation]);\n  useEffect(() => {\n    async function fetchData() {\n      if (selectedConversation) {\n        if (!selectedConversation.isGroup) {\n          if (ConnectedUsers.some(user => user.userId === selectedConversation.Participants[0].id)) {\n            setCurrentConversationIsConnected('');\n          } else {\n            let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\" + selectedConversation.Participants[0].id, config);\n            setCurrentConversationIsConnected(response.data.LastSeen);\n          }\n        }\n      }\n    }\n\n    fetchData();\n  }, [ConnectedUsers, selectedConversation]);\n  useEffect(() => {\n    async function fetchData() {\n      getConversations().then(res => setConversations(res));\n    }\n\n    fetchData();\n  }, []);\n\n  async function getConversations() {\n    try {\n      let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" + sessionStorage[\"id\"], config);\n      let ConversationsList = response.data.map(conversation => {\n        let UpdatedConversation = conversation;\n        if (conversation.Participants.length === 1 && conversation.Name === sessionStorage[\"name\"]) UpdatedConversation = { ...UpdatedConversation,\n          Name: conversation.Participants[0].name,\n          ConversationImage: conversation.Participants[0].image\n        };\n\n        if (selectedConversation) {\n          if (selectedConversation.id === UpdatedConversation.id) setSelectedConversation(UpdatedConversation);\n        }\n\n        return UpdatedConversation;\n      });\n      return ConversationsList;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function getSearchConverastions(str) {\n    getConversations().then(res => {\n      let SearchResult = res.filter(conversation => conversation.Name.includes(str) === true);\n      setConversations(SearchResult);\n    });\n  }\n\n  async function createConversation(ids, name, image) {\n    let ConversationImage = image;\n    let isGroup = false; //no participants chosen\n\n    if (ids.length === 0) {\n      console.log(\"no participants choosen\");\n      return;\n    } //check if conversation already exists\n\n\n    let ConversationExists = null;\n\n    if (ids.length === 1) {\n      ConversationExists = conversations.find(conversation => conversation.Name === name);\n    }\n\n    if (ConversationExists) setSelectedConversation(ConversationExists); //create new conversation\n    else {\n      //get conversation participants\n      const participants = ids.map(id => {\n        let addContactToConversation = contacts.filter(contact => id === contact.id);\n        return addContactToConversation[0];\n      }); //add creator to participants\n\n      participants.push({\n        id: info.id,\n        name: info.name,\n        phone: info.phone,\n        imageName: info.imageName,\n        LastSeen: info.LastSeen\n      }); //if group\n\n      if (ids.length > 1) {\n        const data = new FormData();\n        data.append('file', ConversationImage);\n        data.append(\"upload_preset\", \"whatsApp_clone\");\n        data.append(\"cloud_name\", \"dsrgpqnyv\");\n\n        try {\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\", data);\n          ConversationImage = response.data.url;\n        } catch (err) {\n          console.log(err);\n        }\n\n        isGroup = true;\n      }\n\n      let newConversation = {\n        Name: name,\n        creatorId: sessionStorage[\"id\"],\n        Participants: participants,\n        Messages: [],\n        LastMessage: {\n          id: \"\",\n          sender: \"\",\n          message: \"\"\n        },\n        ConversationImage: ConversationImage,\n        isGroup\n      }; //updateDB\n\n      try {\n        let Response = await axios.post(\"https://messagesapp1.herokuapp.com/api/conversations\", newConversation, config);\n\n        if (Response.data.status === \"created\") {\n          console.log(Response.data.conversation);\n          setSelectedConversation(Response.data.conversation); //show conversation only if messages sent\n\n          if (Response.data.conversation.Messages.length > 0) setConversations(prevConversations => {\n            return [...prevConversations, Response.data.conversation];\n          }); // }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n\n  const addMessageToConversation = useCallback(async ({\n    UpdatedConv\n  }) => {\n    audio.play();\n    let ConversationExists = false;\n    let newListOfConversations = RefConversations.current.map(conversation => {\n      if (conversation._id === UpdatedConv._id) {\n        ConversationExists = true;\n        let newConv = { ...conversation,\n          Messages: UpdatedConv.Messages,\n          LastMessage: UpdatedConv.LastMessage\n        };\n\n        if (currentConversationRef.current) {\n          if (currentConversationRef.current._id === UpdatedConv._id) setSelectedConversation(newConv);\n        }\n\n        return newConv;\n      } else return conversation;\n    });\n\n    if (!ConversationExists) {\n      if (!UpdatedConv.isGroup) {\n        let newConversation = { ...UpdatedConv,\n          Name: UpdatedConv.Participants[0].name,\n          ConversationImage: UpdatedConv.Participants[0].imageName\n        };\n        setConversations(prevConversations => [...prevConversations, newConversation]);\n      } else setConversations(prevConversations => [...prevConversations, UpdatedConv]);\n    } else setConversations(newListOfConversations);\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket.current == null) return;\n    RefConversations.current = conversations;\n    currentConversationRef.current = selectedConversation;\n    socket.current.on(\"receive-message\", addMessageToConversation);\n    return () => socket.current.off(\"receive-message\", addMessageToConversation);\n  }, [conversations, selectedConversation]);\n\n  const updateSenderConversation = AddMessage => {\n    let ConversationExists = false;\n    setSelectedConversation(AddMessage);\n    let newListOfConcversations = conversations.map(conversation => {\n      if (conversation._id === AddMessage._id) {\n        ConversationExists = true;\n        return AddMessage;\n      } else return conversation;\n    });\n\n    if (ConversationExists) {\n      setConversations(newListOfConcversations);\n    } else setConversations(prevConversations => [...prevConversations, AddMessage]);\n  };\n\n  function sendMessage(text, imageFlag, imageURL, recordURL) {\n    let parts = new Intl.DateTimeFormat('en', {\n      hc: 'h12',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZone: 'Asia/Jerusalem'\n    }).formatToParts(new Date()).reduce((acc, part) => {\n      acc[part.type] = part.value;\n      return acc;\n    }, Object.create(null));\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\n    let recordFlag = false;\n    if (recordURL != null) recordFlag = true;\n    let CurrentMessage = {\n      id: info.id,\n      name: info.name,\n      message: text,\n      timeSent: time,\n      containsImage: imageFlag,\n      containsRecord: recordFlag,\n      recordURL: recordURL\n    };\n    if (imageFlag === true) CurrentMessage = { ...CurrentMessage,\n      imageURL: imageURL\n    };\n    let sender = {\n      id: info.id,\n      phone: info.phone,\n      name: info.name,\n      image: info.imageName\n    };\n    let AddMessage = { ...selectedConversation,\n      Messages: [...selectedConversation.Messages, CurrentMessage],\n      LastMessage: CurrentMessage\n    };\n    socket.current.emit(\"send-message\", {\n      sender: sender,\n      UpdatedConversation: AddMessage,\n      conversationId: selectedConversation._id\n    });\n    updateSenderConversation(AddMessage);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation,\n      currentConversationIsConnected,\n      typingFlag,\n      setTypingFlag,\n      getSearchConverastions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"LJqA+iI2Myal3Cldqp3vGSFW8TU=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useRef","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","RefConversations","currentConversationRef","createGroupFlag","setCreateGroupFlag","socket","ConnectedUsers","typingFlag","setTypingFlag","currentConversationIsConnected","setCurrentConversationIsConnected","config","headers","sessionStorage","audio","Audio","fetchData","current","on","user","conversationId","_id","name","isGroup","some","userId","Participants","response","get","data","LastSeen","getConversations","then","res","ConversationsList","map","conversation","UpdatedConversation","length","Name","ConversationImage","image","err","console","log","getSearchConverastions","str","SearchResult","filter","includes","createConversation","ids","ConversationExists","find","participants","addContactToConversation","contact","push","phone","imageName","FormData","append","post","url","newConversation","creatorId","Messages","LastMessage","sender","message","Response","status","prevConversations","addMessageToConversation","UpdatedConv","play","newListOfConversations","newConv","off","updateSenderConversation","AddMessage","newListOfConcversations","sendMessage","text","imageFlag","imageURL","recordURL","parts","Intl","DateTimeFormat","hc","year","month","day","hour","minute","timeZone","formatToParts","Date","reduce","acc","part","type","value","Object","create","time","recordFlag","CurrentMessage","timeSent","containsImage","containsRecord","emit"],"mappings":"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","sourcesContent":["import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\r\n  const { socket, ConnectedUsers } = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n    async function fetchData() {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === conversationId)\r\n          {\r\n             setTypingFlag(user.name)\r\n          }\r\n        }\r\n    } )\r\n  }\r\n  fetchData();\r\n  },[selectedConversation])\r\n\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() {\r\n    if(selectedConversation)\r\n    {\r\n    if(!selectedConversation.isGroup)\r\n     {\r\n      if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n      {\r\n        setCurrentConversationIsConnected('')\r\n      }\r\n      else\r\n      {\r\n        let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n        setCurrentConversationIsConnected(response.data.LastSeen)\r\n      }\r\n     }\r\n    }\r\n  }\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,selectedConversation])\r\n\r\n  useEffect(() =>\r\n  {\r\n    async function fetchData() {\r\n     getConversations().then(res=> setConversations(res))\r\n    }\r\n    fetchData();\r\n    \r\n  }, []);\r\n\r\n  async function getConversations()\r\n  {\r\n    try{\r\n       let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n\r\n       let ConversationsList = response.data.map((conversation) =>\r\n       {\r\n         let UpdatedConversation= conversation\r\n\r\n         if (conversation.Participants.length === 1 && conversation.Name === sessionStorage[\"name\"])\r\n            UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n\r\n         if(selectedConversation)\r\n         {\r\n           if(selectedConversation.id === UpdatedConversation.id)\r\n              setSelectedConversation(UpdatedConversation)\r\n         }\r\n          \r\n         return UpdatedConversation;\r\n       })\r\n\r\n      return ConversationsList \r\n    } catch (err) {console.log(err);}\r\n  }\r\n\r\n\r\n\r\n\r\n  async function getSearchConverastions(str)\r\n  {\r\n\r\n        getConversations().then(res=>\r\n        {\r\n\r\n         let SearchResult = res.filter(conversation=> \r\n            conversation.Name.includes(str) ===true\r\n          )\r\n    \r\n          setConversations(SearchResult)\r\n        })\r\n  }\r\n        \r\n\r\n\r\n  async function createConversation(ids, name, image) {\r\n    let ConversationImage = image;\r\n    let isGroup = false;\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      console.log(\"no participants choosen\");\r\n      return;\r\n    }\r\n\r\n    //check if conversation already exists\r\n    let ConversationExists = null;\r\n    if (ids.length === 1) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      //if group\r\n      if (ids.length > 1) {\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        try{\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n        ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      \r\n    \r\n        isGroup = true;\r\n      }\r\n\r\n      let newConversation = {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: [],\r\n        LastMessage: { id: \"\", sender: \"\", message: \"\" },\r\n        ConversationImage: ConversationImage,\r\n        isGroup,\r\n      };\r\n\r\n      //updateDB\r\n      try {\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n        if (Response.data.status === \"created\") {\r\n          console.log(Response.data.conversation);\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent\r\n          if (Response.data.conversation.Messages.length > 0)\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n          // }\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n \r\n\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n   {\r\n\r\n      audio.play()\r\n\r\n      let ConversationExists = false;\r\n      let newListOfConversations = RefConversations.current.map((conversation) =>{\r\n          if (conversation._id === UpdatedConv._id) {\r\n            ConversationExists = true;\r\n            let newConv = { ...conversation,\r\n              Messages: UpdatedConv.Messages,\r\n              LastMessage: UpdatedConv.LastMessage,};\r\n            if (currentConversationRef.current) {\r\n              if (currentConversationRef.current._id === UpdatedConv._id)\r\n                setSelectedConversation(newConv);\r\n            }\r\n\r\n            return newConv;\r\n          } else return conversation;\r\n        }\r\n      );\r\n\r\n\r\n      if (!ConversationExists) {\r\n        if (!UpdatedConv.isGroup)\r\n         {\r\n           let newConversation = { ...UpdatedConv,\r\n            Name: UpdatedConv.Participants[0].name,\r\n            ConversationImage: UpdatedConv.Participants[0].imageName,\r\n          };\r\n          setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n        } else\r\n          setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n      } else setConversations(newListOfConversations);\r\n    },[setConversations]);\r\n\r\n  useEffect(() => {\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  }, [conversations, selectedConversation]);\r\n\r\n\r\n  const updateSenderConversation = (AddMessage) => {\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => {\r\n      if (conversation._id === AddMessage._id) {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } else return conversation;\r\n    });\r\n\r\n    if (ConversationExists) {\r\n      setConversations(newListOfConcversations);\r\n    } else\r\n      setConversations((prevConversations) => [\r\n        ...prevConversations,\r\n        AddMessage,\r\n      ]);\r\n  };\r\n\r\n\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n      let parts = new Intl.DateTimeFormat('en', {\r\n      hc: 'h12',\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      image: info.imageName,\r\n    };\r\n    let AddMessage = {\r\n      ...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n    socket.current.emit(\"send-message\", {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        createGroupFlag,\r\n        setCreateGroupFlag,\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}