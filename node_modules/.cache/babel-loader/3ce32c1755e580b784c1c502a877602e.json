{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chatbody.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useState, useCallback } from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { useSocket } from '../contexts/socketprovider';\nimport { useUser } from '../contexts/userprovider';\nimport { IconButton } from '@material-ui/core';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ImageIcon from '@material-ui/icons/Image';\nimport Picker from 'emoji-picker-react';\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport axios from 'axios';\nimport Message from './message';\nimport AudioMessage from './aoudiomessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatBody(props) {\n  _s();\n\n  const [Text, setText] = useState('');\n  const {\n    socket\n  } = useSocket();\n  const {\n    info\n  } = useUser();\n  const {\n    sendMessage,\n    selectedConversation,\n    currentConversationIsConnected,\n    typingFlag,\n    setTypingFlag\n  } = useConversations();\n  const inputRef = useRef(null);\n  const [emojiFlag, setEmojiFlag] = useState(false);\n  const [imageFlag, setImageFlag] = useState(false);\n  const [imageURL, setImageURL] = useState(null);\n  const [recordFlag, setRecordFlag] = useState(false);\n  const {\n    status,\n    startRecording,\n    stopRecording,\n    mediaBlobUrl\n  } = useReactMediaRecorder({\n    audio: true,\n    blobPropertyBag: {\n      type: \"audio/wav\"\n    }\n  });\n  const setRef = useCallback(node => {\n    if (node) node.scrollIntoView({\n      smooth: true\n    });\n  }, []);\n\n  function typing(e) {\n    setText(e.target.value);\n    if (socket.current == null) return;\n    socket.current.emit(\"typing\", {\n      user: info,\n      Conversation: selectedConversation\n    });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    sendMessage(Text, false, null, null);\n    setText(' ');\n  }\n\n  async function handleImage(e) {\n    const data = new FormData();\n    data.append('file', e.target.files[0]);\n    data.append(\"upload_preset\", \"whatsApp_clone\");\n    data.append(\"cloud_name\", \"dsrgpqnyv\");\n\n    try {\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\", data);\n      setImageURL(response.data.url);\n      setImageFlag(true);\n      props.imageCallback(response.data.url);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  function blobToBase64(audioBlob) {\n    const reader = new FileReader();\n    reader.readAsDataURL(mediaBlobUrl);\n    return new Promise(resolve => {\n      reader.onloadend = () => {\n        resolve(reader.result);\n      };\n    });\n  }\n\n  async function handleRecord() {\n    if (!recordFlag) {\n      startRecording();\n      setRecordFlag(true);\n    } else {\n      stopRecording();\n      setRecordFlag(false);\n      let audioBlob = await fetch(mediaBlobUrl).then(r => r.blob());\n      console.log(audioBlob);\n      blobToBase64(audioBlob).then(async audioBlob => {\n        const file = \"data:audio/webm;base64,\" + audioBlob;\n        const data = new FormData();\n        data.append('file', file);\n        data.append(\"upload_preset\", \"whatsApp_clone\");\n        data.append(\"cloud_name\", \"dsrgpqnyv\");\n\n        try {\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\", data);\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    }\n  }\n\n  const onEmojiClick = (event, emojiObject) => {\n    setText(Text + emojiObject.emoji);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body_and_footer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_body\",\n      children: selectedConversation.Messages.map((message, index) => {\n        const lastMessage = selectedConversation.Messages.length - 1 === index;\n        let sender = message.id == sessionStorage['id'] ? 'chat_message' : ' chat_message chat_reciever';\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: message.containsRecord ? /*#__PURE__*/_jsxDEV(AudioMessage, {\n            message: message,\n            sender: sender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: sender,\n            ref: lastMessage ? setRef : null,\n            children: /*#__PURE__*/_jsxDEV(Message, {\n              message: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_footer_with_stickers\",\n      children: [emojiFlag ? /*#__PURE__*/_jsxDEV(Picker, {\n        onEmojiClick: (e, emojiObject) => onEmojiClick(e, emojiObject),\n        pickerStyle: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 20\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_footer\",\n        children: [emojiFlag ? /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setEmojiFlag(false),\n          children: [/*#__PURE__*/_jsxDEV(CloseIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 66\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 19\n        }, this) : '', /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setEmojiFlag(true),\n          children: /*#__PURE__*/_jsxDEV(InsertEmoticonIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          accept: \"image/*\",\n          className: \"invisibleInput\",\n          id: \"icon-button-file\",\n          type: \"file\",\n          style: {\n            visibility: 'hidden'\n          },\n          onChange: handleImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"icon-button-file\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            component: \"span\",\n            children: /*#__PURE__*/_jsxDEV(ImageIcon, {\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"message_section\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"message_input\",\n            ref: inputRef,\n            value: Text,\n            onChange: typing,\n            type: \"text\",\n            placeholder: \"type a message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \" send \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          children: /*#__PURE__*/_jsxDEV(MicIcon, {\n            fontSize: \"large\",\n            onClick: handleRecord\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"rubGDTbRyojdS7KjNRTDsPSOpgs=\", false, function () {\n  return [useSocket, useUser, useConversations, useReactMediaRecorder];\n});\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chatbody.js"],"names":["React","useRef","useState","useCallback","useConversations","useSocket","useUser","IconButton","InsertEmoticonIcon","MicIcon","CloseIcon","ImageIcon","Picker","useReactMediaRecorder","axios","Message","AudioMessage","ChatBody","props","Text","setText","socket","info","sendMessage","selectedConversation","currentConversationIsConnected","typingFlag","setTypingFlag","inputRef","emojiFlag","setEmojiFlag","imageFlag","setImageFlag","imageURL","setImageURL","recordFlag","setRecordFlag","status","startRecording","stopRecording","mediaBlobUrl","audio","blobPropertyBag","type","setRef","node","scrollIntoView","smooth","typing","e","target","value","current","emit","user","Conversation","handleSubmit","preventDefault","handleImage","data","FormData","append","files","response","post","url","imageCallback","err","console","log","blobToBase64","audioBlob","reader","FileReader","readAsDataURL","Promise","resolve","onloadend","result","handleRecord","fetch","then","r","blob","file","onEmojiClick","event","emojiObject","emoji","Messages","map","message","index","lastMessage","length","sender","id","sessionStorage","containsRecord","width","visibility"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\r\nimport { useState ,useCallback} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\nimport {IconButton } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport Picker from 'emoji-picker-react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\nimport axios from 'axios'\r\nimport Message from './message';\r\nimport AudioMessage from './aoudiomessage';\r\n\r\n\r\n\r\n\r\nfunction ChatBody(props) {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag} = useConversations()\r\n    const inputRef = useRef(null)\r\n  \r\n    const [emojiFlag,setEmojiFlag] = useState(false)\r\n    const [imageFlag,setImageFlag] =useState(false)\r\n    const [imageURL,setImageURL] =useState(null)\r\n    const [recordFlag,setRecordFlag] =useState(false)\r\n    const {status,startRecording,stopRecording,mediaBlobUrl} = useReactMediaRecorder({audio: true,blobPropertyBag: {\r\n      type: \"audio/wav\"\r\n  } })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const setRef = useCallback((node) => \r\n    {\r\n      if(node)\r\n         node.scrollIntoView({smooth:true})\r\n    },[])\r\n\r\n    function typing(e)\r\n    {\r\n        setText(e.target.value)\r\n        if (socket.current == null) return;\r\n        socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n    }\r\n\r\n    function handleSubmit(e)\r\n    {\r\n      e.preventDefault()\r\n      sendMessage(Text,false,null,null)\r\n\r\n      setText(' ')\r\n    }\r\n\r\n    async function handleImage(e)\r\n    {\r\n      const data = new FormData()\r\n      data.append('file',e.target.files[0])\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n      try{\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n      setImageURL(response.data.url)\r\n      setImageFlag(true)\r\n\r\n      props.imageCallback(response.data.url)\r\n      }catch(err){console.log(err)}\r\n    }\r\n\r\n\r\n    function blobToBase64(audioBlob)\r\n    {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(mediaBlobUrl)\r\n        return new Promise(resolve =>\r\n        {\r\n          reader.onloadend =(() => \r\n          {\r\n              resolve(reader.result);\r\n          })\r\n        })\r\n    }\r\n\r\n    async function handleRecord()\r\n    {\r\n      if(!recordFlag)\r\n      {\r\n        startRecording()\r\n        setRecordFlag(true)\r\n      }\r\n\r\n      else\r\n      {\r\n         stopRecording()\r\n         setRecordFlag(false)\r\n         let audioBlob = await fetch(mediaBlobUrl).then(r => r.blob());\r\n         console.log(audioBlob)\r\n        blobToBase64(audioBlob).then(async (audioBlob) => {\r\n            const file = \"data:audio/webm;base64,\" + audioBlob;\r\n            const data = new FormData();\r\n            data.append('file', file);\r\n            data.append(\"upload_preset\",\"whatsApp_clone\")\r\n            data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n            try{\r\n            let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n            }catch(err){console.log(err)}\r\n      \r\n            })\r\n          }\r\n           \r\n         \r\n        }\r\n    \r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setText(Text + emojiObject.emoji)\r\n      };\r\n\r\n\r\n\r\n    return (\r\n        <div className= 'body_and_footer'>\r\n        <div className='chat_body'>\r\n        {selectedConversation.Messages.map((message,index)=>\r\n        {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender = message.id==sessionStorage['id']? 'chat_message' : ' chat_message chat_reciever'\r\n\r\n            return (\r\n              <div>\r\n              {message.containsRecord ? \r\n              <AudioMessage message={message} sender={sender}/> :\r\n               <p className={sender} ref={lastMessage ? setRef : null}>\r\n                 <Message message={message}/> \r\n                </p>}\r\n\r\n             </div>\r\n       \r\n            )}\r\n\r\n     \r\n         )}\r\n\r\n    </div>\r\n\r\n   <div className='chat_footer_with_stickers'>\r\n      {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n      <div className='chat_footer'>\r\n      {emojiFlag? <IconButton  onClick={()=>setEmojiFlag(false)}><CloseIcon fontSize='large'/> </IconButton>:''}\r\n      <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n         <InsertEmoticonIcon fontSize='large'/>\r\n      </IconButton>\r\n      <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n      <label htmlFor=\"icon-button-file\">\r\n       <IconButton component=\"span\">\r\n         < ImageIcon  fontSize='large'></ImageIcon>\r\n       </IconButton>\r\n      </label> \r\n\r\n      <form onSubmit={handleSubmit} className='message_section'>\r\n         <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n         <button type='submit' > send </button>\r\n      </form>\r\n\r\n      <IconButton>\r\n         <MicIcon fontSize='large' onClick={handleRecord} />\r\n      </IconButton>\r\n    </div>\r\n</div>\r\n\r\n</div>\r\n\r\n    \r\n    )\r\n}\r\n\r\nexport default ChatBody\r\n"]},"metadata":{},"sourceType":"module"}