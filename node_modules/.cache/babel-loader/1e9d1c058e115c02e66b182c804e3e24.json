{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback, useRef } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useUser } from \"./userprovider\";\nimport { useSocket } from \"./socketprovider\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const RefConversations = useRef(conversations);\n  const currentConversationRef = useRef(selectedConversation);\n  const {\n    socket,\n    ConnectedUsers\n  } = useSocket();\n  const [typingFlag, setTypingFlag] = useState('');\n  const [currentConversationIsConnected, setCurrentConversationIsConnected] = useState('');\n  const config = {\n    headers: {\n      \"x-access-token\": sessionStorage[\"config\"]\n    }\n  };\n  const [showDetails, setShowDetails] = useState(false);\n  const [removedFromGroupFlag, setRemovedFromGroupFlag] = useState(false);\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\n  const [renderFlag, setRenderFlag] = useState(true);\n  useEffect(() => {\n    async function fetchData() {\n      if (socket.current == null) return;\n      socket.current.on('update-conversation', async () => {\n        setRenderFlag(true);\n      });\n      socket.current.on('removed-user', async () => {\n        getConversations().then(res => {\n          setConversations(res);\n\n          if (selectedConversation) {\n            let checkIfDeleted = res.filter(conversation => conversation._id === selectedConversation._id);\n            if (checkIfDeleted.length === 0) setRemovedFromGroupFlag(true);\n          }\n        });\n      });\n    }\n\n    fetchData();\n  }, [selectedConversation]);\n  useEffect(() => {\n    async function fetchData() {\n      if (selectedConversation) {\n        if (!selectedConversation.isGroup) {\n          if (ConnectedUsers.some(user => user.userId === selectedConversation.Participants[0].id)) {\n            console.log('here');\n            setCurrentConversationIsConnected('');\n          } else {\n            let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\" + selectedConversation.Participants[0].id, config);\n            setCurrentConversationIsConnected(response.data.LastSeen);\n          }\n        }\n      }\n    }\n\n    fetchData();\n  }, [ConnectedUsers, setSelectedConversation]);\n  useEffect(() => {\n    async function fetchData() {\n      getConversations().then(res => setConversations(res));\n    }\n\n    if (renderFlag) {\n      setRenderFlag(false);\n      fetchData();\n    }\n  }, [renderFlag]);\n  useEffect(() => {\n    if (socket.current == null) return;\n    socket.current.on('user-typing', ({\n      user,\n      conversationId\n    }) => {\n      if (selectedConversation) {\n        if (selectedConversation._id === conversationId) {\n          setTypingFlag(user.name);\n        }\n      }\n    });\n  }, []);\n\n  async function getConversations() {\n    try {\n      let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" + sessionStorage[\"id\"], config);\n      let ConversationsList = response.data.map(conversation => {\n        let UpdatedConversation = conversation;\n        if (!conversation.isGroup && conversation.Name === sessionStorage['name']) UpdatedConversation = { ...UpdatedConversation,\n          Name: conversation.Participants[0].name,\n          ConversationImage: conversation.Participants[0].image\n        };\n\n        if (selectedConversation) {\n          if (selectedConversation._id === UpdatedConversation._id) setSelectedConversation(UpdatedConversation);\n        }\n\n        return UpdatedConversation;\n      });\n      return ConversationsList;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function getSearchConverastions(str) {\n    getConversations().then(res => {\n      let SearchResult = res.filter(conversation => conversation.Name.includes(str) === true);\n      setConversations(SearchResult);\n    });\n  }\n\n  async function createConversation(ids, name, image, groupFlag) {\n    let ConversationImage = image;\n    let isGroup = groupFlag;\n    let messages = [];\n    let lastMessage = ''; //no participants chosen\n\n    if (ids.length === 0) {\n      return {\n        status: 'error',\n        message: 'no participants choosen'\n      };\n    } //check if conversation already exists and it's not a group\n\n\n    let ConversationExists = null;\n\n    if (ids.length === 1 && !isGroup) {\n      ConversationExists = conversations.find(conversation => conversation.Name === name);\n    }\n\n    if (ConversationExists) setSelectedConversation(ConversationExists); //create new conversation\n    else {\n      //get conversation participants\n      const participants = ids.map(id => {\n        let addContactToConversation = contacts.filter(contact => id === contact.id);\n        return addContactToConversation[0];\n      }); //add creator to participants\n\n      participants.push({\n        id: info.id,\n        name: info.name,\n        phone: info.phone,\n        imageName: info.imageName,\n        LastSeen: info.LastSeen\n      });\n      let createdDate = ''; //if group\n\n      if (isGroup) {\n        let parts = new Intl.DateTimeFormat('en', {\n          hc: 'h12',\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: 'numeric',\n          minute: 'numeric',\n          timeZone: 'Asia/Jerusalem'\n        }).formatToParts(new Date()).reduce((acc, part) => {\n          acc[part.type] = part.value;\n          return acc;\n        }, Object.create(null));\n        createdDate = `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}`;\n        lastMessage = {\n          name: \"manager\",\n          message: info.name + \" created this group\",\n          timeSent: '',\n          containsImage: false,\n          containsRecord: false,\n          recordURL: null\n        };\n        messages.push(lastMessage);\n        const data = new FormData();\n        data.append('file', ConversationImage);\n        data.append(\"upload_preset\", \"whatsApp_clone\");\n        data.append(\"cloud_name\", \"dsrgpqnyv\");\n\n        try {\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\", data);\n          ConversationImage = response.data.url;\n        } catch (err) {\n          console.log(err);\n        }\n      }\n\n      let newConversation = {\n        Name: name,\n        creatorId: sessionStorage[\"id\"],\n        Participants: participants,\n        Messages: messages,\n        LastMessage: lastMessage,\n        ConversationImage: ConversationImage,\n        isGroup: isGroup,\n        createdDate: createdDate,\n        description: \"Add Description\"\n      }; //updateDB\n\n      try {\n        let Response = await axios.post(\"https://messagesapp1.herokuapp.com/api/conversations\", newConversation, config);\n\n        if (Response.data.status === \"created\") {\n          setSelectedConversation(Response.data.conversation); //show conversation only if messages sent or if its A group\n\n          if (Response.data.conversation.Messages.length > 0 || Response.data.conversation.isGroup === true) {\n            setConversations(prevConversations => {\n              return [...prevConversations, Response.data.conversation];\n            });\n            socket.current.emit('conversation-changed', Response.data.conversation);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n\n  async function UpdateConversation(updatedConversation) {\n    let updateDBConv = { ...updatedConversation\n    }; //if user left the group, dont add him to DB\n\n    if (!updatedConversation.LastMessage.message.includes('left')) {\n      let addCurrentParticipant = {\n        id: info.id,\n        phone: info.phone,\n        name: info.name,\n        image: info.imageName\n      };\n      let participants = [...updatedConversation.Participants, addCurrentParticipant];\n      updateDBConv = { ...updateDBConv,\n        Participants: participants\n      };\n    }\n\n    delete updateDBConv._id;\n\n    try {\n      let response = await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\" + selectedConversation._id, updateDBConv, config);\n\n      if (response.data.status === 'Updated') {\n        let UpdatedConversations = [];\n\n        if (!updatedConversation.LastMessage.message.includes('left')) {\n          setSelectedConversation(updatedConversation);\n          conversations.forEach(conversation => {\n            if (conversation._id === updatedConversation._id) UpdatedConversations.push(updatedConversation);else UpdatedConversations.push(conversation);\n          });\n        } else {\n          UpdatedConversations = conversations.filter(conversation => conversation._id !== selectedConversation._id);\n          setSelectedConversation();\n        }\n\n        if (updatedConversation.LastMessage.message.includes('removed')) socket.current.emit('user-deleted', selectedConversation);else socket.current.emit('conversation-changed', selectedConversation);\n        setConversations(UpdatedConversations);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const addMessageToConversation = useCallback(async ({\n    UpdatedConv\n  }) => {\n    audio.play();\n    let ConversationExists = false;\n    let newListOfConversations = RefConversations.current.map(conversation => {\n      if (conversation._id === UpdatedConv._id) {\n        ConversationExists = true;\n        let newConv = { ...conversation,\n          Messages: UpdatedConv.Messages,\n          LastMessage: UpdatedConv.LastMessage\n        };\n\n        if (currentConversationRef.current) {\n          if (currentConversationRef.current._id === UpdatedConv._id) setSelectedConversation(newConv);\n        }\n\n        return newConv;\n      } else return conversation;\n    });\n\n    if (!ConversationExists) {\n      if (!UpdatedConv.isGroup) {\n        let newConversation = { ...UpdatedConv,\n          Name: UpdatedConv.Participants[0].name,\n          ConversationImage: UpdatedConv.Participants[0].imageName\n        };\n        setConversations(prevConversations => [...prevConversations, newConversation]);\n      } else setConversations(prevConversations => [...prevConversations, UpdatedConv]);\n    } else setConversations(newListOfConversations);\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket.current == null) return;\n    RefConversations.current = conversations;\n    currentConversationRef.current = selectedConversation;\n    socket.current.on(\"receive-message\", addMessageToConversation);\n    return () => socket.current.off(\"receive-message\", addMessageToConversation);\n  }, [conversations, selectedConversation]);\n\n  const updateSenderConversation = AddMessage => {\n    let ConversationExists = false;\n    setSelectedConversation(AddMessage);\n    let newListOfConcversations = conversations.map(conversation => {\n      if (conversation._id === AddMessage._id) {\n        ConversationExists = true;\n        return AddMessage;\n      } else return conversation;\n    });\n\n    if (ConversationExists) {\n      setConversations(newListOfConcversations);\n    } else setConversations(prevConversations => [...prevConversations, AddMessage]);\n  };\n\n  function sendMessage(text, imageFlag, imageURL, recordURL) {\n    let parts = new Intl.DateTimeFormat('en', {\n      hc: 'h12',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZone: 'Asia/Jerusalem'\n    }).formatToParts(new Date()).reduce((acc, part) => {\n      acc[part.type] = part.value;\n      return acc;\n    }, Object.create(null));\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\n    let recordFlag = false;\n    if (recordURL != null) recordFlag = true;\n    let CurrentMessage = {\n      id: info.id,\n      name: info.name,\n      message: text,\n      timeSent: time,\n      containsImage: imageFlag,\n      containsRecord: recordFlag,\n      recordURL: recordURL\n    };\n    if (imageFlag === true) CurrentMessage = { ...CurrentMessage,\n      imageURL: imageURL\n    };\n    let sender = {\n      id: info.id,\n      phone: info.phone,\n      name: info.name,\n      image: info.imageName\n    };\n    let AddMessage = { ...selectedConversation,\n      Messages: [...selectedConversation.Messages, CurrentMessage],\n      LastMessage: CurrentMessage\n    };\n    socket.current.emit(\"send-message\", {\n      sender: sender,\n      UpdatedConversation: AddMessage,\n      conversationId: selectedConversation._id\n    });\n    updateSenderConversation(AddMessage);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation,\n      currentConversationIsConnected,\n      typingFlag,\n      setTypingFlag,\n      getSearchConverastions,\n      showDetails,\n      setShowDetails,\n      UpdateConversation,\n      removedFromGroupFlag,\n      setRemovedFromGroupFlag\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 483,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"BV4+APyhHHRbxwigF6clEZJHEYk=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useRef","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","RefConversations","currentConversationRef","socket","ConnectedUsers","typingFlag","setTypingFlag","currentConversationIsConnected","setCurrentConversationIsConnected","config","headers","sessionStorage","showDetails","setShowDetails","removedFromGroupFlag","setRemovedFromGroupFlag","audio","Audio","renderFlag","setRenderFlag","fetchData","current","on","getConversations","then","res","checkIfDeleted","filter","conversation","_id","length","isGroup","some","user","userId","Participants","id","console","log","response","get","data","LastSeen","conversationId","name","ConversationsList","map","UpdatedConversation","Name","ConversationImage","image","err","getSearchConverastions","str","SearchResult","includes","createConversation","ids","groupFlag","messages","lastMessage","status","message","ConversationExists","find","participants","addContactToConversation","contact","push","phone","imageName","createdDate","parts","Intl","DateTimeFormat","hc","year","month","day","hour","minute","timeZone","formatToParts","Date","reduce","acc","part","type","value","Object","create","timeSent","containsImage","containsRecord","recordURL","FormData","append","post","url","newConversation","creatorId","Messages","LastMessage","description","Response","prevConversations","emit","UpdateConversation","updatedConversation","updateDBConv","addCurrentParticipant","put","UpdatedConversations","forEach","addMessageToConversation","UpdatedConv","play","newListOfConversations","newConv","off","updateSenderConversation","AddMessage","newListOfConcversations","sendMessage","text","imageFlag","imageURL","time","recordFlag","CurrentMessage","sender"],"mappings":"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","sourcesContent":["import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() \r\n{\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({children }) \r\n{\r\n\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const { socket, ConnectedUsers } = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n  const [showDetails,setShowDetails] =useState(false)\r\n  const [removedFromGroupFlag,setRemovedFromGroupFlag] = useState(false)\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n  const [renderFlag,setRenderFlag]=useState(true)\r\n\r\n\r\n  useEffect(()=>\r\n  {\r\n\r\n    async function fetchData() {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('update-conversation',async ()=>\r\n    {\r\n    \r\n      setRenderFlag(true)\r\n    \r\n    })\r\n\r\n    socket.current.on('removed-user',async ()=>\r\n    {\r\n    \r\n      getConversations().then(res=> \r\n      {\r\n        setConversations(res)\r\n        if(selectedConversation)\r\n        {\r\n          let checkIfDeleted=res.filter(conversation=> conversation._id === selectedConversation._id)\r\n          if(checkIfDeleted.length === 0 ) \r\n            setRemovedFromGroupFlag(true)\r\n\r\n        }\r\n\r\n      })\r\n    \r\n    })\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[selectedConversation])\r\n\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() {\r\n\r\n    if(selectedConversation)\r\n    {\r\n    if(!selectedConversation.isGroup)\r\n     {\r\n      if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n      {\r\n        console.log('here')\r\n        setCurrentConversationIsConnected('')\r\n      }\r\n      else\r\n      {\r\n        let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n        setCurrentConversationIsConnected(response.data.LastSeen)\r\n      }\r\n     }\r\n    }\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,setSelectedConversation])\r\n\r\n  useEffect(() =>\r\n  {\r\n    async function fetchData() {\r\n     getConversations().then(res=> setConversations(res))\r\n    }\r\n\r\n    if(renderFlag)\r\n    {\r\n      setRenderFlag(false)\r\n      fetchData();\r\n    }\r\n    \r\n  }, [renderFlag]);\r\n\r\n  useEffect(() =>\r\n  {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n\r\n      if(selectedConversation)\r\n      {\r\n        if(selectedConversation._id === conversationId)\r\n        {\r\n           setTypingFlag(user.name)\r\n        }\r\n      }\r\n    })\r\n  },[])\r\n\r\n  async function getConversations()\r\n  {\r\n\r\n    try\r\n    {\r\n      let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n      let ConversationsList = response.data.map((conversation) =>\r\n      {\r\n        let UpdatedConversation= conversation\r\n        if (!conversation.isGroup && conversation.Name ===  sessionStorage['name'])\r\n          UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === UpdatedConversation._id)\r\n            setSelectedConversation(UpdatedConversation)\r\n        }\r\n\r\n        \r\n          \r\n         return UpdatedConversation;\r\n\r\n      })\r\n\r\n      return ConversationsList \r\n\r\n    } catch (err) {console.log(err);}\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  async function getSearchConverastions(str)\r\n  {\r\n    getConversations().then(res=>\r\n    {\r\n      let SearchResult = res.filter(conversation=> \r\n      conversation.Name.includes(str) ===true)\r\n      setConversations(SearchResult)\r\n    })\r\n\r\n  }\r\n        \r\n\r\n  async function createConversation(ids, name, image,groupFlag)\r\n  {\r\n\r\n    let ConversationImage = image;\r\n    let isGroup = groupFlag;\r\n    let messages = []\r\n    let lastMessage=''\r\n\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      return {status:'error',message:'no participants choosen'};\r\n    }\r\n\r\n    //check if conversation already exists and it's not a group\r\n    let ConversationExists = null;\r\n    if (ids.length === 1 && !isGroup) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => \r\n      {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      let createdDate=''\r\n\r\n      //if group\r\n      if (isGroup) \r\n      {\r\n        let parts = new Intl.DateTimeFormat('en', {\r\n          hc: 'h12',\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          timeZone:'Asia/Jerusalem'})\r\n        .formatToParts(new Date())\r\n        .reduce((acc, part) => {\r\n          acc[part.type] = part.value;\r\n          return acc;\r\n        }, Object.create(null));\r\n\r\n        createdDate= `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}`;\r\n\r\n        lastMessage={name:\"manager\",message: info.name +\" created this group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n        messages.push(lastMessage)\r\n\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n          ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      }\r\n    \r\n      let newConversation = \r\n      {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: messages,\r\n        LastMessage:lastMessage,\r\n        ConversationImage: ConversationImage,\r\n        isGroup:isGroup,\r\n        createdDate:createdDate,\r\n        description: \"Add Description\",\r\n      };\r\n\r\n      //updateDB\r\n      try \r\n      {\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n\r\n        if (Response.data.status === \"created\") \r\n        {\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent or if its A group\r\n          if (Response.data.conversation.Messages.length > 0  || Response.data.conversation.isGroup === true)\r\n          {\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n            socket.current.emit('conversation-changed',Response.data.conversation)\r\n          }\r\n        }\r\n      }catch (err) {console.log(err);}\r\n    }\r\n  }\r\n\r\n  async function UpdateConversation(updatedConversation)\r\n  {\r\n\r\n    let updateDBConv={...updatedConversation}\r\n\r\n    //if user left the group, dont add him to DB\r\n    if(!(updatedConversation.LastMessage.message.includes('left')))\r\n    {\r\n      let addCurrentParticipant= {id: info.id,phone: info.phone,name: info.name,image: info.imageName,}\r\n      let participants=[...updatedConversation.Participants,addCurrentParticipant]\r\n      updateDBConv={...updateDBConv,Participants:participants}\r\n    }\r\n\r\n    delete updateDBConv._id\r\n\r\n    try\r\n    {\r\n      let response=await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+ selectedConversation._id,updateDBConv,config)\r\n      if(response.data.status==='Updated')\r\n      {\r\n        let UpdatedConversations=[]\r\n        if(!(updatedConversation.LastMessage.message.includes('left')))\r\n        {\r\n          setSelectedConversation(updatedConversation)\r\n          conversations.forEach(conversation=>\r\n          { \r\n            if(conversation._id===updatedConversation._id)    \r\n              UpdatedConversations.push(updatedConversation)\r\n            else UpdatedConversations.push(conversation)\r\n\r\n          })\r\n        }\r\n        else\r\n        {\r\n          UpdatedConversations=conversations.filter(conversation=> conversation._id !== selectedConversation._id)\r\n          setSelectedConversation()\r\n        }\r\n\r\n        if(updatedConversation.LastMessage.message.includes('removed'))\r\n          socket.current.emit('user-deleted',selectedConversation)\r\n        else\r\n          socket.current.emit('conversation-changed',selectedConversation)\r\n\r\n        setConversations(UpdatedConversations)\r\n              \r\n      }\r\n    }catch(err){console.log(err)}\r\n  }\r\n\r\n\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n  {\r\n    audio.play()\r\n\r\n    let ConversationExists = false;\r\n    let newListOfConversations = RefConversations.current.map((conversation) =>\r\n    {\r\n      if (conversation._id === UpdatedConv._id) \r\n      {\r\n        ConversationExists = true;\r\n        let newConv = \r\n        { ...conversation,\r\n          Messages: UpdatedConv.Messages,\r\n          LastMessage: UpdatedConv.LastMessage,};\r\n          if (currentConversationRef.current) \r\n          {\r\n           if (currentConversationRef.current._id === UpdatedConv._id)\r\n             setSelectedConversation(newConv);\r\n          }\r\n\r\n        return newConv;\r\n\r\n      }\r\n      else return conversation;\r\n    });\r\n\r\n\r\n    if (!ConversationExists) \r\n    {\r\n      if (!UpdatedConv.isGroup)\r\n      {\r\n        let newConversation = \r\n        { ...UpdatedConv,\r\n        Name: UpdatedConv.Participants[0].name,\r\n        ConversationImage: UpdatedConv.Participants[0].imageName,\r\n        };\r\n\r\n        setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n      } \r\n      else\r\n        setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n    } \r\n    else setConversations(newListOfConversations);\r\n  },[setConversations]);\r\n\r\n  useEffect(() => \r\n  {\r\n\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  },[conversations, selectedConversation]);\r\n\r\n\r\n  const updateSenderConversation = (AddMessage) => \r\n  {\r\n\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => \r\n    {\r\n      if (conversation._id === AddMessage._id) \r\n      {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } \r\n      else return conversation;\r\n\r\n    });\r\n\r\n    if (ConversationExists) \r\n    {\r\n      setConversations(newListOfConcversations);\r\n    } \r\n    else\r\n      setConversations((prevConversations) => [...prevConversations,AddMessage]);\r\n  };\r\n\r\n\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n    let parts = new Intl.DateTimeFormat('en', {\r\n    hc: 'h12',\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => \r\n    {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = \r\n    {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      image: info.imageName,\r\n    };\r\n\r\n    let AddMessage = \r\n    {...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n\r\n    socket.current.emit(\"send-message\", \r\n    {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n        showDetails,\r\n        setShowDetails,\r\n        UpdateConversation,\r\n        removedFromGroupFlag,\r\n        setRemovedFromGroupFlag\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}