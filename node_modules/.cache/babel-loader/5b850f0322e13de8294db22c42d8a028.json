{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\addgroupmember.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useUser } from '../contexts/userprovider';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { Button, Avatar, IconButton } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport '../css/addnew.css';\nimport { instanceOf } from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddGroupMember({\n  closeModal\n}) {\n  _s();\n\n  const [selectedContactsId, setSelectedContactsId] = useState([]);\n  const {\n    contacts,\n    info\n  } = useUser();\n  const {\n    UpdateConversation,\n    selectedConversation\n  } = useConversations();\n  const [conversationContacts, setConversationContacts] = useState([]);\n  useEffect(() => {\n    let ids = [];\n    console.log(selectedConversation);\n    selectedConversation.Participants.forEach(participant => {\n      ids.push(participant.id);\n    });\n    console.log(ids);\n    setConversationContacts(ids);\n  }, []);\n\n  function AddMember() {\n    let newParticipants = [];\n    newParticipants = [...newParticipants, selectedConversation.Participants];\n    let messages = [];\n    messages = [...messages, selectedConversation.messages];\n    let message = '';\n    contacts.forEach(contact => {\n      if (selectedContactsId.includes(contact.id)) {\n        newParticipants.push(contact);\n        message = {\n          name: \"manager\",\n          message: info.name + \"added\" + contact.name + \"to the group\",\n          timeSent: '',\n          containsImage: false,\n          containsRecord: false,\n          recordURL: null\n        };\n        messages.push(message);\n      }\n    });\n    let updatedConversation = { ...selectedConversation,\n      Participants: newParticipants,\n      messages: messages,\n      LastMessage: message\n    };\n    UpdateConversation(updatedConversation);\n    closeModal();\n  }\n\n  function handleCheckboxChange(contactId) {\n    if (selectedContactsId.includes(contactId)) {\n      setSelectedContactsId(prevSelectedContactsId => {\n        return prevSelectedContactsId.filter(id => id !== contactId);\n      });\n    } else {\n      setSelectedContactsId(prevSelectedContactsId => {\n        return [...prevSelectedContactsId, contactId];\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add_new\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add_new_group_border\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new_conversation new_group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: '1'\n          },\n          className: \"title_and_close\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"add_contact_title\",\n            style: {\n              marginLeft: '80px',\n              paddingRight: '0px'\n            },\n            children: \"Select Members:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            style: {\n              marginLeft: '40px'\n            },\n            className: \"close_add_new\",\n            onClick: () => closeModal(),\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            overflowY: 'overlay',\n            height: '200px'\n          },\n          children: contacts.map(contact => {\n            if (!conversationContacts.includes(contact.id)) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"contact_item\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  value: selectedContactsId.includes(contact.id),\n                  id: contact.id,\n                  onChange: () => handleCheckboxChange(contact.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 18\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  style: {\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                    width: '100%'\n                  },\n                  for: contact.id,\n                  children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                    style: {\n                      margin: '5px'\n                    },\n                    src: process.env.PUBLIC_URL + contact.imageName,\n                    fontSize: \"large\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 20\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    className: \"enter_phone\",\n                    style: {\n                      marginLeft: '10px',\n                      fontWeight: '400'\n                    },\n                    children: [contact.name, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 17\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add_new_button\",\n            type: \"submit\",\n            onClick: () => AddMember(),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddGroupMember, \"/Jbt9oQQRZ+IRByRzJkd7rGj4Dk=\", false, function () {\n  return [useUser, useConversations];\n});\n\n_c = AddGroupMember;\nexport default AddGroupMember;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddGroupMember\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/addgroupmember.js"],"names":["React","useState","useEffect","useUser","useConversations","Button","Avatar","IconButton","CloseIcon","instanceOf","AddGroupMember","closeModal","selectedContactsId","setSelectedContactsId","contacts","info","UpdateConversation","selectedConversation","conversationContacts","setConversationContacts","ids","console","log","Participants","forEach","participant","push","id","AddMember","newParticipants","messages","message","contact","includes","name","timeSent","containsImage","containsRecord","recordURL","updatedConversation","LastMessage","handleCheckboxChange","contactId","prevSelectedContactsId","filter","flex","marginLeft","paddingRight","overflowY","height","map","display","flexDirection","alignItems","width","margin","process","env","PUBLIC_URL","imageName","fontWeight","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState ,useEffect} from 'react'\r\nimport { useUser } from '../contexts/userprovider'\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport {Button,Avatar,IconButton} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport '../css/addnew.css'\r\nimport { instanceOf } from 'prop-types';\r\n\r\nfunction AddGroupMember({closeModal}) {\r\n\r\n    const [selectedContactsId, setSelectedContactsId] = useState([])\r\n    const { contacts,info } = useUser()\r\n    const {UpdateConversation,selectedConversation} = useConversations()\r\n    const [conversationContacts,setConversationContacts]=useState([])\r\n\r\n\r\n    useEffect(() =>\r\n    { \r\n        let ids=[]\r\n        console.log(selectedConversation)\r\n        selectedConversation.Participants.forEach((participant)=>\r\n        {\r\n           ids.push(participant.id)\r\n        }) \r\n        console.log(ids)\r\n        setConversationContacts(ids)\r\n    },[])\r\n\r\n    function AddMember()\r\n    {\r\n        let newParticipants= []\r\n        newParticipants=[...newParticipants,selectedConversation.Participants]\r\n        let messages=[]\r\n        messages=[...messages,selectedConversation.messages]\r\n        let message=''\r\n        contacts.forEach(contact=>\r\n        {\r\n            if(selectedContactsId.includes(contact.id))\r\n            {\r\n                newParticipants.push(contact)\r\n                message={name:\"manager\",message: info.name +\"added\" + contact.name + \"to the group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n                messages.push(message)\r\n            }\r\n\r\n        })\r\n\r\n\r\n\r\n        let updatedConversation={...selectedConversation,Participants:newParticipants,messages:messages,LastMessage:message}\r\n        UpdateConversation(updatedConversation)\r\n        closeModal()\r\n    }\r\n\r\n\r\n    function handleCheckboxChange(contactId) \r\n    {\r\n        if(selectedContactsId.includes(contactId))\r\n        {\r\n            setSelectedContactsId(prevSelectedContactsId =>\r\n            {\r\n                return (prevSelectedContactsId.filter(id=> id!==contactId))\r\n            } )\r\n        }\r\n  \r\n        else\r\n        {\r\n           setSelectedContactsId(prevSelectedContactsId=>\r\n            {\r\n              return [...prevSelectedContactsId,contactId]\r\n            })\r\n        }   \r\n    }\r\n\r\n    return (\r\n        <div className='add_new'>\r\n        <div className='add_new_group_border'>\r\n        <div className='new_conversation new_group'>\r\n              <div style={{flex:'1'}} className='title_and_close'>\r\n                  <h2 className='add_contact_title' style={{marginLeft:'80px',paddingRight:'0px'}}>Select Members:</h2> \r\n                  <IconButton style={{marginLeft:'40px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                    <CloseIcon fontSize='large' /> \r\n                  </IconButton>\r\n              </div>\r\n          <div style={{overflowY:'overlay',height:'200px'}}>\r\n          {contacts.map(contact =>\r\n            {\r\n             if(!(conversationContacts.includes(contact.id)))\r\n            {\r\n            return(\r\n                <div className='contact_item' >\r\n                 <input\r\n                type=\"checkbox\"\r\n                value={selectedContactsId.includes(contact.id)}\r\n                id={contact.id}\r\n                onChange={() => handleCheckboxChange(contact.id)}/>\r\n                <label style={{display:'flex',flexDirection:'row',alignItems:'center',width:'100%'}}for={contact.id} >\r\n                   <Avatar  style={{margin:'5px'}} src={process.env.PUBLIC_URL + contact.imageName}   fontSize='large'/>\r\n                    <h3 className='enter_phone' style={{marginLeft:'10px' ,fontWeight:'400'}}>{contact.name} </h3>\r\n                   </label>\r\n                 \r\n                </div>\r\n            )}}) }  \r\n            </div>\r\n            <div style={{display:'flex' , justifyContent:'center'}}>\r\n             <button className='add_new_button'  type=\"submit\" onClick={()=>AddMember()}>Add</button>\r\n             </div>\r\n\r\n             </div>\r\n             </div>\r\n             </div>\r\n    )\r\n}\r\n\r\nexport default AddGroupMember\r\n"]},"metadata":{},"sourceType":"module"}