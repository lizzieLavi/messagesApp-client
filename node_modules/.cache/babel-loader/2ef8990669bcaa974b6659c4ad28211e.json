{"ast":null,"code":"import _toConsumableArray from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useCallback,useRef}from\"react\";import{useState,useEffect}from\"react\";import{useUser}from\"./userprovider\";import{useSocket}from\"./socketprovider\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";var ConversationsContext=/*#__PURE__*/React.createContext();export function useConversations(){return useContext(ConversationsContext);}export function ConversationsProvider(_ref){var children=_ref.children;var _useUser=useUser(),contacts=_useUser.contacts,info=_useUser.info;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),conversations=_useState2[0],setConversations=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),selectedConversation=_useState4[0],setSelectedConversation=_useState4[1];var RefConversations=useRef(conversations);var currentConversationRef=useRef(selectedConversation);var _useSocket=useSocket(),socket=_useSocket.socket,ConnectedUsers=_useSocket.ConnectedUsers;var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),typingFlag=_useState6[0],setTypingFlag=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),currentConversationIsConnected=_useState8[0],setCurrentConversationIsConnected=_useState8[1];var config={headers:{\"x-access-token\":sessionStorage[\"config\"]}};var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),showDetails=_useState10[0],setShowDetails=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),removedFromGroupFlag=_useState12[0],setRemovedFromGroupFlag=_useState12[1];var audio=new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(socket.current==null)){_context3.next=2;break;}return _context3.abrupt(\"return\");case 2:socket.current.on('user-typing',function(_ref2){var user=_ref2.user,conversationId=_ref2.conversationId;if(selectedConversation){if(selectedConversation._id===conversationId){setTypingFlag(user.name);}}});socket.current.on('update-conversation',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:getConversations().then(function(res){return setConversations(res);});case 1:case\"end\":return _context.stop();}}},_callee);})));socket.current.on('removed-user',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:getConversations().then(function(res){setConversations(res);if(selectedConversation){var checkIfDeleted=res.filter(function(conversation){return conversation._id===selectedConversation._id;});if(checkIfDeleted.length===0)setRemovedFromGroupFlag(true);}});case 1:case\"end\":return _context2.stop();}}},_callee2);})));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return _fetchData.apply(this,arguments);}fetchData();},[selectedConversation]);useEffect(function(){function fetchData(){return _fetchData2.apply(this,arguments);}function _fetchData2(){_fetchData2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var response;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!selectedConversation){_context4.next=10;break;}if(selectedConversation.isGroup){_context4.next=10;break;}if(!ConnectedUsers.some(function(user){return user.userId===selectedConversation.Participants[0].id;})){_context4.next=6;break;}setCurrentConversationIsConnected('');_context4.next=10;break;case 6:_context4.next=8;return axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+selectedConversation.Participants[0].id,config);case 8:response=_context4.sent;setCurrentConversationIsConnected(response.data.LastSeen);case 10:case\"end\":return _context4.stop();}}},_callee4);}));return _fetchData2.apply(this,arguments);}fetchData();},[ConnectedUsers,setSelectedConversation]);useEffect(function(){function fetchData(){return _fetchData3.apply(this,arguments);}function _fetchData3(){_fetchData3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:getConversations().then(function(res){return setConversations(res);});case 1:case\"end\":return _context5.stop();}}},_callee5);}));return _fetchData3.apply(this,arguments);}fetchData();},[]);function getConversations(){return _getConversations.apply(this,arguments);}function _getConversations(){_getConversations=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(){var response,ConversationsList;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;_context7.next=3;return axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\"+sessionStorage[\"id\"],config);case 3:response=_context7.sent;ConversationsList=response.data.map(function(conversation){var UpdatedConversation=conversation;if(!conversation.isGroup&&conversation.Name===info.name)UpdatedConversation=_objectSpread(_objectSpread({},UpdatedConversation),{},{Name:conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image});if(selectedConversation){if(selectedConversation._id===UpdatedConversation._id)setSelectedConversation(UpdatedConversation);}return UpdatedConversation;});return _context7.abrupt(\"return\",ConversationsList);case 8:_context7.prev=8;_context7.t0=_context7[\"catch\"](0);console.log(_context7.t0);case 11:case\"end\":return _context7.stop();}}},_callee7,null,[[0,8]]);}));return _getConversations.apply(this,arguments);}function getSearchConverastions(_x){return _getSearchConverastions.apply(this,arguments);}function _getSearchConverastions(){_getSearchConverastions=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(str){return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:getConversations().then(function(res){var SearchResult=res.filter(function(conversation){return conversation.Name.includes(str)===true;});setConversations(SearchResult);});case 1:case\"end\":return _context8.stop();}}},_callee8);}));return _getSearchConverastions.apply(this,arguments);}function createConversation(_x2,_x3,_x4,_x5){return _createConversation.apply(this,arguments);}function _createConversation(){_createConversation=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(ids,name,image,groupFlag){var ConversationImage,isGroup,messages,lastMessage,ConversationExists,participants,createdDate,parts,data,response,newConversation,Response;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:ConversationImage=image;isGroup=groupFlag;messages=[];lastMessage='';//no participants chosen\nif(!(ids.length===0)){_context9.next=6;break;}return _context9.abrupt(\"return\",{status:'error',message:'no participants choosen'});case 6://check if conversation already exists and it's not a group\nConversationExists=null;if(ids.length===1&&!isGroup){ConversationExists=conversations.find(function(conversation){return conversation.Name===name;});}if(!ConversationExists){_context9.next=12;break;}setSelectedConversation(ConversationExists);//create new conversation\n_context9.next=45;break;case 12://get conversation participants\nparticipants=ids.map(function(id){var addContactToConversation=contacts.filter(function(contact){return id===contact.id;});return addContactToConversation[0];});//add creator to participants\nparticipants.push({id:info.id,name:info.name,phone:info.phone,imageName:info.imageName,LastSeen:info.LastSeen});createdDate='';//if group\nif(!isGroup){_context9.next=34;break;}parts=new Intl.DateTimeFormat('en',{hc:'h12',year:'numeric',month:'2-digit',day:'2-digit',hour:'numeric',minute:'numeric',timeZone:'Asia/Jerusalem'}).formatToParts(new Date()).reduce(function(acc,part){acc[part.type]=part.value;return acc;},Object.create(null));createdDate=\"\".concat(parts.day,\"/\").concat(parts.month,\"/\").concat(parts.year,\" \").concat(parts.hour,\":\").concat(parts.minute);lastMessage={name:\"manager\",message:info.name+\" created this group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null};messages.push(lastMessage);data=new FormData();data.append('file',ConversationImage);data.append(\"upload_preset\",\"whatsApp_clone\");data.append(\"cloud_name\",\"dsrgpqnyv\");_context9.prev=24;_context9.next=27;return axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data);case 27:response=_context9.sent;ConversationImage=response.data.url;_context9.next=34;break;case 31:_context9.prev=31;_context9.t0=_context9[\"catch\"](24);console.log(_context9.t0);case 34:newConversation={Name:name,creatorId:sessionStorage[\"id\"],Participants:participants,Messages:messages,LastMessage:lastMessage,ConversationImage:ConversationImage,isGroup:isGroup,createdDate:createdDate,description:\"Add Description\"};//updateDB\n_context9.prev=35;_context9.next=38;return axios.post(\"https://messagesapp1.herokuapp.com/api/conversations\",newConversation,config);case 38:Response=_context9.sent;if(Response.data.status===\"created\"){setSelectedConversation(Response.data.conversation);//show conversation only if messages sent or if its A group\nif(Response.data.conversation.Messages.length>0||Response.data.conversation.isGroup===true){setConversations(function(prevConversations){return[].concat(_toConsumableArray(prevConversations),[Response.data.conversation]);});socket.current.emit('conversation-changed',Response.data.conversation);}}_context9.next=45;break;case 42:_context9.prev=42;_context9.t1=_context9[\"catch\"](35);console.log(_context9.t1);case 45:case\"end\":return _context9.stop();}}},_callee9,null,[[24,31],[35,42]]);}));return _createConversation.apply(this,arguments);}function UpdateConversation(_x6){return _UpdateConversation.apply(this,arguments);}function _UpdateConversation(){_UpdateConversation=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(updatedConversation){var updateDBConv,addCurrentParticipant,participants,response,UpdatedConversations;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:updateDBConv=_objectSpread({},updatedConversation);if(!updatedConversation.LastMessage.message.includes('left')){addCurrentParticipant={id:info.id,phone:info.phone,name:info.name,image:info.imageName};participants=[].concat(_toConsumableArray(updatedConversation.Participants),[addCurrentParticipant]);updateDBConv=_objectSpread(_objectSpread({},updateDBConv),{},{Participants:participants});}delete updateDBConv._id;_context10.prev=3;_context10.next=6;return axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+selectedConversation._id,updateDBConv,config);case 6:response=_context10.sent;if(response.data.status==='Updated'){UpdatedConversations=[];if(!updatedConversation.LastMessage.message.includes('left')){setSelectedConversation(updatedConversation);conversations.forEach(function(conversation){if(conversation._id===updatedConversation._id)UpdatedConversations.push(updatedConversation);else UpdatedConversations.push(conversation);});}else{UpdatedConversations=conversations.filter(function(conversation){return conversation._id!==selectedConversation._id;});setSelectedConversation();}if(updatedConversation.LastMessage.message.includes('removed'))socket.current.emit('user-deleted',selectedConversation);else socket.current.emit('conversation-changed',selectedConversation);setConversations(UpdatedConversations);}_context10.next=13;break;case 10:_context10.prev=10;_context10.t0=_context10[\"catch\"](3);console.log(_context10.t0);case 13:case\"end\":return _context10.stop();}}},_callee10,null,[[3,10]]);}));return _UpdateConversation.apply(this,arguments);}var addMessageToConversation=useCallback(/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref5){var UpdatedConv,ConversationExists,newListOfConversations,newConversation;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:UpdatedConv=_ref5.UpdatedConv;audio.play();ConversationExists=false;newListOfConversations=RefConversations.current.map(function(conversation){if(conversation._id===UpdatedConv._id){ConversationExists=true;var newConv=_objectSpread(_objectSpread({},conversation),{},{Messages:UpdatedConv.Messages,LastMessage:UpdatedConv.LastMessage});if(currentConversationRef.current){if(currentConversationRef.current._id===UpdatedConv._id)setSelectedConversation(newConv);}return newConv;}else return conversation;});if(!ConversationExists){if(!UpdatedConv.isGroup){newConversation=_objectSpread(_objectSpread({},UpdatedConv),{},{Name:UpdatedConv.Participants[0].name,ConversationImage:UpdatedConv.Participants[0].imageName});setConversations(function(prevConversations){return[].concat(_toConsumableArray(prevConversations),[newConversation]);});}else setConversations(function(prevConversations){return[].concat(_toConsumableArray(prevConversations),[UpdatedConv]);});}else setConversations(newListOfConversations);case 5:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x7){return _ref6.apply(this,arguments);};}(),[setConversations]);useEffect(function(){if(socket.current==null)return;RefConversations.current=conversations;currentConversationRef.current=selectedConversation;socket.current.on(\"receive-message\",addMessageToConversation);return function(){return socket.current.off(\"receive-message\",addMessageToConversation);};},[conversations,selectedConversation]);var updateSenderConversation=function updateSenderConversation(AddMessage){var ConversationExists=false;setSelectedConversation(AddMessage);var newListOfConcversations=conversations.map(function(conversation){if(conversation._id===AddMessage._id){ConversationExists=true;return AddMessage;}else return conversation;});if(ConversationExists){setConversations(newListOfConcversations);}else setConversations(function(prevConversations){return[].concat(_toConsumableArray(prevConversations),[AddMessage]);});};function sendMessage(text,imageFlag,imageURL,recordURL){var parts=new Intl.DateTimeFormat('en',{hc:'h12',year:'numeric',month:'2-digit',day:'2-digit',hour:'numeric',minute:'numeric',timeZone:'Asia/Jerusalem'}).formatToParts(new Date()).reduce(function(acc,part){acc[part.type]=part.value;return acc;},Object.create(null));var time=\"\".concat(parts.day,\"/\").concat(parts.month,\"/\").concat(parts.year,\"  \").concat(parts.hour,\":\").concat(parts.minute);var recordFlag=false;if(recordURL!=null)recordFlag=true;var CurrentMessage={id:info.id,name:info.name,message:text,timeSent:time,containsImage:imageFlag,containsRecord:recordFlag,recordURL:recordURL};if(imageFlag===true)CurrentMessage=_objectSpread(_objectSpread({},CurrentMessage),{},{imageURL:imageURL});var sender={id:info.id,phone:info.phone,name:info.name,image:info.imageName};var AddMessage=_objectSpread(_objectSpread({},selectedConversation),{},{Messages:[].concat(_toConsumableArray(selectedConversation.Messages),[CurrentMessage]),LastMessage:CurrentMessage});socket.current.emit(\"send-message\",{sender:sender,UpdatedConversation:AddMessage,conversationId:selectedConversation._id});updateSenderConversation(AddMessage);}return/*#__PURE__*/_jsx(ConversationsContext.Provider,{value:{sendMessage:sendMessage,conversations:conversations,createConversation:createConversation,setConversations:setConversations,setSelectedConversation:setSelectedConversation,selectedConversation:selectedConversation,currentConversationIsConnected:currentConversationIsConnected,typingFlag:typingFlag,setTypingFlag:setTypingFlag,getSearchConverastions:getSearchConverastions,showDetails:showDetails,setShowDetails:setShowDetails,UpdateConversation:UpdateConversation,removedFromGroupFlag:removedFromGroupFlag,setRemovedFromGroupFlag:setRemovedFromGroupFlag},children:children});}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useRef","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","RefConversations","currentConversationRef","socket","ConnectedUsers","typingFlag","setTypingFlag","currentConversationIsConnected","setCurrentConversationIsConnected","config","headers","sessionStorage","showDetails","setShowDetails","removedFromGroupFlag","setRemovedFromGroupFlag","audio","Audio","fetchData","current","on","user","conversationId","_id","name","getConversations","then","res","checkIfDeleted","filter","conversation","length","isGroup","some","userId","Participants","id","get","response","data","LastSeen","ConversationsList","map","UpdatedConversation","Name","ConversationImage","image","console","log","getSearchConverastions","str","SearchResult","includes","createConversation","ids","groupFlag","messages","lastMessage","status","message","ConversationExists","find","participants","addContactToConversation","contact","push","phone","imageName","createdDate","parts","Intl","DateTimeFormat","hc","year","month","day","hour","minute","timeZone","formatToParts","Date","reduce","acc","part","type","value","Object","create","timeSent","containsImage","containsRecord","recordURL","FormData","append","post","url","newConversation","creatorId","Messages","LastMessage","description","Response","prevConversations","emit","UpdateConversation","updatedConversation","updateDBConv","addCurrentParticipant","put","UpdatedConversations","forEach","addMessageToConversation","UpdatedConv","play","newListOfConversations","newConv","off","updateSenderConversation","AddMessage","newListOfConcversations","sendMessage","text","imageFlag","imageURL","time","recordFlag","CurrentMessage","sender"],"mappings":"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","sourcesContent":["import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() \r\n{\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({children }) \r\n{\r\n\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const { socket, ConnectedUsers } = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n  const [showDetails,setShowDetails] =useState(false)\r\n  const [removedFromGroupFlag,setRemovedFromGroupFlag] = useState(false)\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n\r\n\r\n  useEffect(()=>\r\n  {\r\n\r\n    async function fetchData() {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === conversationId)\r\n          {\r\n             setTypingFlag(user.name)\r\n          }\r\n        }\r\n    })\r\n\r\n    socket.current.on('update-conversation',async ()=>\r\n    {\r\n    \r\n      getConversations().then(res=> setConversations(res))\r\n    \r\n    })\r\n\r\n    socket.current.on('removed-user',async ()=>\r\n    {\r\n    \r\n      getConversations().then(res=> \r\n      {\r\n        setConversations(res)\r\n        if(selectedConversation)\r\n        {\r\n          let checkIfDeleted=res.filter(conversation=> conversation._id === selectedConversation._id)\r\n          if(checkIfDeleted.length === 0 ) \r\n            setRemovedFromGroupFlag(true)\r\n\r\n        }\r\n\r\n      })\r\n    \r\n    })\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[selectedConversation])\r\n\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() {\r\n\r\n    if(selectedConversation)\r\n    {\r\n    if(!selectedConversation.isGroup)\r\n     {\r\n      if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n      {\r\n        setCurrentConversationIsConnected('')\r\n      }\r\n      else\r\n      {\r\n        let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n        setCurrentConversationIsConnected(response.data.LastSeen)\r\n      }\r\n     }\r\n    }\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,setSelectedConversation])\r\n\r\n  useEffect(() =>\r\n  {\r\n    async function fetchData() {\r\n     getConversations().then(res=> setConversations(res))\r\n    }\r\n    fetchData();\r\n    \r\n  }, []);\r\n\r\n  async function getConversations()\r\n  {\r\n\r\n    try\r\n    {\r\n      let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n      let ConversationsList = response.data.map((conversation) =>\r\n      {\r\n        let UpdatedConversation= conversation\r\n        if (!conversation.isGroup && conversation.Name === info.name)\r\n          UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === UpdatedConversation._id)\r\n            setSelectedConversation(UpdatedConversation)\r\n\r\n        }\r\n          \r\n         return UpdatedConversation;\r\n\r\n      })\r\n\r\n      return ConversationsList \r\n\r\n    } catch (err) {console.log(err);}\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  async function getSearchConverastions(str)\r\n  {\r\n    getConversations().then(res=>\r\n    {\r\n      let SearchResult = res.filter(conversation=> \r\n      conversation.Name.includes(str) ===true)\r\n      setConversations(SearchResult)\r\n    })\r\n\r\n  }\r\n        \r\n\r\n  async function createConversation(ids, name, image,groupFlag)\r\n  {\r\n\r\n    let ConversationImage = image;\r\n    let isGroup = groupFlag;\r\n    let messages = []\r\n    let lastMessage=''\r\n\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      return {status:'error',message:'no participants choosen'};\r\n    }\r\n\r\n    //check if conversation already exists and it's not a group\r\n    let ConversationExists = null;\r\n    if (ids.length === 1 && !isGroup) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => \r\n      {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      let createdDate=''\r\n\r\n      //if group\r\n      if (isGroup) \r\n      {\r\n        let parts = new Intl.DateTimeFormat('en', {\r\n          hc: 'h12',\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          timeZone:'Asia/Jerusalem'})\r\n        .formatToParts(new Date())\r\n        .reduce((acc, part) => {\r\n          acc[part.type] = part.value;\r\n          return acc;\r\n        }, Object.create(null));\r\n\r\n        createdDate= `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}`;\r\n\r\n        lastMessage={name:\"manager\",message: info.name +\" created this group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n        messages.push(lastMessage)\r\n\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n          ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      }\r\n    \r\n      let newConversation = \r\n      {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: messages,\r\n        LastMessage:lastMessage,\r\n        ConversationImage: ConversationImage,\r\n        isGroup:isGroup,\r\n        createdDate:createdDate,\r\n        description: \"Add Description\",\r\n      };\r\n\r\n      //updateDB\r\n      try \r\n      {\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n\r\n        if (Response.data.status === \"created\") \r\n        {\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent or if its A group\r\n          if (Response.data.conversation.Messages.length > 0  || Response.data.conversation.isGroup === true)\r\n          {\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n            socket.current.emit('conversation-changed',Response.data.conversation)\r\n          }\r\n        }\r\n      }catch (err) {console.log(err);}\r\n    }\r\n  }\r\n\r\n  async function UpdateConversation(updatedConversation)\r\n  {\r\n\r\n    let updateDBConv={...updatedConversation}\r\n    if(!(updatedConversation.LastMessage.message.includes('left')))\r\n    {\r\n      let addCurrentParticipant= {id: info.id,phone: info.phone,name: info.name,image: info.imageName,}\r\n      let participants=[...updatedConversation.Participants,addCurrentParticipant]\r\n      updateDBConv={...updateDBConv,Participants:participants}\r\n    }\r\n\r\n    delete updateDBConv._id\r\n\r\n\r\n    try\r\n    {\r\n      let response=await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+ selectedConversation._id,updateDBConv,config)\r\n      if(response.data.status==='Updated')\r\n      {\r\n        let UpdatedConversations=[]\r\n        if(!(updatedConversation.LastMessage.message.includes('left')))\r\n        {\r\n          setSelectedConversation(updatedConversation)\r\n          conversations.forEach(conversation=>\r\n          { \r\n            if(conversation._id===updatedConversation._id)    \r\n              UpdatedConversations.push(updatedConversation)\r\n            else UpdatedConversations.push(conversation)\r\n\r\n          })\r\n        }\r\n        else\r\n        {\r\n          UpdatedConversations=conversations.filter(conversation=> conversation._id !== selectedConversation._id)\r\n          setSelectedConversation()\r\n        }\r\n\r\n        if(updatedConversation.LastMessage.message.includes('removed'))\r\n          socket.current.emit('user-deleted',selectedConversation)\r\n        else\r\n          socket.current.emit('conversation-changed',selectedConversation)\r\n\r\n        setConversations(UpdatedConversations)\r\n              \r\n      }\r\n    }catch(err){console.log(err)}\r\n  }\r\n\r\n\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n  {\r\n    audio.play()\r\n\r\n    let ConversationExists = false;\r\n    let newListOfConversations = RefConversations.current.map((conversation) =>\r\n    {\r\n      if (conversation._id === UpdatedConv._id) \r\n      {\r\n        ConversationExists = true;\r\n        let newConv = \r\n        { ...conversation,\r\n          Messages: UpdatedConv.Messages,\r\n          LastMessage: UpdatedConv.LastMessage,};\r\n          if (currentConversationRef.current) \r\n          {\r\n           if (currentConversationRef.current._id === UpdatedConv._id)\r\n             setSelectedConversation(newConv);\r\n          }\r\n\r\n        return newConv;\r\n\r\n      }\r\n      else return conversation;\r\n    });\r\n\r\n\r\n    if (!ConversationExists) \r\n    {\r\n      if (!UpdatedConv.isGroup)\r\n      {\r\n        let newConversation = \r\n        { ...UpdatedConv,\r\n        Name: UpdatedConv.Participants[0].name,\r\n        ConversationImage: UpdatedConv.Participants[0].imageName,\r\n        };\r\n\r\n        setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n      } \r\n      else\r\n        setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n    } \r\n    else setConversations(newListOfConversations);\r\n  },[setConversations]);\r\n\r\n  useEffect(() => \r\n  {\r\n\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  },[conversations, selectedConversation]);\r\n\r\n\r\n  const updateSenderConversation = (AddMessage) => \r\n  {\r\n\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => \r\n    {\r\n      if (conversation._id === AddMessage._id) \r\n      {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } \r\n      else return conversation;\r\n\r\n    });\r\n\r\n    if (ConversationExists) \r\n    {\r\n      setConversations(newListOfConcversations);\r\n    } \r\n    else\r\n      setConversations((prevConversations) => [...prevConversations,AddMessage]);\r\n  };\r\n\r\n\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n    let parts = new Intl.DateTimeFormat('en', {\r\n    hc: 'h12',\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => \r\n    {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = \r\n    {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      image: info.imageName,\r\n    };\r\n\r\n    let AddMessage = \r\n    {...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n\r\n    socket.current.emit(\"send-message\", \r\n    {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n        showDetails,\r\n        setShowDetails,\r\n        UpdateConversation,\r\n        removedFromGroupFlag,\r\n        setRemovedFromGroupFlag\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}