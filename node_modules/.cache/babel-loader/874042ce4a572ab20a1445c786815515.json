{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\userprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/React.createContext();\nexport function useUser() {\n  _s();\n\n  return useContext(UserContext);\n}\n\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function UserProvider({\n  children\n}) {\n  _s2();\n\n  const [contacts, setContacts] = useState([]);\n  const [info, setInfo] = useState({});\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      getContacts().then(res => setContacts(res));\n    }\n\n    fetchData();\n  }, [setInfo]);\n\n  async function getContacts() {\n    const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'], config);\n    setInfo({\n      id: response.data._id,\n      name: response.data.name,\n      phone: response.data.phone,\n      imageName: response.data.imageName,\n      LastSeen: response.data.LastSeen\n    });\n    return response.data.contacts;\n  }\n\n  function getSearchContacts(str) {\n    getContacts().then(res => {\n      let SearchResult = res.filter(contact => contact.name.includes(str) === true);\n      setContacts(SearchResult);\n    });\n  }\n\n  const createContact = async phone => {\n    let error = '';\n\n    if (phone === info.phone) {\n      console.log('cant Add yourself');\n      error = 'cant Add yourself';\n      return {\n        status: 'error',\n        message: 'cant Add yourself'\n      };\n    }\n\n    let checkIfExists = contacts.filter(contact => contact.phone === phone);\n\n    if (checkIfExists.length !== 0) {\n      console.log('already exists');\n      error = 'already exists';\n      return {\n        status: 'error',\n        message: 'already exists'\n      };\n    }\n\n    try {\n      const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByPhone/\" + phone, config);\n      console.log(response);\n\n      if (response.data !== 'no such user') {\n        const contact = {\n          id: response.data._id,\n          phone: response.data.phone,\n          name: response.data.name,\n          imageName: response.data.imageName\n        };\n        let newContacts = [...contacts, contact];\n        setContacts(newContacts);\n        let UpdatedUser = { ...info,\n          contacts: newContacts\n        };\n\n        try {\n          await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'], UpdatedUser, {\n            'headers': {\n              'x-access-token': sessionStorage['config']\n            }\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      } else return {\n        status: 'error',\n        message: 'user doesnt exist'\n      };\n    } catch (err) {\n      console.log(err);\n    }\n\n    return {\n      status: 'ok'\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      setContacts,\n      setInfo,\n      info,\n      config,\n      contacts,\n      createContact,\n      getSearchContacts\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(UserProvider, \"BbaLHlxgi5RGw869lLIJyETlQgw=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/userprovider.js"],"names":["React","useState","useEffect","useContext","axios","UserContext","createContext","useUser","UserProvider","children","contacts","setContacts","info","setInfo","config","sessionStorage","fetchData","getContacts","then","res","response","get","id","data","_id","name","phone","imageName","LastSeen","getSearchContacts","str","SearchResult","filter","contact","includes","createContact","error","console","log","status","message","checkIfExists","length","newContacts","UpdatedUser","put","err"],"mappings":";;;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACxB,SAAOJ,UAAU,CAACE,WAAD,CAAjB;AACD;;GAFeE,O;;AAIhB,OAAQ,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EACR;AAAA;;AACE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,IAAD,EAAMC,OAAN,IAAgBZ,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAMa,MAAM,GAAE;AAAC,eAAW;AAAC,wBAAiBC,cAAc,CAAC,QAAD;AAAhC;AAAZ,GAAd;AAICb,EAAAA,SAAS,CAAE,MACX;AACC,mBAAec,SAAf,GAA2B;AAE3BC,MAAAA,WAAW,GAAGC,IAAd,CAAmBC,GAAG,IAAGR,WAAW,CAACQ,GAAD,CAApC;AACC;;AAEDH,IAAAA,SAAS;AAET,GATQ,EASP,CAACH,OAAD,CATO,CAAT;;AAWA,iBAAeI,WAAf,GACA;AACC,UAAMG,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAU,kDAAgDN,cAAc,CAAC,IAAD,CAAxE,EAA+ED,MAA/E,CAAvB;AACAD,IAAAA,OAAO,CAAC;AAACS,MAAAA,EAAE,EAACF,QAAQ,CAACG,IAAT,CAAcC,GAAlB;AAAsBC,MAAAA,IAAI,EAACL,QAAQ,CAACG,IAAT,CAAcE,IAAzC;AAA8CC,MAAAA,KAAK,EAACN,QAAQ,CAACG,IAAT,CAAcG,KAAlE;AAAwEC,MAAAA,SAAS,EAACP,QAAQ,CAACG,IAAT,CAAcI,SAAhG;AAA0GC,MAAAA,QAAQ,EAACR,QAAQ,CAACG,IAAT,CAAcK;AAAjI,KAAD,CAAP;AACA,WAAOR,QAAQ,CAACG,IAAT,CAAcb,QAArB;AAEA;;AAGF,WAASmB,iBAAT,CAA2BC,GAA3B,EACA;AACEb,IAAAA,WAAW,GAAGC,IAAd,CAAmBC,GAAG,IACpB;AACE,UAAIY,YAAY,GAAEZ,GAAG,CAACa,MAAJ,CAAWC,OAAO,IAAGA,OAAO,CAACR,IAAR,CAAaS,QAAb,CAAsBJ,GAAtB,MAA+B,IAApD,CAAlB;AACAnB,MAAAA,WAAW,CAACoB,YAAD,CAAX;AACD,KAJH;AAKD;;AAGD,QAAMI,aAAa,GAAG,MAAMT,KAAN,IACtB;AAEE,QAAIU,KAAK,GAAC,EAAV;;AAEA,QAAGV,KAAK,KAAKd,IAAI,CAACc,KAAlB,EACA;AACEW,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAF,MAAAA,KAAK,GAAE,mBAAP;AACC,aAAO;AAACG,QAAAA,MAAM,EAAC,OAAR;AAAgBC,QAAAA,OAAO,EAAC;AAAxB,OAAP;AACF;;AAED,QAAIC,aAAa,GAAG/B,QAAQ,CAACsB,MAAT,CAAgBC,OAAO,IAAGA,OAAO,CAACP,KAAR,KAAkBA,KAA5C,CAApB;;AAEA,QAAGe,aAAa,CAACC,MAAd,KAAyB,CAA5B,EACA;AACEL,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAF,MAAAA,KAAK,GAAC,gBAAN;AACA,aAAO;AAACG,QAAAA,MAAM,EAAC,OAAR;AAAgBC,QAAAA,OAAO,EAAC;AAAxB,OAAP;AACD;;AAED,QAAG;AAED,YAAMpB,QAAQ,GAAE,MAAMhB,KAAK,CAACiB,GAAN,CAAU,6DAA6DK,KAAvE,EAA6EZ,MAA7E,CAAtB;AACAuB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;;AACA,UAAGA,QAAQ,CAACG,IAAT,KAAkB,cAArB,EACA;AACC,cAAMU,OAAO,GAAG;AAACX,UAAAA,EAAE,EAACF,QAAQ,CAACG,IAAT,CAAcC,GAAlB;AAAsBE,UAAAA,KAAK,EAACN,QAAQ,CAACG,IAAT,CAAcG,KAA1C;AAAgDD,UAAAA,IAAI,EAACL,QAAQ,CAACG,IAAT,CAAcE,IAAnE;AAAwEE,UAAAA,SAAS,EAACP,QAAQ,CAACG,IAAT,CAAcI;AAAhG,SAAhB;AACA,YAAIgB,WAAW,GAAG,CAAC,GAAGjC,QAAJ,EAAauB,OAAb,CAAlB;AACAtB,QAAAA,WAAW,CAACgC,WAAD,CAAX;AACA,YAAIC,WAAW,GAAC,EAAC,GAAGhC,IAAJ;AAASF,UAAAA,QAAQ,EAACiC;AAAlB,SAAhB;;AACA,YAAG;AACD,gBAAMvC,KAAK,CAACyC,GAAN,CAAU,kDAAkD9B,cAAc,CAAC,IAAD,CAA1E,EAAiF6B,WAAjF,EAA6F;AAAC,uBAAW;AAAC,gCAAiB7B,cAAc,CAAC,QAAD;AAAhC;AAAZ,WAA7F,CAAN;AACD,SAFD,CAEE,OAAM+B,GAAN,EAAU;AAACT,UAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAAiB;AAC9B,OATD,MAUK,OAAO;AAACP,QAAAA,MAAM,EAAC,OAAR;AAAgBC,QAAAA,OAAO,EAAC;AAAxB,OAAP;AAEN,KAhBD,CAgBE,OAAMM,GAAN,EAAU;AAACT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAAiB;;AAE9B,WAAO;AAACP,MAAAA,MAAM,EAAC;AAAR,KAAP;AACD,GAxCD;;AA4CA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAC5B,MAAAA,WAAD;AAAaE,MAAAA,OAAb;AAAqBD,MAAAA,IAArB;AAA0BE,MAAAA,MAA1B;AAAiCJ,MAAAA,QAAjC;AAA0CyB,MAAAA,aAA1C;AAAwDN,MAAAA;AAAxD,KAA7B;AAAA,cACGpB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAvFgBD,Y;;KAAAA,Y","sourcesContent":["\r\nimport React, { useState ,useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n\r\n\r\n  \r\n   useEffect( () =>\r\n   {\r\n    async function fetchData() {\r\n\r\n    getContacts().then(res=> setContacts(res))\r\n    }\r\n\r\n    fetchData();\r\n\r\n   },[setInfo])\r\n\r\n   async function getContacts()\r\n   {\r\n    const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+sessionStorage['id'],config);\r\n    setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen})\r\n    return(response.data.contacts)\r\n\r\n   }\r\n   \r\n\r\n  function getSearchContacts(str)\r\n  {\r\n    getContacts().then(res=>\r\n      {\r\n        let SearchResult =res.filter(contact=> contact.name.includes(str) === true)\r\n        setContacts(SearchResult)\r\n      })\r\n  }\r\n\r\n\r\n  const createContact = async(phone) =>\r\n  {\r\n\r\n    let error=''\r\n\r\n    if(phone === info.phone)\r\n    {\r\n      console.log('cant Add yourself')\r\n      error ='cant Add yourself'\r\n       return {status:'error',message:'cant Add yourself'};\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.phone === phone)\r\n\r\n    if(checkIfExists.length !== 0)\r\n    {\r\n      console.log('already exists')\r\n      error='already exists'\r\n      return {status:'error',message:'already exists'};\r\n    }\r\n\r\n    try{ \r\n\r\n      const response= await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByPhone/\" + phone,config)\r\n      console.log(response)\r\n      if(response.data !== 'no such user')\r\n      {\r\n       const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName}\r\n       let newContacts = [...contacts,contact]\r\n       setContacts(newContacts)\r\n       let UpdatedUser={...info,contacts:newContacts}\r\n       try{\r\n         await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n       } catch(err){console.log(err)}\r\n      }\r\n      else return {status:'error',message:'user doesnt exist'};\r\n     \r\n    } catch(err){console.log(err)}\r\n\r\n    return {status:'ok'}\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact,getSearchContacts }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}