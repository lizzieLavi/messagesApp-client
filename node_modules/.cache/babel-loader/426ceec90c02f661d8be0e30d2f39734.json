{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useUser } from './userprovider';\nimport { useSocket } from './socketprovider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const socket = useSocket();\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  useEffect(async () => {\n    try {\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\" + sessionStorage['id'], config);\n      let ConversationsList = response.data.map(conversation => {\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage['name']) {\n          let UpdatedNameConversation = conversation;\n          UpdatedNameConversation = { ...UpdatedNameConversation,\n            Name: conversation.Participants[0].name\n          };\n          return UpdatedNameConversation;\n        } else return conversation;\n      });\n      /*  if(ConversationsList.length>0)\r\n         setSelectedConversation(ConversationsList[0])*/\n\n      setConversations(ConversationsList);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (socket.current == null) return;\n    console.log(socket.current.id);\n    socket.current.on('receive-message', addMessageToConversation); // return () => socket.current.off('receive-message')\n  }, []);\n\n  async function createConversation(ids, name, image) {\n    let ConversationImage = image;\n    let isGroup = false;\n\n    if (ids.length == 0) {\n      console.log('no participants choosen');\n      return;\n    }\n\n    const participants = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n    let ConversationExists = null;\n\n    if (ids.length == 1) {\n      ConversationExists = conversations.filter(conversation => conversation.Name == name);\n    }\n\n    if (ConversationExists.length == 1) setSelectedConversation(ConversationExists[0]);else {\n      participants.push({\n        id: info.id,\n        name: info.name,\n        phone: info.phone,\n        image: info.ProfilePic\n      });\n\n      if (ids.length > 1) {\n        const formData = new FormData();\n        formData.append('file', ConversationImage);\n        const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\", formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        const {\n          fileName,\n          filePath\n        } = fileResponse.data;\n        ConversationImage = 'uploads/' + fileName;\n        isGroup = true;\n      }\n\n      let newConversation = {\n        Name: name,\n        creatorId: sessionStorage['id'],\n        Participants: participants,\n        Messages: [],\n        LastMessage: {\n          id: '',\n          sender: '',\n          message: ''\n        },\n        ConversationImage: ConversationImage,\n        isGroup\n      }; //updateDB\n\n      try {\n        let Response = await axios.post(\"http://localhost:5000/api/conversations\", newConversation, config);\n\n        if (Response.data.status == \"created\") {\n          if (Response.data.conversation.Name == sessionStorage['name']) {\n            let UpdatedNameConversation = Response.data.conversation;\n            UpdatedNameConversation = { ...UpdatedNameConversation,\n              Name: Response.data.conversation.Participants[0].name,\n              ConversationImage: Response.data.conversation.Participants[0].image\n            };\n            setSelectedConversation(UpdatedNameConversation);\n            if (UpdatedNameConversation.Messages.length > 0) setConversations(prevConversations => {\n              return [...prevConversations, Response.data.conversation];\n            });\n          } else {\n            setSelectedConversation(Response.data.conversation);\n            if (Response.data.conversation.Messages.length > 0) setConversations(prevConversations => {\n              return [...prevConversations, Response.data.conversation];\n            });\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n\n  const addMessageToConversation = useCallback(async ({\n    updatedConversations\n  }) => {\n    console.log(updatedConversations);\n    setConversations(() => {\n      let ConversationsList = updatedConversations.map(conversation => {\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage['name']) {\n          let UpdatedNameConversation = conversation;\n          UpdatedNameConversation = { ...UpdatedNameConversation,\n            Name: conversation.Participants[0].name,\n            ConversationImage: conversation.Participants[0].image\n          };\n\n          if (selectedConversation) {\n            console.log(selectedConversation);\n            if (conversation._id == selectedConversation._id) setSelectedConversation(UpdatedNameConversation);\n          }\n\n          return UpdatedNameConversation;\n        } else {\n          if (selectedConversation) {\n            console.log(selectedConversation);\n            if (conversation._id == selectedConversation._id) setSelectedConversation(conversation);\n          }\n\n          return conversation;\n        }\n      });\n      return ConversationsList;\n    });\n  }, [setConversations, selectedConversation, setSelectedConversation]);\n\n  function sendMessage(text) {\n    let senderParticipant = {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    };\n    let CurrentMessage = {\n      id: sessionStorage['id'],\n      name: info.name,\n      message: text\n    };\n    let SendToContactsConversation = {\n      Name: selectedConversation.Name,\n      creatorId: selectedConversation.creatorId,\n      Participants: selectedConversation.Participants,\n      Messages: [...selectedConversation.Messages, CurrentMessage],\n      LastMessage: CurrentMessage,\n      ConversationImage: selectedConversation.ConversationImage,\n      isGroup: selectedConversation.isGroup\n    };\n    socket.current.emit('send-message', {\n      Conversation: SendToContactsConversation,\n      id: selectedConversation._id,\n      senderParticipant: senderParticipant\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"yquEEqjmQbhFHYH6alVgwb9VVkc=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","createGroupFlag","setCreateGroupFlag","socket","config","sessionStorage","response","get","ConversationsList","data","map","conversation","Participants","length","Name","UpdatedNameConversation","name","err","console","log","current","on","addMessageToConversation","createConversation","ids","image","ConversationImage","isGroup","participants","addContactToConversation","filter","contact","ConversationExists","push","phone","ProfilePic","formData","FormData","append","fileResponse","post","headers","fileName","filePath","newConversation","creatorId","Messages","LastMessage","sender","message","Response","status","prevConversations","updatedConversations","_id","sendMessage","text","senderParticipant","CurrentMessage","SendToContactsConversation","emit","Conversation"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useUser } from './userprovider'\r\nimport { useSocket } from './socketprovider'\r\nimport axios from 'axios'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts,info} = useUser()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversation,setSelectedConversation] = useState()\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const socket = useSocket()\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}};\r\n\r\n  useEffect(async () =>\r\n  {\r\n\r\n    try\r\n    {\r\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\"+sessionStorage['id'],config)\r\n      let ConversationsList =  response.data.map(conversation=>\r\n      {\r\n        if(conversation.Participants.length == 1 && conversation.Name == sessionStorage['name'] )\r\n        {\r\n          let UpdatedNameConversation = conversation\r\n          UpdatedNameConversation= {...UpdatedNameConversation,Name:conversation.Participants[0].name}\r\n  \r\n          return UpdatedNameConversation\r\n        }\r\n  \r\n        else return conversation\r\n          \r\n      })\r\n   /*  if(ConversationsList.length>0)\r\n      setSelectedConversation(ConversationsList[0])*/\r\n        \r\n      setConversations(ConversationsList)\r\n  \r\n     }catch(err){console.log(err)}\r\n\r\n     if (socket.current == null) return\r\n\r\n     console.log(socket.current.id)\r\n\r\n     socket.current.on('receive-message', addMessageToConversation)\r\n \r\n    // return () => socket.current.off('receive-message')\r\n\r\n  },[]) \r\n\r\nasync function createConversation(ids,name,image) \r\n  {\r\n\r\n    let  ConversationImage= image\r\n    let isGroup = false\r\n    if(ids.length == 0)\r\n    {\r\n     console.log('no participants choosen')\r\n     return;\r\n    }\r\n\r\n     const participants =ids.map(id=>\r\n    { \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n    let ConversationExists = null\r\n    if(ids.length == 1)\r\n    {\r\n      ConversationExists = conversations.filter(conversation => conversation.Name ==name)\r\n    }\r\n\r\n    if(ConversationExists.length == 1)\r\n      setSelectedConversation(ConversationExists[0])\r\n    \r\n    else{\r\n    participants.push({id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic})\r\n    \r\n    if(ids.length > 1)\r\n    {\r\n      const formData= new FormData();\r\n      formData.append('file',ConversationImage)\r\n      const fileResponse =await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\",formData,{headers: {\r\n      'Content-Type': 'multipart/form-data'}})\r\n      const {fileName,filePath} =fileResponse.data\r\n      ConversationImage='uploads/'+fileName\r\n      isGroup = true\r\n    }\r\n\r\n    let newConversation = {Name:name,creatorId: sessionStorage['id'],Participants:participants,Messages:[],LastMessage:{id:'',sender:'',message:''},ConversationImage:ConversationImage,isGroup}\r\n   \r\n\r\n\r\n\r\n    //updateDB\r\n   \r\n    try{\r\n       let Response = await axios.post(\"http://localhost:5000/api/conversations\",newConversation,config)\r\n       if(Response.data.status == \"created\")\r\n       {\r\n        if(Response.data.conversation.Name == sessionStorage['name'] )\r\n        {\r\n          let UpdatedNameConversation = Response.data.conversation\r\n          UpdatedNameConversation= {...UpdatedNameConversation,Name:Response.data.conversation.Participants[0].name,ConversationImage:Response.data.conversation.Participants[0].image}\r\n          setSelectedConversation(UpdatedNameConversation)\r\n\r\n          if(UpdatedNameConversation.Messages.length >0)\r\n           setConversations(prevConversations => { return [...prevConversations, Response.data.conversation]})\r\n        }\r\n        else\r\n        { \r\n          setSelectedConversation(Response.data.conversation)\r\n          if(Response.data.conversation.Messages.length>0)\r\n           setConversations(prevConversations => { return [...prevConversations, Response.data.conversation]})\r\n        }\r\n       }\r\n    } catch(err){console.log(err)}\r\n    \r\n   }\r\n  }\r\n\r\n\r\n\r\nconst addMessageToConversation = useCallback(async({updatedConversations}) =>\r\n{\r\n    console.log(updatedConversations)\r\n    setConversations(()=>\r\n    {\r\n      let ConversationsList =  updatedConversations.map(conversation=>\r\n        {\r\n       \r\n\r\n          if(conversation.Participants.length == 1 && conversation.Name == sessionStorage['name'] )\r\n          {\r\n            let UpdatedNameConversation = conversation\r\n            UpdatedNameConversation= {...UpdatedNameConversation,Name:conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n            if(selectedConversation)\r\n            {\r\n              console.log(selectedConversation)\r\n              if(conversation._id == selectedConversation._id)\r\n                setSelectedConversation(UpdatedNameConversation)\r\n            }\r\n    \r\n            return UpdatedNameConversation\r\n          }\r\n    \r\n          else \r\n          {\r\n            if(selectedConversation)\r\n            {\r\n              console.log(selectedConversation)\r\n              if(conversation._id == selectedConversation._id)\r\n                setSelectedConversation(conversation)\r\n            }\r\n\r\n            return conversation  \r\n          } \r\n        })\r\n\r\n        return ConversationsList \r\n      \r\n    })\r\n  \r\n}, [setConversations,selectedConversation,setSelectedConversation])\r\n\r\n\r\n  function sendMessage(text) \r\n  {\r\n    let senderParticipant = {id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}\r\n    let CurrentMessage ={ id: sessionStorage['id'], name: info.name,message: text}\r\n     let SendToContactsConversation = {Name:selectedConversation.Name,creatorId:selectedConversation.creatorId,Participants: selectedConversation.Participants,Messages: [...selectedConversation.Messages,CurrentMessage] \r\n    ,LastMessage:CurrentMessage,ConversationImage:selectedConversation.ConversationImage,isGroup:selectedConversation.isGroup}\r\n    socket.current.emit('send-message', {Conversation:SendToContactsConversation,id:selectedConversation._id,senderParticipant:senderParticipant})\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversation}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}