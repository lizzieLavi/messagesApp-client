{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useUser } from './userprovider';\nimport { useSocket } from './socketprovider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const socket = useSocket();\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  useEffect(async () => {\n    try {\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\" + sessionStorage['id'], config);\n      let ConversationsList = response.data.map(conversation => {\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage['name']) {\n          let UpdatedNameConversation = conversation;\n          UpdatedNameConversation = { ...UpdatedNameConversation,\n            Name: conversation.Participants[0].name\n          };\n          return UpdatedNameConversation;\n        } else return conversation;\n      });\n      /*  if(ConversationsList.length>0)\r\n         setSelectedConversation(ConversationsList[0])*/\n\n      setConversations(ConversationsList);\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  async function createConversation(ids, name, image) {\n    let ConversationImage = image;\n    let isGroup = false;\n\n    if (ids.length == 0) {\n      console.log('no participants choosen');\n      return;\n    }\n\n    const participants = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n\n    if (ids.length > 1) {\n      const formData = new FormData();\n      formData.append('file', ConversationImage);\n      const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\", formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const {\n        fileName,\n        filePath\n      } = fileResponse.data;\n      ConversationImage = 'uploads/' + fileName;\n      isGroup = true;\n    }\n\n    let newConversation = {\n      Name: name,\n      creatorId: sessionStorage['id'],\n      Participants: participants,\n      Messages: [],\n      LastMessage: {\n        id: '',\n        sender: '',\n        message: ''\n      },\n      ConversationImage: ConversationImage,\n      isGroup\n    };\n    let DBparticipants = [...participants, {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    }];\n    let DBconversation = { ...newConversation,\n      Participants: DBparticipants\n    }; //updateDB\n\n    try {\n      let Response = await axios.post(\"http://localhost:5000/api/conversations\", DBconversation, config);\n\n      if (Response.data.status == \"created\") {\n        newConversation = { ...newConversation,\n          _id: Response.data.conversation._id\n        };\n        setSelectedConversation(newConversation);\n        setConversations(prevConversations => {\n          return [...prevConversations, newConversation];\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const addMessageToConversation = useCallback(async currentConversation => {\n    console.log(currentConversation);\n    setConversations(prevConversations => {\n      let conversationExists = false;\n      const newConversations = prevConversations.map(conversation => {\n        if (conversation._id == currentConversation._id) {\n          conversationExists = true;\n          let UpdatedConversation = { ...conversation,\n            Messages: currentConversation.Messages,\n            LastMessage: currentConversation.LastMessage\n          };\n\n          if (selectedConversation) {\n            if (selectedConversation._id == conversation._id) setSelectedConversation(UpdatedConversation);\n          }\n\n          return UpdatedConversation;\n        }\n\n        return conversation;\n      });\n      if (conversationExists) return newConversations;else return [...prevConversations, currentConversation];\n    });\n  }, [setConversations, selectedConversation, setSelectedConversation]);\n\n  function sendMessage(currentConversation, text) {\n    console.log(currentConversation);\n    let senderParticipant = {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    };\n    let CurrentMessage = {\n      id: sessionStorage['id'],\n      name: info.name,\n      message: text\n    };\n    let SendToContactsConversation = {\n      Name: currentConversation.Name,\n      creatorId: currentConversation.creatorId,\n      Participants: currentConversation.Participants,\n      Messages: [...currentConversation.Messages, CurrentMessage],\n      LastMessage: CurrentMessage,\n      ConversationImage: currentConversation.ConversationImage,\n      isGroup: currentConversation.isGroup\n    };\n    socket.emit('send-message', {\n      currentConversation: SendToContactsConversation,\n      id: currentConversation._id,\n      senderParticipant: senderParticipant\n    });\n    let conversation = { ...currentConversation,\n      Messages: [...currentConversation.Messages, CurrentMessage],\n      LastMessage: CurrentMessage\n    };\n    addMessageToConversation(conversation);\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"5W918Q1s0Rfwp1wW4SVZXPUmxGo=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","createGroupFlag","setCreateGroupFlag","socket","config","sessionStorage","response","get","ConversationsList","data","map","conversation","Participants","length","Name","UpdatedNameConversation","name","err","console","log","createConversation","ids","image","ConversationImage","isGroup","participants","addContactToConversation","filter","contact","formData","FormData","append","fileResponse","post","headers","fileName","filePath","newConversation","creatorId","Messages","LastMessage","sender","message","DBparticipants","phone","ProfilePic","DBconversation","Response","status","_id","prevConversations","addMessageToConversation","currentConversation","conversationExists","newConversations","UpdatedConversation","sendMessage","text","senderParticipant","CurrentMessage","SendToContactsConversation","emit","on","off"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useUser } from './userprovider'\r\nimport { useSocket } from './socketprovider'\r\nimport axios from 'axios'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts,info} = useUser()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversation,setSelectedConversation] = useState()\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const socket = useSocket()\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}};\r\n\r\n  useEffect(async () =>\r\n  {\r\n    try\r\n    {\r\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\"+sessionStorage['id'],config)\r\n      let ConversationsList =  response.data.map(conversation=>\r\n      {\r\n        if(conversation.Participants.length == 1 && conversation.Name == sessionStorage['name'] )\r\n        {\r\n          let UpdatedNameConversation = conversation\r\n          UpdatedNameConversation= {...UpdatedNameConversation,Name:conversation.Participants[0].name}\r\n  \r\n          return UpdatedNameConversation\r\n        }\r\n  \r\n        else return conversation\r\n          \r\n      })\r\n   /*  if(ConversationsList.length>0)\r\n      setSelectedConversation(ConversationsList[0])*/\r\n        \r\n      setConversations(ConversationsList)\r\n  \r\n     }catch(err){console.log(err)}\r\n\r\n  },[]) \r\n\r\nasync function createConversation(ids,name,image) \r\n  {\r\n\r\n    let  ConversationImage= image\r\n    let isGroup = false\r\n    if(ids.length == 0)\r\n    {\r\n     console.log('no participants choosen')\r\n     return;\r\n    }\r\n     const participants =ids.map(id=>\r\n    { \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n    \r\n    if(ids.length > 1)\r\n    {\r\n      const formData= new FormData();\r\n      formData.append('file',ConversationImage)\r\n      const fileResponse =await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\",formData,{headers: {\r\n      'Content-Type': 'multipart/form-data'}})\r\n      const {fileName,filePath} =fileResponse.data\r\n      ConversationImage='uploads/'+fileName\r\n      isGroup = true\r\n    }\r\n\r\n    let newConversation = {Name:name,creatorId: sessionStorage['id'],Participants:participants,Messages:[],LastMessage:{id:'',sender:'',message:''},ConversationImage:ConversationImage,isGroup}\r\n    \r\n    let DBparticipants=[...participants,{id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}]\r\n    let DBconversation = {...newConversation,Participants:DBparticipants}\r\n\r\n\r\n\r\n    //updateDB\r\n   \r\n    try{\r\n       let Response = await axios.post(\"http://localhost:5000/api/conversations\",DBconversation,config)\r\n       if(Response.data.status == \"created\")\r\n       {\r\n       newConversation= {...newConversation,_id:Response.data.conversation._id}\r\n       setSelectedConversation(newConversation)\r\n       setConversations(prevConversations => { return [...prevConversations, newConversation]})\r\n       }\r\n    } catch(err){console.log(err)}\r\n    \r\n\r\n  }\r\n\r\n\r\n\r\nconst addMessageToConversation = useCallback(async(currentConversation) =>\r\n{\r\n  console.log(currentConversation)\r\n  setConversations(prevConversations => \r\n  {\r\n    let conversationExists = false\r\n    const newConversations = prevConversations.map(conversation =>\r\n    {\r\n     if (conversation._id == currentConversation._id) \r\n     {\r\n       conversationExists = true\r\n       let UpdatedConversation ={...conversation, Messages:currentConversation.Messages,LastMessage:currentConversation.LastMessage}\r\n       if(selectedConversation)\r\n       {\r\n         if(selectedConversation._id == conversation._id)\r\n           setSelectedConversation(UpdatedConversation)\r\n       }\r\n\r\n        return UpdatedConversation\r\n      }\r\n\r\n      return conversation\r\n    })\r\n\r\n    if (conversationExists) \r\n      return newConversations\r\n    else \r\n      return [...prevConversations, currentConversation]\r\n      \r\n  })\r\n}, [setConversations,selectedConversation,setSelectedConversation])\r\n\r\n\r\n  function sendMessage(currentConversation,text) \r\n  {\r\n    console.log(currentConversation)\r\n    let senderParticipant = {id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}\r\n    let CurrentMessage ={ id: sessionStorage['id'], name: info.name,message: text}\r\n     let SendToContactsConversation = {Name:currentConversation.Name,creatorId:currentConversation.creatorId,Participants: currentConversation.Participants,Messages: [...currentConversation.Messages,CurrentMessage] \r\n    ,LastMessage:CurrentMessage,ConversationImage:currentConversation.ConversationImage,isGroup:currentConversation.isGroup}\r\n    socket.emit('send-message', {currentConversation:SendToContactsConversation,id:currentConversation._id,senderParticipant:senderParticipant})\r\n    let conversation ={...currentConversation,Messages:[...currentConversation.Messages,CurrentMessage],LastMessage:CurrentMessage}\r\n    addMessageToConversation(conversation)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return\r\n\r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('receive-message')\r\n  }, [socket, addMessageToConversation])\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversation}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}