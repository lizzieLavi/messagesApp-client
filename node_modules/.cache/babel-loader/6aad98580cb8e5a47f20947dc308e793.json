{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useUser } from './userprovider';\nimport { useSocket } from './socketprovider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const socket = useSocket();\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  useEffect(async () => {\n    try {\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\" + sessionStorage['id'], config);\n      let ConversationsList = response.data.map(conversation => {\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage['name']) {\n          let UpdatedNameConversation = conversation;\n          UpdatedNameConversation = { ...UpdatedNameConversation,\n            Name: conversation.Participants[0].name\n          };\n          return UpdatedNameConversation;\n        } else return conversation;\n      });\n      /*  if(ConversationsList.length>0)\r\n         setSelectedConversation(ConversationsList[0])*/\n\n      setConversations(ConversationsList);\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  async function createConversation(ids, name, image) {\n    let ConversationImage = image;\n    let isGroup = false;\n\n    if (ids.length == 0) {\n      console.log('no participants choosen');\n      return;\n    }\n\n    const participants = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n    let ConversationExists = null;\n\n    if (ids.length == 1) {\n      ConversationExists = conversations.forEach(conversation => {\n        if (conversation.isGroup == false) {\n          if (conversation.Name == name) return conversation;\n        }\n      });\n    }\n\n    if (ConversationExists) setSelectedConversation(ConversationExists);else {\n      participants.push({\n        id: info.id,\n        name: info.name,\n        phone: info.phone,\n        image: info.ProfilePic\n      });\n\n      if (ids.length > 1) {\n        const formData = new FormData();\n        formData.append('file', ConversationImage);\n        const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\", formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        const {\n          fileName,\n          filePath\n        } = fileResponse.data;\n        ConversationImage = 'uploads/' + fileName;\n        isGroup = true;\n      }\n\n      let newConversation = {\n        Name: name,\n        creatorId: sessionStorage['id'],\n        Participants: participants,\n        Messages: [],\n        LastMessage: {\n          id: '',\n          sender: '',\n          message: ''\n        },\n        ConversationImage: ConversationImage,\n        isGroup\n      }; //updateDB\n\n      try {\n        let Response = await axios.post(\"http://localhost:5000/api/conversations\", newConversation, config);\n\n        if (Response.data.status == \"created\") {\n          if (Response.data.conversation.Name == sessionStorage['name']) {\n            let UpdatedNameConversation = Response.data.conversation;\n            UpdatedNameConversation = { ...UpdatedNameConversation,\n              Name: Response.data.conversation.Participants[0].name,\n              ConversationImage: Response.data.conversation.Participants[0].image\n            };\n            setSelectedConversation(UpdatedNameConversation);\n            setConversations(prevConversations => {\n              return [...prevConversations, Response.data.conversation];\n            });\n          } else {\n            setSelectedConversation(Response.data.conversation);\n            setConversations(prevConversations => {\n              return [...prevConversations, Response.data.conversation];\n            });\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n\n  const addMessageToConversation = useCallback(async ({\n    updatedConversations\n  }) => {\n    console.log(updatedConversations);\n    setConversations(() => {\n      let ConversationsList = updatedConversations.map(conversation => {\n        if (selectedConversation) {\n          if (conversation._id == selectedConversation._id) setSelectedConversation(conversation);\n        }\n\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage['name']) {\n          let UpdatedNameConversation = conversation;\n          UpdatedNameConversation = { ...UpdatedNameConversation,\n            Name: conversation.Participants[0].name,\n            ConversationImage: conversation.Participants[0].image\n          };\n\n          if (selectedConversation) {\n            if (conversation._id == selectedConversation._id) setSelectedConversation(UpdatedNameConversation);\n          }\n\n          return UpdatedNameConversation;\n        } else return conversation;\n      });\n      return ConversationsList;\n    });\n  }, [setConversations, selectedConversation, setSelectedConversation]);\n\n  function sendMessage(text) {\n    let senderParticipant = {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    };\n    let CurrentMessage = {\n      id: sessionStorage['id'],\n      name: info.name,\n      message: text\n    };\n    let SendToContactsConversation = {\n      Name: selectedConversation.Name,\n      creatorId: selectedConversation.creatorId,\n      Participants: selectedConversation.Participants,\n      Messages: [...selectedConversation.Messages, CurrentMessage],\n      LastMessage: CurrentMessage,\n      ConversationImage: selectedConversation.ConversationImage,\n      isGroup: selectedConversation.isGroup\n    };\n    socket.emit('send-message', {\n      Conversation: SendToContactsConversation,\n      id: selectedConversation._id,\n      senderParticipant: senderParticipant\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"5W918Q1s0Rfwp1wW4SVZXPUmxGo=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","createGroupFlag","setCreateGroupFlag","socket","config","sessionStorage","response","get","ConversationsList","data","map","conversation","Participants","length","Name","UpdatedNameConversation","name","err","console","log","createConversation","ids","image","ConversationImage","isGroup","participants","addContactToConversation","filter","contact","ConversationExists","forEach","push","phone","ProfilePic","formData","FormData","append","fileResponse","post","headers","fileName","filePath","newConversation","creatorId","Messages","LastMessage","sender","message","Response","status","prevConversations","addMessageToConversation","updatedConversations","_id","sendMessage","text","senderParticipant","CurrentMessage","SendToContactsConversation","emit","Conversation","on","off"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useUser } from './userprovider'\r\nimport { useSocket } from './socketprovider'\r\nimport axios from 'axios'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts,info} = useUser()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversation,setSelectedConversation] = useState()\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const socket = useSocket()\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}};\r\n\r\n  useEffect(async () =>\r\n  {\r\n    try\r\n    {\r\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\"+sessionStorage['id'],config)\r\n      let ConversationsList =  response.data.map(conversation=>\r\n      {\r\n        if(conversation.Participants.length == 1 && conversation.Name == sessionStorage['name'] )\r\n        {\r\n          let UpdatedNameConversation = conversation\r\n          UpdatedNameConversation= {...UpdatedNameConversation,Name:conversation.Participants[0].name}\r\n  \r\n          return UpdatedNameConversation\r\n        }\r\n  \r\n        else return conversation\r\n          \r\n      })\r\n   /*  if(ConversationsList.length>0)\r\n      setSelectedConversation(ConversationsList[0])*/\r\n        \r\n      setConversations(ConversationsList)\r\n  \r\n     }catch(err){console.log(err)}\r\n\r\n  },[]) \r\n\r\nasync function createConversation(ids,name,image) \r\n  {\r\n\r\n    let  ConversationImage= image\r\n    let isGroup = false\r\n    if(ids.length == 0)\r\n    {\r\n     console.log('no participants choosen')\r\n     return;\r\n    }\r\n\r\n     const participants =ids.map(id=>\r\n    { \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n    let ConversationExists = null\r\n    if(ids.length == 1)\r\n    {\r\n    ConversationExists = conversations.forEach(conversation =>\r\n      {\r\n        if(conversation.isGroup == false)\r\n        {\r\n          if(conversation.Name ==name)\r\n            return conversation\r\n        }\r\n      })\r\n    }\r\n\r\n    if(ConversationExists)\r\n      setSelectedConversation(ConversationExists)\r\n    \r\n    else{\r\n    participants.push({id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic})\r\n    \r\n    if(ids.length > 1)\r\n    {\r\n      const formData= new FormData();\r\n      formData.append('file',ConversationImage)\r\n      const fileResponse =await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\",formData,{headers: {\r\n      'Content-Type': 'multipart/form-data'}})\r\n      const {fileName,filePath} =fileResponse.data\r\n      ConversationImage='uploads/'+fileName\r\n      isGroup = true\r\n    }\r\n\r\n    let newConversation = {Name:name,creatorId: sessionStorage['id'],Participants:participants,Messages:[],LastMessage:{id:'',sender:'',message:''},ConversationImage:ConversationImage,isGroup}\r\n   \r\n\r\n\r\n\r\n    //updateDB\r\n   \r\n    try{\r\n       let Response = await axios.post(\"http://localhost:5000/api/conversations\",newConversation,config)\r\n       if(Response.data.status == \"created\")\r\n       {\r\n        if(Response.data.conversation.Name == sessionStorage['name'] )\r\n        {\r\n          let UpdatedNameConversation = Response.data.conversation\r\n          UpdatedNameConversation= {...UpdatedNameConversation,Name:Response.data.conversation.Participants[0].name,ConversationImage:Response.data.conversation.Participants[0].image}\r\n          setSelectedConversation(UpdatedNameConversation)\r\n          setConversations(prevConversations => { return [...prevConversations, Response.data.conversation]})\r\n        }\r\n        else\r\n        { \r\n          setSelectedConversation(Response.data.conversation)\r\n          setConversations(prevConversations => { return [...prevConversations, Response.data.conversation]})\r\n        }\r\n       }\r\n    } catch(err){console.log(err)}\r\n    \r\n   }\r\n  }\r\n\r\n\r\n\r\nconst addMessageToConversation = useCallback(async({updatedConversations}) =>\r\n{\r\n    console.log(updatedConversations)\r\n    setConversations(()=>\r\n    {\r\n      let ConversationsList =  updatedConversations.map(conversation=>\r\n        {\r\n          if(selectedConversation)\r\n          {\r\n            if(conversation._id == selectedConversation._id)\r\n              setSelectedConversation(conversation)\r\n          }\r\n\r\n          if(conversation.Participants.length == 1 && conversation.Name == sessionStorage['name'] )\r\n          {\r\n            let UpdatedNameConversation = conversation\r\n            UpdatedNameConversation= {...UpdatedNameConversation,Name:conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n            if(selectedConversation)\r\n            {\r\n              if(conversation._id == selectedConversation._id)\r\n                setSelectedConversation(UpdatedNameConversation)\r\n            }\r\n    \r\n            return UpdatedNameConversation\r\n          }\r\n    \r\n          else return conversation   \r\n        })\r\n\r\n        return ConversationsList \r\n      \r\n    })\r\n  \r\n}, [setConversations,selectedConversation,setSelectedConversation])\r\n\r\n\r\n  function sendMessage(text) \r\n  {\r\n    let senderParticipant = {id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}\r\n    let CurrentMessage ={ id: sessionStorage['id'], name: info.name,message: text}\r\n     let SendToContactsConversation = {Name:selectedConversation.Name,creatorId:selectedConversation.creatorId,Participants: selectedConversation.Participants,Messages: [...selectedConversation.Messages,CurrentMessage] \r\n    ,LastMessage:CurrentMessage,ConversationImage:selectedConversation.ConversationImage,isGroup:selectedConversation.isGroup}\r\n    socket.emit('send-message', {Conversation:SendToContactsConversation,id:selectedConversation._id,senderParticipant:senderParticipant})\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return\r\n\r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('receive-message')\r\n  }, [socket, addMessageToConversation])\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversation}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}