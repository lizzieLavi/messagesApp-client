{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chat.js\",\n    _s = $RefreshSig$();\n\nimport '../css/chat.css';\nimport React, { useRef } from 'react';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { useSocket } from '../contexts/socketprovider';\nimport { useUser } from '../contexts/userprovider';\nimport { Avatar, IconButton, useForkRef } from '@material-ui/core';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ImageIcon from '@material-ui/icons/Image';\nimport Picker from 'emoji-picker-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n\n  const [Text, setText] = useState('');\n  const {\n    socket\n  } = useSocket();\n  const {\n    info\n  } = useUser();\n  const {\n    sendMessage,\n    selectedConversation,\n    currentConversationIsConnected,\n    typingFlag,\n    setTypingFlag\n  } = useConversations();\n  const inputRef = useRef(null);\n  const [emojiFlag, setEmojiFlag] = useState(false);\n  const [imageFlag, setImageFlag] = useState(false);\n  const setRef = useCallback(node => {\n    if (node) node.scrollIntoView({\n      smooth: true\n    });\n  }, []);\n\n  const groupheader = () => {\n    let returnValue = '';\n    console.log(typingFlag);\n\n    if (typingFlag != '') {\n      returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lastSeen\",\n        children: [\" \", typingFlag, \" is typing...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 23\n      }, this);\n      setTimeout(() => setTypingFlag(''), 1000);\n    } else {\n      let UsersInGroup = '';\n      selectedConversation.Participants.forEach((participant, index) => {\n        if (index === selectedConversation.Participants.length - 1) UsersInGroup = UsersInGroup + participant.name;else UsersInGroup = UsersInGroup + participant.name + ', ';\n      });\n      returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lastSeen\",\n        children: [UsersInGroup, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 23\n      }, this);\n    }\n\n    return returnValue;\n  };\n\n  const privateConversationHeader = () => {\n    let returnValue = '';\n\n    if (currentConversationIsConnected == '') {\n      if (typingFlag != '') {\n        returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lastSeen\",\n          children: \" typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 27\n        }, this);\n        setTimeout(() => setTypingFlag(''), 1000);\n      } else returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 55\n        }, this), \" online \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 28\n      }, this);\n    } else returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lastSeen\",\n      children: currentConversationIsConnected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 27\n    }, this);\n\n    return returnValue;\n  };\n\n  function typing(e) {\n    setText(e.target.value);\n    if (socket.current == null) return;\n    socket.current.emit(\"typing\", {\n      user: info,\n      Conversation: selectedConversation\n    });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    sendMessage(Text);\n    setText(' ');\n  }\n\n  function handleImage() {\n    console.log('here');\n  }\n\n  const onEmojiClick = (event, emojiObject) => {\n    setText(Text + emojiObject.emoji);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_header\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: process.env.PUBLIC_URL + selectedConversation.ConversationImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_header_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", selectedConversation.Name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 20\n        }, this), selectedConversation.isGroup ? groupheader() : privateConversationHeader()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_body\",\n      children: selectedConversation.Messages.map((message, index) => {\n        const lastMessage = selectedConversation.Messages.length - 1 === index;\n        let sender = message.id == sessionStorage['id'] ? 'chat_message' : ' chat_message chat_reciever';\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: sender,\n          ref: lastMessage ? setRef : null,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sender_name\",\n            children: message.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message_time_and_content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message_content\",\n              children: message.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 60\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message_time\",\n              children: message.timeSent.substring(11, 16)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 20\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_footer_with_stickers\",\n      children: [emojiFlag ? /*#__PURE__*/_jsxDEV(Picker, {\n        onEmojiClick: (e, emojiObject) => onEmojiClick(e, emojiObject),\n        pickerStyle: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_footer\",\n        children: [emojiFlag ? /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setEmojiFlag(false),\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 26\n        }, this) : '', /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setEmojiFlag(true),\n          children: /*#__PURE__*/_jsxDEV(InsertEmoticonIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setImageFlag(true),\n          children: /*#__PURE__*/_jsxDEV(ImageIcon, {\n            fontSize: \"large\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: handleFileUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 48\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"message_section\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"message_input\",\n            ref: inputRef,\n            value: Text,\n            onChange: typing,\n            type: \"text\",\n            placeholder: \"type a message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \" send \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          children: /*#__PURE__*/_jsxDEV(MicIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"AZSam89sYIUCs30vLMcKkVZ7PLw=\", false, function () {\n  return [useSocket, useUser, useConversations];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chat.js"],"names":["React","useRef","useState","useEffect","useCallback","useConversations","useSocket","useUser","Avatar","IconButton","useForkRef","InsertEmoticonIcon","MicIcon","CloseIcon","ImageIcon","Picker","Chat","Text","setText","socket","info","sendMessage","selectedConversation","currentConversationIsConnected","typingFlag","setTypingFlag","inputRef","emojiFlag","setEmojiFlag","imageFlag","setImageFlag","setRef","node","scrollIntoView","smooth","groupheader","returnValue","console","log","setTimeout","UsersInGroup","Participants","forEach","participant","index","length","name","privateConversationHeader","typing","e","target","value","current","emit","user","Conversation","handleSubmit","preventDefault","handleImage","onEmojiClick","event","emojiObject","emoji","process","env","PUBLIC_URL","ConversationImage","Name","isGroup","Messages","map","message","lastMessage","sender","id","sessionStorage","timeSent","substring","width","handleFileUpload"],"mappings":"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","sourcesContent":["import '../css/chat.css'\r\nimport React, { useRef } from 'react'\r\nimport { useState ,useEffect,useCallback} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\nimport { Avatar, IconButton, useForkRef } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport Picker from 'emoji-picker-react';\r\n\r\n\r\n\r\n\r\n\r\nexport default function Chat() {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag} = useConversations()\r\n    const inputRef = useRef(null)\r\n  \r\n    const [emojiFlag,setEmojiFlag] = useState(false)\r\n    const [imageFlag,setImageFlag] = useState(false)\r\n\r\n\r\n    const setRef = useCallback((node) => \r\n    {\r\n      if(node)\r\n         node.scrollIntoView({smooth:true})\r\n    },[])\r\n    \r\n    const groupheader = () =>\r\n    {\r\n      let returnValue = ''\r\n      console.log(typingFlag)\r\n      if(typingFlag != '')\r\n      {\r\n        returnValue = <div className='lastSeen'> {typingFlag} is typing...</div>\r\n        setTimeout(()=> setTypingFlag(''),1000)\r\n      }\r\n\r\n      else\r\n      {\r\n        let UsersInGroup = ''\r\n        selectedConversation.Participants.forEach((participant,index)=> \r\n        {\r\n            if(index ===  selectedConversation.Participants.length-1 )\r\n                UsersInGroup = UsersInGroup + participant.name\r\n            else\r\n                UsersInGroup= UsersInGroup + participant.name + ', '\r\n        })\r\n            \r\n        returnValue=  <div className='lastSeen'>{UsersInGroup} </div>\r\n\r\n      }\r\n\r\n      return returnValue\r\n \r\n }\r\n    \r\n\r\n    const privateConversationHeader = () =>\r\n    {\r\n        let returnValue = ''\r\n       if(currentConversationIsConnected == '')\r\n       {\r\n        if(typingFlag != '')\r\n        {\r\n            returnValue = <div className='lastSeen'> typing...</div>\r\n            setTimeout(()=> setTypingFlag(''),1000)\r\n\r\n        }\r\n\r\n        else returnValue = <div className='connected'><div className='circle'></div> online </div>\r\n            \r\n       }\r\n       else returnValue = <div className='lastSeen'>{currentConversationIsConnected}</div>\r\n\r\n\r\n       return returnValue\r\n\r\n    }\r\n\r\n    function typing(e)\r\n    {\r\n        setText(e.target.value)\r\n        if (socket.current == null) return;\r\n        socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n    }\r\n\r\n    function handleSubmit(e)\r\n    {\r\n      e.preventDefault()\r\n      sendMessage(Text)\r\n      setText(' ')\r\n    }\r\n\r\n    function handleImage()\r\n    {\r\n      console.log('here')\r\n    }\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setText(Text + emojiObject.emoji)\r\n      };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='chat'>\r\n            <div className='chat_header'>\r\n                \r\n                <Avatar src={process.env.PUBLIC_URL +selectedConversation.ConversationImage}/>\r\n                <div className='chat_header_info'>\r\n                   <h2> {selectedConversation.Name} </h2> \r\n                   {selectedConversation.isGroup?  groupheader() : privateConversationHeader()}\r\n               </div>\r\n           </div>\r\n    \r\n           <div className='chat_body'>\r\n               {selectedConversation.Messages.map((message,index)=>\r\n               {\r\n                   const lastMessage = selectedConversation.Messages.length -1 === index\r\n                   let sender = message.id==sessionStorage['id']? 'chat_message' : ' chat_message chat_reciever'\r\n\r\n                   return (\r\n                  \r\n                    <p className={sender} ref={lastMessage ? setRef : null}>\r\n\r\n                   <span className='sender_name'>{message.name}</span>\r\n                   <p className='message_time_and_content'><span className='message_content'>{message.message}</span> \r\n                   <span className='message_time'>{(message.timeSent).substring(11,16)}</span> </p>\r\n                    </p>\r\n              \r\n                   )}\r\n                )}\r\n\r\n           </div>\r\n \r\n           <div className='chat_footer_with_stickers'>\r\n           {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n           <div className='chat_footer'>\r\n           {emojiFlag?   <IconButton  onClick={()=>setEmojiFlag(false)}>\r\n                      <CloseIcon fontSize='large'/>\r\n                      </IconButton>:''\r\n                    }\r\n               <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n                 <InsertEmoticonIcon fontSize='large'/>\r\n                </IconButton>\r\n                <IconButton  onClick={()=>  setImageFlag(true)}>\r\n                 < ImageIcon  fontSize='large'><input type=\"file\" onChange={handleFileUpload} /></ImageIcon>\r\n                </IconButton>\r\n\r\n                 <form onSubmit={handleSubmit} className='message_section'>\r\n                    <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n                    <button type='submit' > send </button>\r\n                 </form>\r\n                 <IconButton>\r\n                  <MicIcon fontSize='large'/>\r\n               </IconButton>\r\n               </div>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}