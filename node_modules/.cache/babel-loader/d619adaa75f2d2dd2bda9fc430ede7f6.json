{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useContacts } from './contactsprovider';\nimport { useSocket } from './socketprovider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts\n  } = useContacts();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const [selectedConversationDetails, setSelectedConversationDetails] = useState();\n  const [numberOfConversations, setNumberOfConversations] = useState(0);\n  const socket = useSocket();\n\n  function createConversation(ids) {\n    let conversation = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        id: numberOfConversations,\n        participants: conversation,\n        messages: [],\n        lastMessage: ''\n      }];\n    });\n    setNumberOfConversations(numberOfConversations + 1);\n  }\n\n  const addMessageToConversation = useCallback((currentConversation, text, fromMe) => {\n    setConversations(prevConversations => {\n      let id = sessionStorage['id'];\n      let name = sessionStorage['name'];\n      let NewConversations = prevConversations.map(conversation => {\n        if (conversation.id === currentConversation.id) {\n          let CurrentMessage = {\n            id: id,\n            name: name,\n            message: text,\n            fromMe: fromMe\n          };\n          let updatedConversation = { ...conversation,\n            lastMessage: CurrentMessage,\n            messages: [...conversation.messages, CurrentMessage]\n          };\n          setSelectedConversationDetails(updatedConversation);\n          return updatedConversation;\n        } else return conversation;\n      });\n      return NewConversations;\n    });\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket === undefined) return;\n    socket.on('recieve-message', addMessageToConversation);\n    return () => socket.off('recieve-message');\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(currentConversation, text) {\n    socket.emit('send-message', {\n      currentConversation,\n      text\n    });\n    addMessageToConversation(currentConversation, text, true);\n  }\n\n  function setSelectedConversation(index) {\n    setSelectedConversationIndex(index);\n    setSelectedConversationDetails(conversations[index]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversationDetails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"fIO7Cw4Yz9gxKZ9waayOaRcfaB0=\", false, function () {\n  return [useContacts, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","selectedConversationDetails","setSelectedConversationDetails","numberOfConversations","setNumberOfConversations","socket","createConversation","ids","conversation","map","addContactToConversation","filter","contact","prevConversations","participants","messages","lastMessage","addMessageToConversation","currentConversation","text","fromMe","sessionStorage","name","NewConversations","CurrentMessage","message","updatedConversation","undefined","on","off","sendMessage","emit","setSelectedConversation","index"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,WAA5B,QAA8C,OAA9C;AACA,SAASC,QAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AAEA,MAAMC,oBAAoB,gBAAGP,KAAK,CAACQ,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAOR,UAAU,CAACM,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAACC,EAAAA,EAAD;AAAKC,EAAAA;AAAL,CAA/B,EAAgD;AAAA;;AACrD,QAAM;AAACC,IAAAA;AAAD,MAAaR,WAAW,EAA9B;AACA,QAAM,CAACS,aAAD,EAAeC,gBAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACa,yBAAD,EAA2BC,4BAA3B,IAA2Dd,QAAQ,CAAC,CAAD,CAAzE;AACA,QAAM,CAACe,2BAAD,EAA6BC,8BAA7B,IAA+DhB,QAAQ,EAA7E;AACA,QAAM,CAACiB,qBAAD,EAAuBC,wBAAvB,IAAkDlB,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAMmB,MAAM,GAAGhB,SAAS,EAAxB;;AAMA,WAASiB,kBAAT,CAA4BC,GAA5B,EACA;AAEG,QAAIC,YAAY,GAAED,GAAG,CAACE,GAAJ,CAAQf,EAAE,IAC7B;AACE,UAAKgB,wBAAwB,GAAEd,QAAQ,CAACe,MAAT,CAAgBC,OAAO,IAAGlB,EAAE,KAAKkB,OAAO,CAAClB,EAAzC,CAA/B;AACA,aAAOgB,wBAAwB,CAAC,CAAD,CAA/B;AACD,KAJkB,CAAlB;AAMDZ,IAAAA,gBAAgB,CAACe,iBAAiB,IAClC;AACE,aAAO,CAAC,GAAGA,iBAAJ,EAAsB;AAACnB,QAAAA,EAAE,EAAES,qBAAL;AAA2BW,QAAAA,YAAY,EAACN,YAAxC;AAAqDO,QAAAA,QAAQ,EAAC,EAA9D;AAAiEC,QAAAA,WAAW,EAAC;AAA7E,OAAtB,CAAP;AACD,KAHe,CAAhB;AAKAZ,IAAAA,wBAAwB,CAACD,qBAAqB,GAAE,CAAxB,CAAxB;AAED;;AAED,QAAMc,wBAAwB,GAAGhC,WAAW,CAE5C,CAACiC,mBAAD,EAAsBC,IAAtB,EAA4BC,MAA5B,KACA;AAEEtB,IAAAA,gBAAgB,CAACe,iBAAiB,IAChC;AACE,UAAInB,EAAE,GAAC2B,cAAc,CAAC,IAAD,CAArB;AACA,UAAIC,IAAI,GAAED,cAAc,CAAC,MAAD,CAAxB;AACC,UAAIE,gBAAgB,GAAEV,iBAAiB,CAACJ,GAAlB,CAAsBD,YAAY,IACvD;AAGE,YAAGA,YAAY,CAACd,EAAb,KAAoBwB,mBAAmB,CAACxB,EAA3C,EACA;AACE,cAAI8B,cAAc,GAAE;AAAE9B,YAAAA,EAAE,EAAEA,EAAN;AAAU4B,YAAAA,IAAI,EAAEA,IAAhB;AAAqBG,YAAAA,OAAO,EAAEN,IAA9B;AAAoCC,YAAAA,MAAM,EAAEA;AAA5C,WAApB;AACA,cAAIM,mBAAmB,GAAE,EAAC,GAAGlB,YAAJ;AAAiBQ,YAAAA,WAAW,EAAGQ,cAA/B;AACvBT,YAAAA,QAAQ,EAAE,CAAC,GAAGP,YAAY,CAACO,QAAjB,EAA4BS,cAA5B;AADa,WAAzB;AAIAtB,UAAAA,8BAA8B,CAACwB,mBAAD,CAA9B;AACA,iBAAOA,mBAAP;AACD,SATD,MAWK,OAAOlB,YAAP;AACN,OAhBoB,CAAtB;AAkBC,aAAOe,gBAAP;AACH,KAvBa,CAAhB;AAwBD,GA7B2C,EA6B1C,CAACzB,gBAAD,CA7B0C,CAA5C;AAgCAX,EAAAA,SAAS,CAAC,MACV;AACE,QAAGkB,MAAM,KAAKsB,SAAd,EAAyB;AAEzBtB,IAAAA,MAAM,CAACuB,EAAP,CAAU,iBAAV,EAA6BX,wBAA7B;AAEA,WAAO,MAAMZ,MAAM,CAACwB,GAAP,CAAW,iBAAX,CAAb;AAGD,GATQ,EASP,CAACxB,MAAD,EAAQY,wBAAR,CATO,CAAT;;AAWA,WAASa,WAAT,CAAqBZ,mBAArB,EAAyCC,IAAzC,EAA+C;AAE7Cd,IAAAA,MAAM,CAAC0B,IAAP,CAAY,cAAZ,EAA4B;AAACb,MAAAA,mBAAD;AAAsBC,MAAAA;AAAtB,KAA5B;AACAF,IAAAA,wBAAwB,CAACC,mBAAD,EAAqBC,IAArB,EAA4B,IAA5B,CAAxB;AAGD;;AAED,WAASa,uBAAT,CAAiCC,KAAjC,EACA;AACKjC,IAAAA,4BAA4B,CAACiC,KAAD,CAA5B;AACA/B,IAAAA,8BAA8B,CAACL,aAAa,CAACoC,KAAD,CAAd,CAA9B;AACJ;;AAID,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAE;AAAEH,MAAAA,WAAF;AAAcjC,MAAAA,aAAd;AAA4BS,MAAAA,kBAA5B;AAA+CR,MAAAA,gBAA/C;AAAgEkC,MAAAA,uBAAhE;AAAwF/B,MAAAA;AAAxF,KAAtC;AAAA,cACGN;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IA9FeF,qB;UACKL,W,EAKJC,S;;;KANDI,qB","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useContacts } from './contactsprovider'\r\nimport { useSocket } from './socketprovider'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts} = useContacts()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversationIndex,setSelectedConversationIndex] = useState(0)\r\n  const [selectedConversationDetails,setSelectedConversationDetails] = useState()\r\n  const [numberOfConversations,setNumberOfConversations] =useState(0)\r\n  const socket = useSocket()\r\n\r\n  \r\n\r\n\r\n  \r\n  function createConversation(ids) \r\n  {\r\n    \r\n     let conversation =ids.map(id=>\r\n    {   \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n    setConversations(prevConversations =>\r\n    {\r\n      return [...prevConversations,{id: numberOfConversations,participants:conversation,messages:[],lastMessage:''}]\r\n    })\r\n\r\n    setNumberOfConversations(numberOfConversations +1)\r\n\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(\r\n  \r\n  (currentConversation, text, fromMe)=>\r\n  {\r\n\r\n    setConversations(prevConversations=>\r\n      {\r\n        let id=sessionStorage['id']\r\n        let name= sessionStorage['name']\r\n         let NewConversations =prevConversations.map(conversation=>\r\n          {\r\n\r\n            \r\n            if(conversation.id === currentConversation.id)\r\n            {\r\n              let CurrentMessage ={ id: id, name: name,message: text, fromMe: fromMe}\r\n              let updatedConversation ={...conversation,lastMessage : CurrentMessage,\r\n                messages: [...conversation.messages , CurrentMessage]}\r\n                \r\n\r\n              setSelectedConversationDetails(updatedConversation)\r\n              return updatedConversation\r\n            }\r\n\r\n            else return conversation;\r\n          })\r\n\r\n          return NewConversations;\r\n      })\r\n  },[setConversations],)\r\n\r\n  \r\n  useEffect(() =>\r\n  {\r\n    if(socket === undefined) return\r\n\r\n    socket.on('recieve-message', addMessageToConversation)\r\n\r\n    return () => socket.off('recieve-message')\r\n\r\n\r\n  },[socket,addMessageToConversation]) \r\n\r\n  function sendMessage(currentConversation,text) {\r\n\r\n    socket.emit('send-message', {currentConversation ,text})\r\n    addMessageToConversation(currentConversation,text , true)\r\n\r\n\r\n  }\r\n\r\n  function setSelectedConversation(index)\r\n  {\r\n       setSelectedConversationIndex(index)\r\n       setSelectedConversationDetails(conversations[index])\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{ sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversationDetails}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}