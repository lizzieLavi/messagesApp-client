{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { useState } from 'react';\nimport { useContacts } from './contactsprovider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts\n  } = useContacts();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const [selectedConversationDetails, setSelectedConversationDetails] = useState();\n  const [numberOfConversations, setNumberOfConversations] = useState(0);\n\n  function createConversation(ids) {\n    let conversation = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        id: numberOfConversations,\n        participants: conversation,\n        messages: []\n      }];\n    });\n    setNumberOfConversations(numberOfConversations + 1);\n  }\n\n  function addMessageToConversation(currentConversation, text, fromMe) {\n    setConversations(prevConversations => {\n      let id = sessionStorage['id'];\n      let name = sessionStorage['name'];\n      let NewConversations = prevConversations.map(conversation => {\n        if (conversation.id === currentConversation.id) {\n          let updatedConversation = { ...conversation,\n            messages: [...conversation.messages, {\n              id: id,\n              name: name,\n              message: text,\n              fromMe: fromMe\n            }]\n          };\n          setSelectedConversationDetails(updatedConversation);\n          return updatedConversation;\n        } else return conversation;\n      });\n      return NewConversations;\n    });\n  }\n\n  function sendMessage(currentConversation, text) {\n    addMessageToConversation(currentConversation, text, true);\n  }\n\n  function setSelectedConversation(index) {\n    setSelectedConversationIndex(index);\n    setSelectedConversationDetails(conversations[index]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversationDetails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"b5dKm6pJhfMI7FedXjJy37j8BlY=\", false, function () {\n  return [useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useState","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","selectedConversationDetails","setSelectedConversationDetails","numberOfConversations","setNumberOfConversations","createConversation","ids","conversation","map","addContactToConversation","filter","contact","prevConversations","participants","messages","addMessageToConversation","currentConversation","text","fromMe","sessionStorage","name","NewConversations","updatedConversation","message","sendMessage","setSelectedConversation","index"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\r\nimport { useState } from 'react'\r\nimport { useContacts } from './contactsprovider'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts} = useContacts()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversationIndex,setSelectedConversationIndex] = useState(0)\r\n  const [selectedConversationDetails,setSelectedConversationDetails] = useState()\r\n  const [numberOfConversations,setNumberOfConversations] =useState(0)\r\n\r\n  function createConversation(ids) \r\n  {\r\n    \r\n     let conversation =ids.map(id=>\r\n    {   \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n    setConversations(prevConversations =>\r\n    {\r\n      return [...prevConversations,{id: numberOfConversations,participants:conversation,messages:[]}]\r\n    })\r\n\r\n    setNumberOfConversations(numberOfConversations +1)\r\n\r\n  }\r\n\r\n  function addMessageToConversation(currentConversation, text, fromMe)\r\n  {\r\n\r\n    setConversations(prevConversations=>\r\n      {\r\n        let id=sessionStorage['id']\r\n        let name= sessionStorage['name']\r\n         let NewConversations =prevConversations.map(conversation=>\r\n          {\r\n            if(conversation.id === currentConversation.id)\r\n            {\r\n              let updatedConversation ={...conversation,\r\n                messages: [...conversation.messages , { id: id, name: name,message: text, fromMe: fromMe}]}\r\n\r\n              setSelectedConversationDetails(updatedConversation)\r\n              return updatedConversation\r\n            }\r\n\r\n            else return conversation;\r\n          })\r\n\r\n          return NewConversations;\r\n      })\r\n  }\r\n\r\n  function sendMessage(currentConversation,text) {\r\n    addMessageToConversation(currentConversation,text , true)\r\n\r\n\r\n  }\r\n\r\n  function setSelectedConversation(index)\r\n  {\r\n       setSelectedConversationIndex(index)\r\n       setSelectedConversationDetails(conversations[index])\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{ sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversationDetails}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}