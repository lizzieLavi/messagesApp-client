{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback, useRef } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useUser } from \"./userprovider\";\nimport { useSocket } from \"./socketprovider\";\nimport axios from \"axios\";\nimport Conversations from \"../components/conversations\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const RefConversations = useRef(conversations);\n  const currentConversationRef = useRef(selectedConversation);\n  const {\n    socket,\n    ConnectedUsers\n  } = useSocket();\n  const [typingFlag, setTypingFlag] = useState('');\n  const [currentConversationIsConnected, setCurrentConversationIsConnected] = useState('');\n  const config = {\n    headers: {\n      \"x-access-token\": sessionStorage[\"config\"]\n    }\n  };\n  const [showDetails, setShowDetails] = useState(false);\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\n  useEffect(() => {\n    async function fetchData() {\n      if (socket.current == null) return;\n      socket.current.on('user-typing', ({\n        user,\n        conversationId\n      }) => {\n        if (selectedConversation) {\n          if (selectedConversation._id === conversationId) {\n            setTypingFlag(user.name);\n          }\n        }\n      });\n      socket.current.on('update-conversation', async () => {\n        getConversations().then(res => setConversations(res));\n      });\n    }\n\n    fetchData();\n  }, [selectedConversation]);\n  useEffect(() => {\n    async function fetchData() {\n      if (selectedConversation) {\n        if (!selectedConversation.isGroup) {\n          if (ConnectedUsers.some(user => user.userId === selectedConversation.Participants[0].id)) {\n            setCurrentConversationIsConnected('');\n          } else {\n            let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\" + selectedConversation.Participants[0].id, config);\n            setCurrentConversationIsConnected(response.data.LastSeen);\n          }\n        }\n      }\n    }\n\n    fetchData();\n  }, [ConnectedUsers, selectedConversation]);\n  useEffect(() => {\n    async function fetchData() {\n      getConversations().then(res => setConversations(res));\n    }\n\n    fetchData();\n  }, []);\n\n  async function getConversations() {\n    try {\n      let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" + sessionStorage[\"id\"], config);\n      let ConversationsList = response.data.map(conversation => {\n        let UpdatedConversation = conversation;\n        if (!conversation.Participants.isGroup && conversation.Name === sessionStorage[\"name\"]) UpdatedConversation = { ...UpdatedConversation,\n          Name: conversation.Participants[0].name,\n          ConversationImage: conversation.Participants[0].image\n        };\n\n        if (selectedConversation) {\n          if (selectedConversation._id === UpdatedConversation._id) setSelectedConversation(UpdatedConversation);\n        }\n\n        return UpdatedConversation;\n      });\n      return ConversationsList;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function getSearchConverastions(str) {\n    getConversations().then(res => {\n      let SearchResult = res.filter(conversation => conversation.Name.includes(str) === true);\n      setConversations(SearchResult);\n    });\n  }\n\n  async function createConversation(ids, name, image, groupFlag) {\n    let ConversationImage = image;\n    let isGroup = groupFlag; //no participants chosen\n\n    if (ids.length === 0) {\n      return {\n        status: 'error',\n        message: 'no participants choosen'\n      };\n    } //check if conversation already exists and it's not a group\n\n\n    let ConversationExists = null;\n\n    if (ids.length === 1 && !isGroup) {\n      ConversationExists = conversations.find(conversation => conversation.Name === name);\n    }\n\n    if (ConversationExists) setSelectedConversation(ConversationExists); //create new conversation\n    else {\n      //get conversation participants\n      const participants = ids.map(id => {\n        let addContactToConversation = contacts.filter(contact => id === contact.id);\n        return addContactToConversation[0];\n      }); //add creator to participants\n\n      participants.push({\n        id: info.id,\n        name: info.name,\n        phone: info.phone,\n        imageName: info.imageName,\n        LastSeen: info.LastSeen\n      });\n      let createdDate = ''; //if group\n\n      if (isGroup) {\n        let parts = new Intl.DateTimeFormat('en', {\n          hc: 'h12',\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: 'numeric',\n          minute: 'numeric',\n          timeZone: 'Asia/Jerusalem'\n        }).formatToParts(new Date()).reduce((acc, part) => {\n          acc[part.type] = part.value;\n          return acc;\n        }, Object.create(null));\n        createdDate = `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}`;\n        const data = new FormData();\n        data.append('file', ConversationImage);\n        data.append(\"upload_preset\", \"whatsApp_clone\");\n        data.append(\"cloud_name\", \"dsrgpqnyv\");\n\n        try {\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\", data);\n          ConversationImage = response.data.url;\n        } catch (err) {\n          console.log(err);\n        }\n      }\n\n      let newConversation = {\n        Name: name,\n        creatorId: sessionStorage[\"id\"],\n        Participants: participants,\n        Messages: [],\n        LastMessage: {\n          id: \"\",\n          sender: \"\",\n          message: \"\"\n        },\n        ConversationImage: ConversationImage,\n        isGroup: isGroup,\n        createdDate: createdDate,\n        description: \"Add Description\"\n      }; //updateDB\n\n      try {\n        console.log(newConversation);\n        let Response = await axios.post(\"https://messagesapp1.herokuapp.com/api/conversations\", newConversation, config);\n\n        if (Response.data.status === \"created\") {\n          setSelectedConversation(Response.data.conversation); //show conversation only if messages sent\n\n          if (Response.data.conversation.Messages.length > 0) setConversations(prevConversations => {\n            return [...prevConversations, Response.data.conversation];\n          }); // }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n\n  async function UpdateConversation(updatedConversation) {\n    let updateDBConv = updatedConversation;\n    console.log(updatedConversation);\n\n    if (!updatedConversation.LastMessage.message.includes('left')) {\n      console.log('here');\n      let addCurrentParticipant = {\n        id: info.id,\n        phone: info.phone,\n        name: info.name,\n        image: info.imageName\n      };\n      let participants = [...updatedConversation.Participants, addCurrentParticipant];\n      updateDBConv = { ...updateDBConv,\n        Participants: participants\n      };\n    }\n\n    delete updateDBConv._id;\n\n    try {\n      let response = await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\" + selectedConversation._id, updateDBConv, config);\n\n      if (response.data.status === 'Updated') {\n        console.log(response.data);\n        let UpdatedConversations = [];\n\n        if (!updatedConversation.LastMessage.message.includes('left')) {\n          socket.current.emit('conversation-changed', updatedConversation);\n          setSelectedConversation(updatedConversation);\n          conversations.forEach(conversation => {\n            if (conversation._id === updatedConversation._id) {\n              UpdatedConversations.push(updatedConversation);\n            } else UpdatedConversations.push(conversation);\n          });\n        } else {\n          socket.current.emit('conversation-changed', selectedConversation);\n          setSelectedConversation({});\n          UpdatedConversations = Conversations.filter(conversation => conversation._id === updatedConversation._id);\n        }\n\n        socket.current.emit('conversation-changed', updatedConversation);\n        setConversations(UpdatedConversations);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const addMessageToConversation = useCallback(async ({\n    UpdatedConv\n  }) => {\n    audio.play();\n    let ConversationExists = false;\n    let newListOfConversations = RefConversations.current.map(conversation => {\n      if (conversation._id === UpdatedConv._id) {\n        ConversationExists = true;\n        let newConv = { ...conversation,\n          Messages: UpdatedConv.Messages,\n          LastMessage: UpdatedConv.LastMessage\n        };\n\n        if (currentConversationRef.current) {\n          if (currentConversationRef.current._id === UpdatedConv._id) setSelectedConversation(newConv);\n        }\n\n        return newConv;\n      } else return conversation;\n    });\n\n    if (!ConversationExists) {\n      if (!UpdatedConv.isGroup) {\n        let newConversation = { ...UpdatedConv,\n          Name: UpdatedConv.Participants[0].name,\n          ConversationImage: UpdatedConv.Participants[0].imageName\n        };\n        setConversations(prevConversations => [...prevConversations, newConversation]);\n      } else setConversations(prevConversations => [...prevConversations, UpdatedConv]);\n    } else setConversations(newListOfConversations);\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket.current == null) return;\n    RefConversations.current = conversations;\n    currentConversationRef.current = selectedConversation;\n    socket.current.on(\"receive-message\", addMessageToConversation);\n    return () => socket.current.off(\"receive-message\", addMessageToConversation);\n  }, [conversations, selectedConversation]);\n\n  const updateSenderConversation = AddMessage => {\n    let ConversationExists = false;\n    setSelectedConversation(AddMessage);\n    let newListOfConcversations = conversations.map(conversation => {\n      if (conversation._id === AddMessage._id) {\n        ConversationExists = true;\n        return AddMessage;\n      } else return conversation;\n    });\n\n    if (ConversationExists) {\n      setConversations(newListOfConcversations);\n    } else setConversations(prevConversations => [...prevConversations, AddMessage]);\n  };\n\n  function sendMessage(text, imageFlag, imageURL, recordURL) {\n    let parts = new Intl.DateTimeFormat('en', {\n      hc: 'h12',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZone: 'Asia/Jerusalem'\n    }).formatToParts(new Date()).reduce((acc, part) => {\n      acc[part.type] = part.value;\n      return acc;\n    }, Object.create(null));\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\n    let recordFlag = false;\n    if (recordURL != null) recordFlag = true;\n    let CurrentMessage = {\n      id: info.id,\n      name: info.name,\n      message: text,\n      timeSent: time,\n      containsImage: imageFlag,\n      containsRecord: recordFlag,\n      recordURL: recordURL\n    };\n    if (imageFlag === true) CurrentMessage = { ...CurrentMessage,\n      imageURL: imageURL\n    };\n    let sender = {\n      id: info.id,\n      phone: info.phone,\n      name: info.name,\n      image: info.imageName\n    };\n    let AddMessage = { ...selectedConversation,\n      Messages: [...selectedConversation.Messages, CurrentMessage],\n      LastMessage: CurrentMessage\n    };\n    socket.current.emit(\"send-message\", {\n      sender: sender,\n      UpdatedConversation: AddMessage,\n      conversationId: selectedConversation._id\n    });\n    updateSenderConversation(AddMessage);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation,\n      currentConversationIsConnected,\n      typingFlag,\n      setTypingFlag,\n      getSearchConverastions,\n      showDetails,\n      setShowDetails,\n      UpdateConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 424,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"bHPFA5wcmMvxgyaxuZXNtJA8oSE=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useRef","useState","useEffect","useUser","useSocket","axios","Conversations","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","RefConversations","currentConversationRef","socket","ConnectedUsers","typingFlag","setTypingFlag","currentConversationIsConnected","setCurrentConversationIsConnected","config","headers","sessionStorage","showDetails","setShowDetails","audio","Audio","fetchData","current","on","user","conversationId","_id","name","getConversations","then","res","isGroup","some","userId","Participants","response","get","data","LastSeen","ConversationsList","map","conversation","UpdatedConversation","Name","ConversationImage","image","err","console","log","getSearchConverastions","str","SearchResult","filter","includes","createConversation","ids","groupFlag","length","status","message","ConversationExists","find","participants","addContactToConversation","contact","push","phone","imageName","createdDate","parts","Intl","DateTimeFormat","hc","year","month","day","hour","minute","timeZone","formatToParts","Date","reduce","acc","part","type","value","Object","create","FormData","append","post","url","newConversation","creatorId","Messages","LastMessage","sender","description","Response","prevConversations","UpdateConversation","updatedConversation","updateDBConv","addCurrentParticipant","put","UpdatedConversations","emit","forEach","addMessageToConversation","UpdatedConv","play","newListOfConversations","newConv","off","updateSenderConversation","AddMessage","newListOfConcversations","sendMessage","text","imageFlag","imageURL","recordURL","time","recordFlag","CurrentMessage","timeSent","containsImage","containsRecord"],"mappings":"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","sourcesContent":["import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\nimport Conversations from \"../components/conversations\";\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const { socket, ConnectedUsers } = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n  const [showDetails,setShowDetails] =useState(false)\r\n\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n    async function fetchData() {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === conversationId)\r\n          {\r\n             setTypingFlag(user.name)\r\n          }\r\n        }\r\n    } )\r\n\r\n    socket.current.on('update-conversation',async ()=>\r\n    {\r\n      getConversations().then(res=> setConversations(res))\r\n    \r\n    })\r\n  }\r\n  fetchData();\r\n  },[selectedConversation])\r\n\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() {\r\n    if(selectedConversation)\r\n    {\r\n    if(!selectedConversation.isGroup)\r\n     {\r\n      if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n      {\r\n        setCurrentConversationIsConnected('')\r\n      }\r\n      else\r\n      {\r\n        let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n        setCurrentConversationIsConnected(response.data.LastSeen)\r\n      }\r\n     }\r\n    }\r\n  }\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,selectedConversation])\r\n\r\n  useEffect(() =>\r\n  {\r\n    async function fetchData() {\r\n     getConversations().then(res=> setConversations(res))\r\n    }\r\n    fetchData();\r\n    \r\n  }, []);\r\n\r\n  async function getConversations()\r\n  {\r\n    try{\r\n       let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n       let ConversationsList = response.data.map((conversation) =>\r\n       {\r\n         let UpdatedConversation= conversation\r\n         if (!conversation.Participants.isGroup && conversation.Name === sessionStorage[\"name\"])\r\n            UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n\r\n         if(selectedConversation)\r\n         {\r\n           if(selectedConversation._id === UpdatedConversation._id)\r\n              setSelectedConversation(UpdatedConversation)\r\n         }\r\n          \r\n         return UpdatedConversation;\r\n       })\r\n\r\n      return ConversationsList \r\n    } catch (err) {console.log(err);}\r\n  }\r\n\r\n\r\n\r\n\r\n  async function getSearchConverastions(str)\r\n  {\r\n\r\n        getConversations().then(res=>\r\n        {\r\n\r\n         let SearchResult = res.filter(conversation=> \r\n            conversation.Name.includes(str) ===true\r\n          )\r\n    \r\n          setConversations(SearchResult)\r\n        })\r\n  }\r\n        \r\n\r\n\r\n  async function createConversation(ids, name, image,groupFlag) {\r\n    let ConversationImage = image;\r\n    let isGroup = groupFlag;\r\n\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      return {status:'error',message:'no participants choosen'};\r\n    }\r\n\r\n    //check if conversation already exists and it's not a group\r\n    let ConversationExists = null;\r\n    if (ids.length === 1 && !isGroup) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      let createdDate=''\r\n\r\n      //if group\r\n      \r\n      if (isGroup) {\r\n\r\n\r\n        let parts = new Intl.DateTimeFormat('en', {\r\n          hc: 'h12',\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          timeZone:'Asia/Jerusalem'})\r\n        .formatToParts(new Date())\r\n        .reduce((acc, part) => {\r\n          acc[part.type] = part.value;\r\n          return acc;\r\n        }, Object.create(null));\r\n\r\n       \r\n    \r\n        createdDate= `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}`;\r\n\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        try{\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n        ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      }\r\n \r\n    \r\n      let newConversation = {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: [],\r\n        LastMessage: { id: \"\", sender: \"\", message: \"\" },\r\n        ConversationImage: ConversationImage,\r\n        isGroup:isGroup,\r\n        createdDate:createdDate,\r\n        description: \"Add Description\",\r\n      };\r\n\r\n      //updateDB\r\n      try {\r\n        console.log(newConversation)\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n\r\n        if (Response.data.status === \"created\") {\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent\r\n          if (Response.data.conversation.Messages.length > 0)\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n          // }\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  async function UpdateConversation(updatedConversation)\r\n  {\r\n\r\n    let updateDBConv= updatedConversation\r\n    console.log(updatedConversation)\r\n    if(!(updatedConversation.LastMessage.message.includes('left')))\r\n    {\r\n      console.log('here')\r\n     let addCurrentParticipant= {id: info.id,phone: info.phone,name: info.name,image: info.imageName,}\r\n     let participants=[...updatedConversation.Participants,addCurrentParticipant]\r\n     updateDBConv={...updateDBConv,Participants:participants}\r\n    }\r\n    delete updateDBConv._id\r\n\r\n\r\n      try{\r\n        let response=await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+ selectedConversation._id,updateDBConv,config)\r\n        if(response.data.status==='Updated')\r\n        {\r\n\r\n          console.log(response.data)\r\n          let UpdatedConversations=[]\r\n         if(!(updatedConversation.LastMessage.message.includes('left')))\r\n         {\r\n\r\n          socket.current.emit('conversation-changed',updatedConversation)\r\n          setSelectedConversation(updatedConversation)\r\n      \r\n        \r\n           conversations.forEach(conversation=>\r\n            {\r\n              \r\n              if(conversation._id===updatedConversation._id)\r\n              {\r\n                   \r\n                  UpdatedConversations.push(updatedConversation)\r\n              }\r\n              else UpdatedConversations.push(conversation)\r\n            })\r\n          }\r\n          else\r\n          {\r\n            socket.current.emit('conversation-changed',selectedConversation)\r\n             setSelectedConversation({})\r\n             UpdatedConversations=Conversations.filter(conversation=> conversation._id===updatedConversation._id)\r\n          }\r\n\r\n            socket.current.emit('conversation-changed',updatedConversation)\r\n\r\n\r\n\r\n            setConversations(UpdatedConversations)\r\n          \r\n            \r\n        }\r\n      }catch(err){console.log(err)}\r\n  }\r\n\r\n \r\n\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n   {\r\n\r\n      audio.play()\r\n\r\n      let ConversationExists = false;\r\n      let newListOfConversations = RefConversations.current.map((conversation) =>{\r\n          if (conversation._id === UpdatedConv._id) {\r\n            ConversationExists = true;\r\n            let newConv = { ...conversation,\r\n              Messages: UpdatedConv.Messages,\r\n              LastMessage: UpdatedConv.LastMessage,};\r\n            if (currentConversationRef.current) {\r\n              if (currentConversationRef.current._id === UpdatedConv._id)\r\n                setSelectedConversation(newConv);\r\n            }\r\n\r\n            return newConv;\r\n          } else return conversation;\r\n        }\r\n      );\r\n\r\n\r\n      if (!ConversationExists) {\r\n        if (!UpdatedConv.isGroup)\r\n         {\r\n           let newConversation = { ...UpdatedConv,\r\n            Name: UpdatedConv.Participants[0].name,\r\n            ConversationImage: UpdatedConv.Participants[0].imageName,\r\n          };\r\n          setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n        } else\r\n          setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n      } else setConversations(newListOfConversations);\r\n    },[setConversations]);\r\n\r\n  useEffect(() => {\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  }, [conversations, selectedConversation]);\r\n\r\n\r\n  const updateSenderConversation = (AddMessage) => {\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => {\r\n      if (conversation._id === AddMessage._id) {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } else return conversation;\r\n    });\r\n\r\n    if (ConversationExists) {\r\n      setConversations(newListOfConcversations);\r\n    } else\r\n      setConversations((prevConversations) => [\r\n        ...prevConversations,\r\n        AddMessage,\r\n      ]);\r\n  };\r\n\r\n\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n      let parts = new Intl.DateTimeFormat('en', {\r\n      hc: 'h12',\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      image: info.imageName,\r\n    };\r\n    let AddMessage = {\r\n      ...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n    socket.current.emit(\"send-message\", {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n        showDetails,\r\n        setShowDetails,\r\n        UpdateConversation\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}