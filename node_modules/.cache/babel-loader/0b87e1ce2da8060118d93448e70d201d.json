{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chat.js\",\n    _s = $RefreshSig$();\n\nimport '../css/chat.css';\nimport React, { useRef } from 'react';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { Avatar, IconButton } from '@material-ui/core';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport Picker from 'emoji-picker-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n\n  const [Text, setText] = useState('');\n  const {\n    sendMessage,\n    selectedConversation\n  } = useConversations();\n  const [chosenEmoji, setChosenEmoji] = useState(null);\n  const [emojiFlag, setEmojiFlag] = useState(false);\n  const setRef = useCallback(node => {\n    if (node) node.scrollIntoView({\n      smooth: true\n    });\n  }, []);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    let currentConversation = selectedConversation;\n    sendMessage(currentConversation, Text);\n    setText(' ');\n  }\n\n  const onEmojiClick = (event, emojiObject) => {\n    setChosenEmoji(emojiObject);\n  };\n\n  const AddToText = () => {\n    setText(Text + chosenEmoji.emoji);\n    setChosenEmoji(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_header\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: process.env.PUBLIC_URL + selectedConversation.ConversationImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_header_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", selectedConversation.Name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" last seen...?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_body\",\n      children: selectedConversation.Messages.map((message, index) => {\n        const lastMessage = selectedConversation.Messages.length - 1 === index;\n        let sender = message.id == sessionStorage['id'] ? 'chat_message' : ' chat_message chat_reciever';\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: sender,\n          ref: lastMessage ? setRef : null,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sender_name\",\n            children: message.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message_content\",\n            children: message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 20\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_footer\",\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => setEmojiFlag(!emojiFlag),\n        children: /*#__PURE__*/_jsxDEV(InsertEmoticonIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 16\n      }, this), emojiFlag ? /*#__PURE__*/_jsxDEV(Picker, {\n        onEmojiClick: () => onEmojiClick()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 30\n      }, this) : '', chosenEmoji != null ? {\n        AddToText\n      } : '', /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"message_section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"message_input\",\n          value: Text,\n          onChange: e => setText(e.target.value),\n          type: \"text\",\n          placeholder: \"type a message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \" send \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(MicIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"C+u2DM/FLDFY+8lCIaFuGk7LH94=\", false, function () {\n  return [useConversations];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chat.js"],"names":["React","useRef","useState","useEffect","useCallback","useConversations","Avatar","IconButton","InsertEmoticonIcon","MicIcon","Picker","Chat","Text","setText","sendMessage","selectedConversation","chosenEmoji","setChosenEmoji","emojiFlag","setEmojiFlag","setRef","node","scrollIntoView","smooth","handleSubmit","e","preventDefault","currentConversation","onEmojiClick","event","emojiObject","AddToText","emoji","process","env","PUBLIC_URL","ConversationImage","Name","Messages","map","message","index","lastMessage","length","sender","id","sessionStorage","name","target","value"],"mappings":"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","sourcesContent":["import '../css/chat.css'\r\nimport React, { useRef } from 'react'\r\nimport { useState ,useEffect,useCallback} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport Picker from 'emoji-picker-react';\r\n\r\n\r\n\r\n\r\nexport default function Chat() {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {sendMessage,selectedConversation} = useConversations()\r\n    const [chosenEmoji, setChosenEmoji] = useState(null);\r\n    const [emojiFlag,setEmojiFlag] = useState(false)\r\n\r\n\r\n    const setRef = useCallback((node) => {\r\n        if(node)\r\n          node.scrollIntoView({smooth:true})\r\n        },[])\r\n\r\n\r\n    function handleSubmit(e)\r\n    {\r\n      e.preventDefault()\r\n      let currentConversation=selectedConversation\r\n      sendMessage(currentConversation,Text)\r\n      setText(' ')\r\n    }\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setChosenEmoji(emojiObject);\r\n      };\r\n\r\n    const AddToText= () =>\r\n    {\r\n        setText(Text + chosenEmoji.emoji)\r\n        setChosenEmoji(null)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='chat'>\r\n            <div className='chat_header'>\r\n                <Avatar src={process.env.PUBLIC_URL +selectedConversation.ConversationImage}/>\r\n                <div className='chat_header_info'>\r\n                   <h2> {selectedConversation.Name} </h2> \r\n                   <p> last seen...?</p>\r\n               </div>\r\n           </div>\r\n    \r\n           <div className='chat_body'>\r\n               {selectedConversation.Messages.map((message,index)=>\r\n               {\r\n                   const lastMessage = selectedConversation.Messages.length -1 === index\r\n                   let sender = message.id==sessionStorage['id']? 'chat_message' : ' chat_message chat_reciever'\r\n\r\n                   return (\r\n                  \r\n                    <p className={sender} ref={lastMessage ? setRef : null}>\r\n\r\n                   <span className='sender_name'>{message.name}</span>\r\n                   <span className='message_content'>{message.message}</span> </p>\r\n              \r\n                   )}\r\n                )}\r\n\r\n           </div>\r\n\r\n           <div className='chat_footer'>\r\n               <IconButton  onClick={()=>setEmojiFlag(!emojiFlag)}>\r\n                 <InsertEmoticonIcon fontSize='large'/>\r\n                </IconButton>\r\n                {emojiFlag?  <Picker onEmojiClick={()=>onEmojiClick()} />: ''}\r\n                {chosenEmoji!= null? {AddToText} : ''}\r\n                 <form onSubmit={handleSubmit} className='message_section'>\r\n                    <input className='message_input' value={Text} onChange={(e)=>setText(e.target.value)} type='text' placeholder='type a message'/>\r\n                    <button type='submit' > send </button>\r\n                 </form>\r\n                 <IconButton>\r\n                  <MicIcon fontSize='large'/>\r\n               </IconButton>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}