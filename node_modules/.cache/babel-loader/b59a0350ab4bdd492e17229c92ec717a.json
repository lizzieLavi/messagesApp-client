{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useUser } from './userprovider';\nimport { useSocket } from './socketprovider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const [selectedConversationDetails, setSelectedConversationDetails] = useState();\n  const [numberOfConversations, setNumberOfConversations] = useState(0);\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const socket = useSocket();\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n\n  async function createConversation(ids, conversationName, ConversationImage) {\n    if (ids.length == 0) console.log('no participants choosen');\n    let participants = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n\n    if (ids.length > 1) {\n      const formData = new FormData();\n      formData.append('file', ConversationImage);\n      const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddProfilePic\", formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const {\n        fileName,\n        filePath\n      } = fileResponse.data;\n      ConversationImage = 'uploads/' + fileName;\n    }\n\n    let newConversation = {\n      name: conversationName,\n      participants: participants,\n      messages: [],\n      lastMessage: '',\n      conversationImage: ConversationImage\n    };\n    setConversations(prevConversations => {\n      return [...prevConversations, newConversation];\n    });\n\n    try {\n      console.log('here');\n      let response = await axios.post(\"http://localhost:5000/api/conversations\", newConversation, config);\n      console.log(response);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const addMessageToConversation = useCallback(({\n    currentConversation,\n    message,\n    fromMe,\n    sender\n  }) => {\n    setConversations(prevConversations => {\n      let flag = 0;\n      let NewConversations = prevConversations.map(conversation => {\n        if (conversation.id === currentConversation.id) {\n          flag = 1;\n          let CurrentMessage = {\n            id: sender.id,\n            name: sender.name,\n            message: message,\n            fromMe: fromMe\n          };\n          let updatedConversation = { ...conversation,\n            lastMessage: CurrentMessage,\n            messages: [...conversation.messages, CurrentMessage]\n          };\n          setSelectedConversationDetails(updatedConversation);\n          return updatedConversation;\n        } else return conversation;\n      });\n\n      if (flag == 0) {\n        let conversationName = '';\n\n        if (currentConversation.name == sessionStorage['name']) {\n          conversationName = currentConversation.participants[0].name;\n        } else conversationName = currentConversation.name;\n\n        let CurrentMessage = {\n          id: sender.id,\n          name: sender.name,\n          message: message,\n          fromMe: fromMe\n        };\n        let newConversation = {\n          id: numberOfConversations,\n          participants: currentConversation.participants,\n          messages: [CurrentMessage],\n          lastMessage: CurrentMessage,\n          name: conversationName\n        };\n        NewConversations = [...prevConversations, newConversation];\n        setNumberOfConversations(numberOfConversations + 1);\n      }\n\n      console.log(NewConversations);\n      return NewConversations;\n    });\n  }, [setConversations]);\n\n  function sendMessage(currentConversation, text) {\n    let sender = {\n      id: sessionStorage['id'],\n      name: sessionStorage['name']\n    };\n    socket.emit('send-message', {\n      currentConversation: currentConversation,\n      message: text,\n      sender: sender\n    });\n    addMessageToConversation({\n      currentConversation: selectedConversationDetails,\n      message: text,\n      fromMe: true,\n      sender: sender\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('recieve-message');\n  }, [socket, addMessageToConversation]);\n\n  function setSelectedConversation(index) {\n    setSelectedConversationIndex(index);\n    setSelectedConversationDetails(conversations[index]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversationDetails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"aSB8amf9fnK5Zo49ToShNQH5ves=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","selectedConversationDetails","setSelectedConversationDetails","numberOfConversations","setNumberOfConversations","createGroupFlag","setCreateGroupFlag","socket","config","sessionStorage","createConversation","ids","conversationName","ConversationImage","length","console","log","participants","map","addContactToConversation","filter","contact","formData","FormData","append","fileResponse","post","headers","fileName","filePath","data","newConversation","name","messages","lastMessage","conversationImage","prevConversations","response","err","addMessageToConversation","currentConversation","message","fromMe","sender","flag","NewConversations","conversation","CurrentMessage","updatedConversation","sendMessage","text","emit","on","off","setSelectedConversation","index"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useUser } from './userprovider'\r\nimport { useSocket } from './socketprovider'\r\nimport axios from 'axios'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts} = useUser()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversationIndex,setSelectedConversationIndex] = useState(0)\r\n  const [selectedConversationDetails,setSelectedConversationDetails] = useState()\r\n  const [numberOfConversations,setNumberOfConversations] =useState(0)\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const socket = useSocket()\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}};\r\n\r\n  \r\n  async function createConversation(ids,conversationName,ConversationImage) \r\n  {\r\n\r\n    if(ids.length == 0)\r\n     console.log('no participants choosen')\r\n     let participants =ids.map(id=>\r\n    { \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n    if(ids.length >1)\r\n    {\r\n      const formData= new FormData();\r\n      formData.append('file',ConversationImage)\r\n      const fileResponse =await axios.post(\"http://localhost:5000/api/conversations/AddProfilePic\",formData,{headers: {\r\n      'Content-Type': 'multipart/form-data'}})\r\n      const {fileName,filePath} =fileResponse.data\r\n      ConversationImage ='uploads/'+fileName\r\n    }\r\n\r\n    let newConversation = {name:conversationName,participants:participants,messages:[],lastMessage:'',conversationImage:ConversationImage}\r\n\r\n    setConversations(prevConversations =>\r\n    {\r\n      return [...prevConversations,newConversation]\r\n    })\r\n    try{\r\n      console.log('here')\r\n    let response = await axios.post(\"http://localhost:5000/api/conversations\",newConversation,config)\r\n    console.log(response)\r\n    } catch(err){console.log(err)}\r\n\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(({currentConversation, message, fromMe, sender})=>\r\n  {\r\n    setConversations(prevConversations=>\r\n      {\r\n        let flag=0;\r\n         let NewConversations =prevConversations.map(conversation=>\r\n          {\r\n            if(conversation.id === currentConversation.id)\r\n            {\r\n              flag=1;\r\n              let CurrentMessage ={ id: sender.id, name: sender.name,message: message, fromMe: fromMe}\r\n              let updatedConversation ={...conversation,lastMessage : CurrentMessage,\r\n                  messages: [...conversation.messages , CurrentMessage]}\r\n                \r\n\r\n              setSelectedConversationDetails(updatedConversation)\r\n              return updatedConversation\r\n            }\r\n\r\n            else return conversation;\r\n          })\r\n          if(flag ==0)\r\n          {\r\n            let conversationName=''\r\n            if(currentConversation.name == sessionStorage['name'])\r\n            {\r\n              conversationName=currentConversation.participants[0].name\r\n            }\r\n\r\n            else conversationName=currentConversation.name\r\n            let CurrentMessage ={ id: sender.id, name: sender.name,message: message, fromMe: fromMe}\r\n            let newConversation = {id: numberOfConversations,participants:currentConversation.participants,messages:[CurrentMessage],lastMessage:CurrentMessage,name:conversationName}\r\n            NewConversations=[...prevConversations,newConversation]\r\n            setNumberOfConversations(numberOfConversations +1)\r\n          }\r\n          console.log(NewConversations)\r\n          return NewConversations;\r\n      })\r\n  },[setConversations],)\r\n\r\n  function sendMessage(currentConversation,text) {\r\n\r\n\r\n    let sender ={id: sessionStorage['id'], name: sessionStorage['name']}\r\n\r\n    socket.emit('send-message', {currentConversation:currentConversation ,message:text,sender:sender})\r\n    addMessageToConversation({currentConversation:selectedConversationDetails,message:text ,fromMe: true,sender:sender})\r\n\r\n  }\r\n\r\n  \r\n  useEffect(() =>\r\n  {\r\n    if(socket == null)  return\r\n    \r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('recieve-message')\r\n\r\n\r\n  },[socket,addMessageToConversation]) \r\n\r\n\r\n\r\n  function setSelectedConversation(index)\r\n  {\r\n       setSelectedConversationIndex(index)\r\n       setSelectedConversationDetails(conversations[index])\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversationDetails}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}