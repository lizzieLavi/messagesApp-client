{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chat.js\",\n    _s = $RefreshSig$();\n\nimport '../css/chat.css';\nimport React, { useRef } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { Avatar, IconButton } from '@material-ui/core';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n\n  const [Text, setText] = useState('');\n  const {\n    sendMessage,\n    selectedConversationDetails\n  } = useConversations();\n  const lastMessageRef = useRef();\n  useEffect(() => {\n    if (lastMessageRef.current) lastMessageRef.current.scrollIntoView({\n      smooth: true\n    });\n  }, lastMessageRef.current);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    sendMessage(selectedConversationDetails, Text);\n    setText(' ');\n  }\n\n  function getChatName() {\n    let roomName = '';\n    selectedConversationDetails.participants.map((participant, index) => {\n      if (selectedConversationDetails.participants.length - 1 > index) roomName = roomName + ' ' + participant.name + ',';else roomName = roomName + participant.name;\n    });\n    return roomName;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_header\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_header_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", getChatName(), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" last seen...?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_body\",\n      children: [ref = selectedConversationDetails.lastMessage !== '' ? lastMessageRef : null, selectedConversationDetails.messages.map(message => {\n        let sender = message.fromMe == true ? 'chat_message' : ' chat_message chat_reciever';\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: sender,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sender_name\",\n            children: message.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message_content\",\n            children: message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 20\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_footer\",\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(InsertEmoticonIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"message_section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"message_input\",\n          value: Text,\n          onChange: e => setText(e.target.value),\n          type: \"text\",\n          placeholder: \"type a message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \" send \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(MicIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"ClRTdC9S+iuRbxPcpOPTSckM/Dc=\", false, function () {\n  return [useConversations];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chat.js"],"names":["React","useRef","useState","useEffect","useConversations","Avatar","IconButton","InsertEmoticonIcon","MicIcon","Chat","Text","setText","sendMessage","selectedConversationDetails","lastMessageRef","current","scrollIntoView","smooth","handleSubmit","e","preventDefault","getChatName","roomName","participants","map","participant","index","length","name","ref","lastMessage","messages","message","sender","fromMe","target","value"],"mappings":"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","sourcesContent":["import '../css/chat.css'\r\nimport React, { useRef } from 'react'\r\nimport { useState ,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\n\r\n\r\n\r\n\r\nexport default function Chat() {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {sendMessage,selectedConversationDetails} = useConversations()\r\n    const lastMessageRef = useRef()\r\n\r\n    useEffect(()=>\r\n    {\r\n        if(lastMessageRef.current)\r\n          lastMessageRef.current.scrollIntoView({smooth:true})\r\n\r\n    },lastMessageRef.current)\r\n\r\n    function handleSubmit(e)\r\n    {\r\n      e.preventDefault()\r\n      sendMessage(selectedConversationDetails,Text)\r\n      setText(' ')\r\n    }\r\n\r\n    function getChatName()\r\n    {\r\n        let roomName=''\r\n          selectedConversationDetails.participants.map((participant,index) =>\r\n            {\r\n                if(selectedConversationDetails.participants.length-1 > index)\r\n                  roomName= roomName+ ' '+ participant.name + ',';\r\n                else \r\n                roomName = roomName +participant.name\r\n                \r\n            })\r\n        return roomName\r\n    }\r\n\r\n    return (\r\n        <div className='chat'>\r\n            <div className='chat_header'>\r\n                <Avatar/>\r\n                <div className='chat_header_info'>\r\n                   <h2> {getChatName()} </h2> \r\n                   <p> last seen...?</p>\r\n               </div>\r\n           </div>\r\n\r\n           <div className='chat_body'>\r\n               {ref = selectedConversationDetails.lastMessage !== ''? lastMessageRef :null}\r\n               {selectedConversationDetails.messages.map(message=>\r\n               {\r\n                   let sender = message.fromMe==true? 'chat_message' : ' chat_message chat_reciever'\r\n\r\n                   return (\r\n                    <p className={sender}>\r\n                   <span className='sender_name'>{message.name}</span>\r\n                   <span className='message_content'>{message.message}</span> </p>) \r\n                   }\r\n                )}\r\n \r\n           </div>\r\n\r\n           <div className='chat_footer'>\r\n               <IconButton>\r\n                 <InsertEmoticonIcon fontSize='large'/>\r\n                </IconButton>\r\n                 <form onSubmit={handleSubmit} className='message_section'>\r\n                    <input className='message_input' value={Text} onChange={(e)=>setText(e.target.value)} type='text' placeholder='type a message'/>\r\n                    <button type='submit' > send </button>\r\n                 </form>\r\n                 <IconButton>\r\n                  <MicIcon fontSize='large'/>\r\n               </IconButton>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}