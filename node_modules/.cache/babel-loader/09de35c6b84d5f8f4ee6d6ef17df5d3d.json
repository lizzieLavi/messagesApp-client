{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\userprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport axios from 'axios';\nimport { useSocket } from \"./socketprovider\";\nimport Contacts from '../components/contacts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/React.createContext();\nexport function useUser() {\n  _s();\n\n  return useContext(UserContext);\n}\n\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function UserProvider({\n  children\n}) {\n  _s2();\n\n  const [contacts, setContacts] = useState([]);\n  const [info, setInfo] = useState({}); // const infoRef = useRef(info)\n\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  const {\n    ConnectedUsers\n  } = useSocket();\n  /* useEffect(async ()=>\r\n   {\r\n   \r\n       infoRef.current= info\r\n        \r\n    }, [setInfo]);*/\n\n  function getUpdatedContacts(contactsList) {\n    return Promise.all(contactsList.map(async contact => {\n      let newContact = null;\n      let userIsConnected = ConnectedUsers.some(user => user.userId == contact.id);\n\n      if (userIsConnected) {\n        contact.connected = true;\n        newContact = contact;\n      } else {\n        const contactResponse = await axios.get(\"http://localhost:5000/api/logIn/\" + contact.id, config);\n        let updatedContact = { ...contact,\n          id: contactResponse.data._id,\n          name: contactResponse.data.name,\n          phone: contactResponse.data.phone,\n          imageName: contactResponse.data.imageName,\n          LastSeen: contactResponse.data.LastSeen,\n          connected: false\n        };\n        newContact = updatedContact;\n      }\n\n      if (newContact) return newContact;\n    }));\n  }\n\n  useEffect(async () => {\n    const response = await axios.get(\"http://localhost:5000/api/logIn/\" + sessionStorage['id'], config);\n    setInfo({\n      id: response.data._id,\n      name: response.data.name,\n      phone: response.data.phone,\n      imageName: response.data.imageName,\n      LastSeen: response.data.LastSeen\n    });\n    setContacts(response.data.contacts);\n    /* if(ConnectedUsers.length>0)\r\n     {\r\n     getUpdatedContacts(userContacts).then(res=>setContacts(res))\r\n     }*/\n  }, [setInfo]);\n\n  const createContact = async phone => {\n    if (phone == info.phone) {\n      console.log('cant Add yourself');\n      return;\n    }\n\n    let checkIfExists = contacts.filter(contact => contact.phone == phone);\n\n    if (checkIfExists.length != 0) {\n      console.log('already exists');\n      return;\n    }\n\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/logIn/getByPhone/\" + phone, config);\n\n      if (response != 'no such user') {\n        const contact = {\n          id: response.data._id,\n          phone: response.data.phone,\n          name: response.data.name,\n          imageName: response.data.imageName\n        };\n        let newContacts = [...contacts, contact];\n        setContacts(newContacts);\n        let UpdatedUser = { ...info,\n          contacts: newContacts\n        };\n\n        try {\n          await axios.put(\"http://localhost:5000/api/logIn/\" + sessionStorage['id'], UpdatedUser, {\n            'headers': {\n              'x-access-token': sessionStorage['config']\n            }\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      } else console.log('user dosent exist');\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      setContacts,\n      setInfo,\n      info,\n      config,\n      contacts,\n      createContact\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(UserProvider, \"7k5jN4Erq3NPWGPx6rIicXw32ms=\", false, function () {\n  return [useSocket];\n});\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/userprovider.js"],"names":["React","useState","useEffect","useContext","useRef","axios","useSocket","Contacts","UserContext","createContext","useUser","UserProvider","children","contacts","setContacts","info","setInfo","config","sessionStorage","ConnectedUsers","getUpdatedContacts","contactsList","Promise","all","map","contact","newContact","userIsConnected","some","user","userId","id","connected","contactResponse","get","updatedContact","data","_id","name","phone","imageName","LastSeen","response","createContact","console","log","checkIfExists","filter","length","newContacts","UpdatedUser","put","err"],"mappings":";;;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AACA,MAAMC,WAAW,gBAAGR,KAAK,CAACS,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACxB,SAAOP,UAAU,CAACK,WAAD,CAAjB;AACD;;GAFeE,O;;AAIhB,OAAQ,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EACR;AAAA;;AACE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACc,IAAD,EAAMC,OAAN,IAAgBf,QAAQ,CAAC,EAAD,CAA9B,CAFF,CAGC;;AACC,QAAMgB,MAAM,GAAE;AAAC,eAAW;AAAC,wBAAiBC,cAAc,CAAC,QAAD;AAAhC;AAAZ,GAAd;AACA,QAAM;AAACC,IAAAA;AAAD,MAAoBb,SAAS,EAAnC;AAGD;AACD;AACA;AACA;AACA;AACA;;AAEG,WAASc,kBAAT,CAA4BC,YAA5B,EACA;AAEC,WAAOC,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,GAAb,CAAiB,MAAOC,OAAP,IACpC;AACE,UAAIC,UAAU,GAAG,IAAjB;AACA,UAAIC,eAAe,GAAGR,cAAc,CAACS,IAAf,CAAoBC,IAAI,IAAIA,IAAI,CAACC,MAAL,IAAeL,OAAO,CAACM,EAAnD,CAAtB;;AACA,UAAGJ,eAAH,EACA;AACEF,QAAAA,OAAO,CAACO,SAAR,GAAmB,IAAnB;AACAN,QAAAA,UAAU,GAACD,OAAX;AACD,OAJD,MAOA;AACE,cAAMQ,eAAe,GAAG,MAAM5B,KAAK,CAAC6B,GAAN,CAAU,qCAAmCT,OAAO,CAACM,EAArD,EAAwDd,MAAxD,CAA9B;AACE,YAAIkB,cAAc,GAAE,EAAC,GAAGV,OAAJ;AAAYM,UAAAA,EAAE,EAACE,eAAe,CAACG,IAAhB,CAAqBC,GAApC;AAAwCC,UAAAA,IAAI,EAACL,eAAe,CAACG,IAAhB,CAAqBE,IAAlE;AAAuEC,UAAAA,KAAK,EAACN,eAAe,CAACG,IAAhB,CAAqBG,KAAlG;AAClBC,UAAAA,SAAS,EAACP,eAAe,CAACG,IAAhB,CAAqBI,SADb;AACuBC,UAAAA,QAAQ,EAACR,eAAe,CAACG,IAAhB,CAAqBK,QADrD;AAC8DT,UAAAA,SAAS,EAAC;AADxE,SAApB;AAEDN,QAAAA,UAAU,GAAES,cAAZ;AAEF;;AAEF,UAAGT,UAAH,EACC,OAAOA,UAAP;AAED,KAtBkB,CAAZ,CAAP;AAuBA;;AAEDxB,EAAAA,SAAS,CAAC,YACV;AACC,UAAMwC,QAAQ,GAAG,MAAMrC,KAAK,CAAC6B,GAAN,CAAU,qCAAmChB,cAAc,CAAC,IAAD,CAA3D,EAAkED,MAAlE,CAAvB;AACAD,IAAAA,OAAO,CAAC;AAACe,MAAAA,EAAE,EAACW,QAAQ,CAACN,IAAT,CAAcC,GAAlB;AAAsBC,MAAAA,IAAI,EAACI,QAAQ,CAACN,IAAT,CAAcE,IAAzC;AAA8CC,MAAAA,KAAK,EAACG,QAAQ,CAACN,IAAT,CAAcG,KAAlE;AAAwEC,MAAAA,SAAS,EAACE,QAAQ,CAACN,IAAT,CAAcI,SAAhG;AAA0GC,MAAAA,QAAQ,EAACC,QAAQ,CAACN,IAAT,CAAcK;AAAjI,KAAD,CAAP;AACA3B,IAAAA,WAAW,CAAC4B,QAAQ,CAACN,IAAT,CAAcvB,QAAf,CAAX;AACD;AACH;AACA;AACA;AAEI,GAVQ,EAUP,CAACG,OAAD,CAVO,CAAT;;AAaD,QAAM2B,aAAa,GAAG,MAAMJ,KAAN,IACtB;AAEE,QAAGA,KAAK,IAAExB,IAAI,CAACwB,KAAf,EACA;AACEK,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACC;AACF;;AAED,QAAIC,aAAa,GAAGjC,QAAQ,CAACkC,MAAT,CAAgBtB,OAAO,IAAGA,OAAO,CAACc,KAAR,IAAeA,KAAzC,CAApB;;AAEA,QAAGO,aAAa,CAACE,MAAd,IAAwB,CAA3B,EACA;AACEJ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACD;;AAED,QAAG;AAED,YAAMH,QAAQ,GAAE,MAAMrC,KAAK,CAAC6B,GAAN,CAAU,gDAAgDK,KAA1D,EAAgEtB,MAAhE,CAAtB;;AAIA,UAAGyB,QAAQ,IAAI,cAAf,EACA;AACC,cAAMjB,OAAO,GAAG;AAACM,UAAAA,EAAE,EAACW,QAAQ,CAACN,IAAT,CAAcC,GAAlB;AAAsBE,UAAAA,KAAK,EAACG,QAAQ,CAACN,IAAT,CAAcG,KAA1C;AAAgDD,UAAAA,IAAI,EAACI,QAAQ,CAACN,IAAT,CAAcE,IAAnE;AAAwEE,UAAAA,SAAS,EAACE,QAAQ,CAACN,IAAT,CAAcI;AAAhG,SAAhB;AACA,YAAIS,WAAW,GAAG,CAAC,GAAGpC,QAAJ,EAAaY,OAAb,CAAlB;AACAX,QAAAA,WAAW,CAACmC,WAAD,CAAX;AACA,YAAIC,WAAW,GAAC,EAAC,GAAGnC,IAAJ;AAASF,UAAAA,QAAQ,EAACoC;AAAlB,SAAhB;;AACA,YAAG;AACD,gBAAM5C,KAAK,CAAC8C,GAAN,CAAU,qCAAqCjC,cAAc,CAAC,IAAD,CAA7D,EAAoEgC,WAApE,EAAgF;AAAC,uBAAW;AAAC,gCAAiBhC,cAAc,CAAC,QAAD;AAAhC;AAAZ,WAAhF,CAAN;AACD,SAFD,CAEE,OAAMkC,GAAN,EAAU;AAACR,UAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AAAiB;AAC9B,OATD,MAUKR,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAEN,KAlBD,CAkBE,OAAMO,GAAN,EAAU;AAACR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AAAiB;AAC/B,GApCD;;AAwCA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACtC,MAAAA,WAAD;AAAaE,MAAAA,OAAb;AAAqBD,MAAAA,IAArB;AAA0BE,MAAAA,MAA1B;AAAiCJ,MAAAA,QAAjC;AAA0C8B,MAAAA;AAA1C,KAA7B;AAAA,cACG/B;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAtGgBD,Y;UAMWL,S;;;KANXK,Y","sourcesContent":["\r\nimport React, { useState ,useEffect, useContext ,useRef} from 'react'\r\nimport axios from 'axios'\r\nimport { useSocket } from \"./socketprovider\";\r\nimport Contacts from '../components/contacts';\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n // const infoRef = useRef(info)\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n  const {ConnectedUsers } = useSocket();\r\n  \r\n\r\n /* useEffect(async ()=>\r\n  {\r\n  \r\n      infoRef.current= info\r\n       \r\n   }, [setInfo]);*/\r\n\r\n   function getUpdatedContacts(contactsList)\r\n   {\r\n\r\n    return Promise.all(contactsList.map(async (contact)=> \r\n    {\r\n      let newContact = null\r\n      let userIsConnected = ConnectedUsers.some(user => user.userId == contact.id)\r\n      if(userIsConnected)\r\n      {\r\n        contact.connected= true  \r\n        newContact=contact;\r\n      }\r\n\r\n      else\r\n      {\r\n        const contactResponse = await axios.get(\"http://localhost:5000/api/logIn/\"+contact.id,config)\r\n          let updatedContact= {...contact,id:contactResponse.data._id,name:contactResponse.data.name,phone:contactResponse.data.phone,\r\n            imageName:contactResponse.data.imageName,LastSeen:contactResponse.data.LastSeen,connected:false}\r\n         newContact= updatedContact;\r\n      \r\n      }    \r\n      \r\n     if(newContact)\r\n      return newContact\r\n\r\n    }))\r\n   }\r\n\r\n   useEffect(async () =>\r\n   {\r\n    const response = await axios.get(\"http://localhost:5000/api/logIn/\"+sessionStorage['id'],config);\r\n    setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen})\r\n    setContacts(response.data.contacts)\r\n   /* if(ConnectedUsers.length>0)\r\n    {\r\n    getUpdatedContacts(userContacts).then(res=>setContacts(res))\r\n    }*/\r\n\r\n   },[setInfo])\r\n\r\n\r\n  const createContact = async(phone) =>\r\n  {\r\n\r\n    if(phone==info.phone)\r\n    {\r\n      console.log('cant Add yourself')\r\n       return;\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.phone==phone)\r\n\r\n    if(checkIfExists.length != 0)\r\n    {\r\n      console.log('already exists')\r\n      return;\r\n    }\r\n\r\n    try{ \r\n\r\n      const response= await axios.get(\"http://localhost:5000/api/logIn/getByPhone/\" + phone,config)\r\n\r\n\r\n\r\n      if(response != 'no such user')\r\n      {\r\n       const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName}\r\n       let newContacts = [...contacts,contact]\r\n       setContacts(newContacts)\r\n       let UpdatedUser={...info,contacts:newContacts}\r\n       try{\r\n         await axios.put(\"http://localhost:5000/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n       } catch(err){console.log(err)}\r\n      }\r\n      else console.log('user dosent exist')\r\n     \r\n    } catch(err){console.log(err)}\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}