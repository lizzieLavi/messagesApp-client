{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useUser } from './userprovider';\nimport { useSocket } from './socketprovider';\nimport axios from 'axios';\nimport { useForkRef } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const socket = useSocket();\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n  useEffect(async () => {\n    try {\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\" + sessionStorage['id'], config);\n      let ConversationsList = response.data.map(conversation => {\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage['name']) {\n          let UpdatedNameConversation = conversation;\n          UpdatedNameConversation = { ...UpdatedNameConversation,\n            Name: conversation.Participants[0].name\n          };\n          return UpdatedNameConversation;\n        } else return conversation;\n      });\n      /*  if(ConversationsList.length>0)\r\n         setSelectedConversation(ConversationsList[0])*/\n\n      setConversations(ConversationsList);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (socket.current == null) return;\n    socket.current.on('receive-message', addMessageToConversation); // return () => socket.current.off('receive-message')\n  }, []);\n\n  async function createConversation(ids, name, image) {\n    let ConversationImage = image;\n    let isGroup = false; //no participants chosen\n\n    if (ids.length == 0) {\n      console.log('no participants choosen');\n      return;\n    } //check if conversation already exists\n\n\n    let ConversationExists = null;\n\n    if (ids.length == 1) {\n      ConversationExists = conversations.find(conversation => conversation.Name == name);\n    }\n\n    if (ConversationExists) setSelectedConversation(ConversationExists); //create new conversation\n    else {\n      //get conversation participants\n      const participants = ids.map(id => {\n        let addContactToConversation = contacts.filter(contact => id === contact.id);\n        return addContactToConversation[0];\n      }); //add creator to participants\n\n      participants.push({\n        id: info.id,\n        name: info.name,\n        phone: info.phone,\n        image: info.ProfilePic\n      }); //if group\n\n      if (ids.length > 1) {\n        const formData = new FormData();\n        formData.append('file', ConversationImage);\n        const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\", formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        const {\n          fileName,\n          filePath\n        } = fileResponse.data;\n        ConversationImage = 'uploads/' + fileName;\n        isGroup = true;\n      }\n\n      let newConversation = {\n        Name: name,\n        creatorId: sessionStorage['id'],\n        Participants: participants,\n        Messages: [],\n        LastMessage: {\n          id: '',\n          sender: '',\n          message: ''\n        },\n        ConversationImage: ConversationImage,\n        isGroup\n      }; //updateDB\n\n      try {\n        let Response = await axios.post(\"http://localhost:5000/api/conversations\", newConversation, config);\n\n        if (Response.data.status == \"created\") {\n          /* if(Response.data.conversation.Name == sessionStorage['name'] )\r\n           {\r\n             let UpdatedNameConversation = Response.data.conversation\r\n             UpdatedNameConversation= {...UpdatedNameConversation,Name:Response.data.conversation.Participants[0].name,ConversationImage:Response.data.conversation.Participants[0].image}\r\n             setSelectedConversation(UpdatedNameConversation)\r\n             if(UpdatedNameConversation.Messages.length >0)\r\n            setConversations(prevConversations => { return [...prevConversations, Response.data.conversation]})\r\n          }\r\n          else\r\n          { */\n          setSelectedConversation(Response.data.conversation); //show conversation only if messages sent\n\n          if (Response.data.conversation.Messages.length > 0) setConversations(prevConversations => {\n            return [...prevConversations, Response.data.conversation];\n          }); // }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n\n  const addMessageToConversation = useCallback(async ({\n    UpdatedConv\n  }) => {\n    console.log(UpdatedConv);\n    let ConversationExists = false;\n    let newListOfConversations = conversations.map(conversation => {\n      if (conversation._id === UpdatedConv._id) {\n        let newConv = { ...conversation,\n          Messages: UpdatedConv.Messages,\n          LastMessage: UpdatedConv.LastMessage\n        };\n\n        if (selectedConversation) {\n          if (selectedConversation._id === UpdatedConv._id) setSelectedConversation(newConv);\n        }\n\n        ConversationExists = true;\n        return newConv;\n      } else return conversation;\n    });\n\n    if (!ConversationExists) {\n      if (!UpdatedConv.isGroup) {\n        let newConversation = { ...UpdatedConv,\n          Name: UpdatedConv.Participants[0].name,\n          image: UpdatedConv.Participants[0].image\n        };\n        setConversations(prevConversations => [...prevConversations, newConversation]);\n      }\n    } else setConversations(newListOfConversations);\n  }, [setConversations, selectedConversation, setSelectedConversation]);\n\n  const updateSenderConversation = AddMessage => {\n    setSelectedConversation(AddMessage);\n    setConversations(prevConversations => {\n      let newListOfConcversations = prevConversations.map(conversation => {\n        if (conversation._id == AddMessage._id) return AddMessage;else return conversation;\n      });\n      return newListOfConcversations;\n    });\n  };\n\n  function sendMessage(text) {\n    let CurrentMessage = {\n      id: info.id,\n      name: info.name,\n      message: text\n    };\n    let sender = {\n      id: info.id,\n      phone: info.phone,\n      name: info.name,\n      image: info.ProfilePic\n    };\n    let AddMessage = { ...selectedConversation,\n      Messages: [...selectedConversation.Messages, CurrentMessage],\n      LastMessage: CurrentMessage\n    };\n    socket.current.emit('send-message', {\n      sender: sender,\n      UpdatedConversation: AddMessage,\n      conversationId: selectedConversation._id\n    });\n    updateSenderConversation(AddMessage);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"yquEEqjmQbhFHYH6alVgwb9VVkc=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useUser","useSocket","axios","useForkRef","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","createGroupFlag","setCreateGroupFlag","socket","config","sessionStorage","response","get","ConversationsList","data","map","conversation","Participants","length","Name","UpdatedNameConversation","name","err","console","log","current","on","addMessageToConversation","createConversation","ids","image","ConversationImage","isGroup","ConversationExists","find","participants","addContactToConversation","filter","contact","push","phone","ProfilePic","formData","FormData","append","fileResponse","post","headers","fileName","filePath","newConversation","creatorId","Messages","LastMessage","sender","message","Response","status","prevConversations","UpdatedConv","newListOfConversations","_id","newConv","updateSenderConversation","AddMessage","newListOfConcversations","sendMessage","text","CurrentMessage","emit","UpdatedConversation","conversationId"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useUser } from './userprovider'\r\nimport { useSocket } from './socketprovider'\r\nimport axios from 'axios'\r\nimport { useForkRef } from '@material-ui/core'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts,info} = useUser()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversation,setSelectedConversation] = useState()\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const socket = useSocket()\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}};\r\n\r\n  useEffect(async () =>\r\n  {\r\n\r\n    try\r\n    {\r\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\"+sessionStorage['id'],config)\r\n      let ConversationsList =  response.data.map(conversation=>\r\n      {\r\n        if(conversation.Participants.length == 1 && conversation.Name == sessionStorage['name'] )\r\n        {\r\n          let UpdatedNameConversation = conversation\r\n          UpdatedNameConversation= {...UpdatedNameConversation,Name:conversation.Participants[0].name}\r\n  \r\n          return UpdatedNameConversation\r\n        }\r\n  \r\n        else return conversation\r\n          \r\n      })\r\n   /*  if(ConversationsList.length>0)\r\n      setSelectedConversation(ConversationsList[0])*/\r\n        \r\n      setConversations(ConversationsList)\r\n  \r\n     }catch(err){console.log(err)}\r\n\r\n     if (socket.current == null) return\r\n\r\n\r\n     socket.current.on('receive-message', addMessageToConversation)\r\n \r\n    // return () => socket.current.off('receive-message')\r\n\r\n  },[]) \r\n\r\nasync function createConversation(ids,name,image) \r\n  {\r\n    \r\n    let  ConversationImage= image\r\n    let isGroup = false\r\n\r\n    //no participants chosen\r\n    if(ids.length == 0)\r\n    {\r\n     console.log('no participants choosen')\r\n     return;\r\n    }\r\n\r\n\r\n    //check if conversation already exists\r\n    let ConversationExists = null\r\n    if(ids.length == 1)\r\n    {\r\n      ConversationExists = conversations.find(conversation => conversation.Name ==name)\r\n    }\r\n\r\n    if(ConversationExists)\r\n      setSelectedConversation(ConversationExists)\r\n\r\n\r\n    \r\n      //create new conversation\r\n    else\r\n    {\r\n      //get conversation participants\r\n      const participants =ids.map(id=>\r\n      { \r\n        let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n        return addContactToConversation[0]\r\n      })\r\n      \r\n      //add creator to participants\r\n      participants.push({id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic})\r\n    \r\n      //if group\r\n      if(ids.length > 1)\r\n      {\r\n        const formData= new FormData();\r\n        formData.append('file',ConversationImage)\r\n        const fileResponse =await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\",formData,{headers: {\r\n        'Content-Type': 'multipart/form-data'}})\r\n        const {fileName,filePath} =fileResponse.data\r\n        ConversationImage='uploads/'+fileName\r\n        isGroup = true\r\n      }\r\n\r\n      let newConversation = {Name:name,creatorId: sessionStorage['id'],Participants:participants,Messages:[],LastMessage:{id:'',sender:'',message:''},ConversationImage:ConversationImage,isGroup}\r\n   \r\n      //updateDB\r\n      try\r\n      {\r\n        let Response = await axios.post(\"http://localhost:5000/api/conversations\",newConversation,config)\r\n        if(Response.data.status == \"created\")\r\n        {\r\n         /* if(Response.data.conversation.Name == sessionStorage['name'] )\r\n          {\r\n            let UpdatedNameConversation = Response.data.conversation\r\n            UpdatedNameConversation= {...UpdatedNameConversation,Name:Response.data.conversation.Participants[0].name,ConversationImage:Response.data.conversation.Participants[0].image}\r\n            setSelectedConversation(UpdatedNameConversation)\r\n\r\n          if(UpdatedNameConversation.Messages.length >0)\r\n           setConversations(prevConversations => { return [...prevConversations, Response.data.conversation]})\r\n        }\r\n        else\r\n        { */\r\n          setSelectedConversation(Response.data.conversation)\r\n\r\n          //show conversation only if messages sent\r\n          if(Response.data.conversation.Messages.length>0)\r\n             setConversations(prevConversations => { return [...prevConversations, Response.data.conversation]})\r\n       // }\r\n       }\r\n    } catch(err){console.log(err)}\r\n    \r\n   }\r\n  }\r\n\r\n\r\n\r\nconst addMessageToConversation = useCallback(async({UpdatedConv}) =>\r\n{\r\n    console.log(UpdatedConv)\r\n    let ConversationExists =false\r\n   \r\n        let newListOfConversations = conversations.map(conversation=>\r\n          {\r\n            if(conversation._id === UpdatedConv._id)\r\n            {\r\n              let newConv = {...conversation, Messages:UpdatedConv.Messages,LastMessage:UpdatedConv.LastMessage}\r\n              if(selectedConversation)\r\n              {\r\n                 if(selectedConversation._id === UpdatedConv._id)\r\n                   setSelectedConversation(newConv)\r\n              }\r\n\r\n              ConversationExists =true\r\n              return newConv\r\n            }\r\n\r\n            else return conversation\r\n          })\r\n\r\n\r\n\r\n      if(!ConversationExists)\r\n      {\r\n        if(!UpdatedConv.isGroup)\r\n        {\r\n          let newConversation = {...UpdatedConv,Name:UpdatedConv.Participants[0].name,image: UpdatedConv.Participants[0].image}\r\n          setConversations(prevConversations=> [...prevConversations,newConversation])\r\n        }\r\n      }\r\n      else setConversations(newListOfConversations)\r\n\r\n}, [setConversations,selectedConversation,setSelectedConversation])\r\n\r\n\r\nconst updateSenderConversation= (AddMessage) =>\r\n{\r\n\r\n   setSelectedConversation(AddMessage)\r\n   setConversations(prevConversations =>\r\n    {\r\n\r\n      let newListOfConcversations= prevConversations.map(conversation =>\r\n        {\r\n           if(conversation._id == AddMessage._id)\r\n             return AddMessage\r\n           else return conversation\r\n        })\r\n\r\n        return newListOfConcversations\r\n    })\r\n\r\n\r\n}\r\n  function sendMessage(text) \r\n  {\r\n      let CurrentMessage = {id:info.id,name:info.name,message:text}\r\n      let sender = {id: info.id, phone:info.phone,name:info.name ,image:info.ProfilePic}\r\n      let AddMessage = {...selectedConversation,Messages:[...selectedConversation.Messages,CurrentMessage],LastMessage:CurrentMessage}\r\n      socket.current.emit('send-message',{sender:sender,UpdatedConversation:AddMessage,conversationId:selectedConversation._id})\r\n\r\n      updateSenderConversation(AddMessage)\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversation}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}