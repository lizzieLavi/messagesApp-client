{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useContacts } from './contactsprovider';\nimport { useSocket } from './socketprovider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts\n  } = useContacts();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const [selectedConversationDetails, setSelectedConversationDetails] = useState();\n  const [numberOfConversations, setNumberOfConversations] = useState(0);\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const socket = useSocket();\n\n  function createConversation(ids) {\n    let conversation = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        id: numberOfConversations,\n        participants: conversation,\n        messages: [],\n        lastMessage: ''\n      }];\n    });\n    setNumberOfConversations(numberOfConversations + 1);\n  }\n\n  const addMessageToConversation = useCallback(({\n    currentConversation,\n    message,\n    fromMe,\n    sender\n  }) => {\n    setConversations(prevConversations => {\n      let flag = 0;\n      let NewConversations = prevConversations.map(conversation => {\n        if (conversation.id === currentConversation.id) {\n          flag = 1;\n          let CurrentMessage = {\n            id: sender.id,\n            name: sender.name,\n            message: message,\n            fromMe: fromMe\n          };\n          let updatedConversation = { ...conversation,\n            lastMessage: CurrentMessage,\n            messages: [...conversation.messages, CurrentMessage]\n          };\n          setSelectedConversationDetails(updatedConversation);\n          return updatedConversation;\n        } else return conversation;\n      });\n\n      if (flag == 0) {\n        let CurrentMessage = {\n          id: sender.id,\n          name: sender.name,\n          message: message,\n          fromMe: fromMe\n        };\n        let newConversation = {\n          id: numberOfConversations,\n          participants: currentConversation.participants,\n          messages: [CurrentMessage],\n          lastMessage: CurrentMessage\n        };\n        NewConversations = [...prevConversations, newConversation];\n        setNumberOfConversations(numberOfConversations + 1);\n      }\n\n      console.log(NewConversations);\n      return NewConversations;\n    });\n  }, [setConversations]);\n\n  function sendMessage(currentConversation, text) {\n    let sender = {\n      id: sessionStorage['id'],\n      name: sessionStorage['name']\n    };\n    socket.emit('send-message', {\n      currentConversation: currentConversation,\n      message: text,\n      sender: sender\n    });\n    addMessageToConversation({\n      currentConversation: selectedConversationDetails,\n      message: text,\n      fromMe: true,\n      sender: sender\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('recieve-message');\n  }, [socket, addMessageToConversation]);\n\n  function setSelectedConversation(index) {\n    setSelectedConversationIndex(index);\n    setSelectedConversationDetails(conversations[index]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversationDetails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"dF1IhYputBpiZaF8uo3Tl8WH8o4=\", false, function () {\n  return [useContacts, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","selectedConversationDetails","setSelectedConversationDetails","numberOfConversations","setNumberOfConversations","createGroupFlag","setCreateGroupFlag","socket","createConversation","ids","conversation","map","addContactToConversation","filter","contact","prevConversations","participants","messages","lastMessage","addMessageToConversation","currentConversation","message","fromMe","sender","flag","NewConversations","CurrentMessage","name","updatedConversation","newConversation","console","log","sendMessage","text","sessionStorage","emit","on","off","setSelectedConversation","index"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useContacts } from './contactsprovider'\r\nimport { useSocket } from './socketprovider'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts} = useContacts()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversationIndex,setSelectedConversationIndex] = useState(0)\r\n  const [selectedConversationDetails,setSelectedConversationDetails] = useState()\r\n  const [numberOfConversations,setNumberOfConversations] =useState(0)\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const socket = useSocket()\r\n\r\n  \r\n  function createConversation(ids) \r\n  {\r\n   \r\n     let conversation =ids.map(id=>\r\n    {   \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n\r\n    setConversations(prevConversations =>\r\n    {\r\n      return [...prevConversations,{id: numberOfConversations,participants:conversation,messages:[],lastMessage:''}]\r\n    })\r\n\r\n    setNumberOfConversations(numberOfConversations +1)\r\n\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(({currentConversation, message, fromMe, sender})=>\r\n  {\r\n    setConversations(prevConversations=>\r\n      {\r\n        let flag=0;\r\n         let NewConversations =prevConversations.map(conversation=>\r\n          {\r\n            if(conversation.id === currentConversation.id)\r\n            {\r\n              flag=1;\r\n              let CurrentMessage ={ id: sender.id, name: sender.name,message: message, fromMe: fromMe}\r\n              let updatedConversation ={...conversation,lastMessage : CurrentMessage,\r\n                  messages: [...conversation.messages , CurrentMessage]}\r\n                \r\n\r\n              setSelectedConversationDetails(updatedConversation)\r\n              return updatedConversation\r\n            }\r\n\r\n            else return conversation;\r\n          })\r\n          if(flag ==0)\r\n          {\r\n            let CurrentMessage ={ id: sender.id, name: sender.name,message: message, fromMe: fromMe}\r\n            let newConversation = {id: numberOfConversations,participants:currentConversation.participants,messages:[CurrentMessage],lastMessage:CurrentMessage}\r\n            NewConversations=[...prevConversations,newConversation]\r\n            setNumberOfConversations(numberOfConversations +1)\r\n          }\r\n          console.log(NewConversations)\r\n          return NewConversations;\r\n      })\r\n  },[setConversations],)\r\n\r\n  function sendMessage(currentConversation,text) {\r\n\r\n\r\n    let sender ={id: sessionStorage['id'], name: sessionStorage['name']}\r\n\r\n    socket.emit('send-message', {currentConversation:currentConversation ,message:text,sender:sender})\r\n    addMessageToConversation({currentConversation:selectedConversationDetails,message:text ,fromMe: true,sender:sender})\r\n\r\n  }\r\n\r\n  \r\n  useEffect(() =>\r\n  {\r\n    if(socket == null)  return\r\n    \r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('recieve-message')\r\n\r\n\r\n  },[socket,addMessageToConversation]) \r\n\r\n\r\n\r\n  function setSelectedConversation(index)\r\n  {\r\n       setSelectedConversationIndex(index)\r\n       setSelectedConversationDetails(conversations[index])\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversationDetails}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}