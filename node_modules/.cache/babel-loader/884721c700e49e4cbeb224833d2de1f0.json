{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chat.js\",\n    _s = $RefreshSig$();\n\nimport '../css/chat.css';\nimport '../css/sidebar.css';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { useUser } from '../contexts/userprovider';\nimport { Avatar, IconButton, makeStyles, Modal } from '@material-ui/core';\nimport ChatBody from './chatbody';\nimport SendImageBody from './sendimagebody';\nimport CloseIcon from '@material-ui/icons/Close';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CheckIcon from '@material-ui/icons/Check';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport Picker from 'emoji-picker-react';\nimport PersonAdd from '@material-ui/icons/PersonAdd';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport AddGroupMember from './addgroupmember';\nimport Dialog from '@material-ui/core/Dialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\"\n    }\n  }\n});\nexport default function Chat() {\n  _s();\n\n  const {\n    selectedConversation,\n    currentConversationIsConnected,\n    typingFlag,\n    createConversation,\n    conversations,\n    setSelectedConversation,\n    setTypingFlag,\n    showDetails,\n    setShowDetails,\n    UpdateConversation\n  } = useConversations();\n  const [imageFlag, setImageFlag] = useState(false);\n  const [imageURL, setImageURL] = useState(false);\n  const [EditGroupNameGlag, setEditGroupNameGlag] = useState(false);\n  const [EditGroupDescriptionGlag, setEditGroupDescriptionGlag] = useState(false);\n  const [emojiFlag, setEmojiFlag] = useState(false);\n  const [Text, setText] = useState(selectedConversation.Name);\n  const [Description, setDescription] = useState(selectedConversation.description);\n  const {\n    info\n  } = useUser();\n  const classes = useStyles();\n  const [modalOpen, setModalOpen] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [deleteUserDialog, setDeleteUserDialog] = useState(false);\n  const [userToDelete, setUserToDelete] = useState();\n  const [pictureDialogOpen, setPictureDialogOpen] = useState(false);\n  useEffect(() => {\n    setEditGroupNameGlag(false);\n    setEditGroupDescriptionGlag(false);\n    setEmojiFlag(false);\n  }, [selectedConversation]);\n\n  const onEmojiClick = (event, emojiObject) => {\n    setText(Text + emojiObject.emoji);\n  };\n\n  const onDescriptionEmojiClick = (event, emojiObject) => {\n    setDescription(Description + emojiObject.emoji);\n  };\n\n  const groupheader = () => {\n    let returnValue = '';\n\n    if (typingFlag !== '') {\n      returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lastSeen\",\n        children: [\" \", typingFlag, \" is typing...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }, this);\n      setTimeout(() => setTypingFlag(''), 1000);\n    } else {\n      let UsersInGroup = '';\n      selectedConversation.Participants.forEach((participant, index) => {\n        if (index === selectedConversation.Participants.length - 1) UsersInGroup = UsersInGroup + participant.name;else UsersInGroup = UsersInGroup + participant.name + ', ';\n      });\n      returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lastSeen\",\n        children: [UsersInGroup, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }, this);\n    }\n\n    return returnValue;\n  };\n\n  function chatBodyCallback(image) {\n    setImageURL(image);\n    setImageFlag(true);\n  }\n\n  function backToChatCallback() {\n    setImageURL(null);\n    setImageFlag(false);\n  }\n\n  const privateConversationHeader = () => {\n    let returnValue = '';\n\n    if (currentConversationIsConnected === '') {\n      if (typingFlag !== '') {\n        returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lastSeen\",\n          children: \" typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 27\n        }, this);\n        setTimeout(() => setTypingFlag(''), 1000);\n      } else returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 55\n        }, this), \" online \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 28\n      }, this);\n    } else returnValue = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lastSeen\",\n      children: currentConversationIsConnected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 27\n    }, this);\n\n    return returnValue;\n  };\n\n  function changeGroupName() {\n    let message = {\n      name: \"manager\",\n      message: sessionStorage['name'] + \" changed group name to \" + Text,\n      timeSent: '',\n      containsImage: false,\n      containsRecord: false,\n      recordURL: null\n    };\n    let messages = selectedConversation.Messages;\n    messages.push(message);\n    let updatedConversation = { ...selectedConversation,\n      Name: Text,\n      Messages: messages,\n      LastMasage: message\n    };\n    UpdateConversation(updatedConversation);\n    setEditGroupNameGlag(false);\n  }\n\n  function openConversation(participant) {\n    let existsFlag = false;\n    conversations.forEach(conversation => {\n      if (conversation.isGroup == false && conversation.Participants[0].id == participant.id) {\n        existsFlag = true;\n        setSelectedConversation(conversation);\n      }\n    });\n\n    if (!existsFlag) {\n      let participantId = [];\n      participantId.push(participant.id);\n      createConversation(participantId, participant.name, participant.imageName, false);\n    }\n  }\n\n  function changeGroupDescription() {\n    let message = {\n      name: \"manager\",\n      message: sessionStorage['name'] + \" changed group Description\",\n      timeSent: '',\n      containsImage: false,\n      containsRecord: false,\n      recordURL: null\n    };\n    let messages = selectedConversation.Messages;\n    messages.push(message);\n    let updatedConversation = { ...selectedConversation,\n      description: Description,\n      Messages: messages,\n      LastMessage: message\n    };\n    UpdateConversation(updatedConversation);\n    setEditGroupDescriptionGlag(false);\n  }\n\n  function removeFromGroup() {\n    let message = {\n      name: \"manager\",\n      message: sessionStorage['name'] + \" left the group\",\n      timeSent: '',\n      containsImage: false,\n      containsRecord: false,\n      recordURL: null\n    };\n    let messages = selectedConversation.Messages;\n    messages.push(message);\n    let updatedConversation = { ...selectedConversation,\n      Messages: messages,\n      LastMessage: message\n    };\n    UpdateConversation(updatedConversation);\n    setDialogOpen(false);\n  }\n\n  function beforeDeleteUser(participant) {\n    setUserToDelete(participant);\n    setDeleteUserDialog(true);\n  }\n\n  function removeUserFromGroup() {\n    let messages = selectedConversation.Messages;\n    let message = {\n      name: \"manager\",\n      message: sessionStorage['name'] + \" removed \" + userToDelete.name + \" from the group \",\n      timeSent: '',\n      containsImage: false,\n      containsRecord: false,\n      recordURL: null\n    };\n    messages.push(message);\n    let participants = selectedConversation.Participants.filter(participant => participant.id != userToDelete.id);\n    let updatedConversation = { ...selectedConversation,\n      Participants: participants,\n      Messages: messages,\n      LastMessage: message\n    };\n    UpdateConversation(updatedConversation);\n    setUserToDelete();\n    setDeleteUserDialog(false);\n  }\n\n  function closeModal() {\n    setModalOpen(false);\n  }\n\n  const chatSide = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_header\",\n      onClick: () => setShowDetails(true),\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: selectedConversation.ConversationImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_header_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", selectedConversation.Name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), selectedConversation.isGroup ? groupheader() : privateConversationHeader()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 8\n    }, this), imageFlag ? /*#__PURE__*/_jsxDEV(SendImageBody, {\n      imageURL: imageURL,\n      backToChat: backToChatCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(ChatBody, {\n      imageCallback: chatBodyCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 91\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n\n  return showDetails ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat_with_details\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat narrow_chat\",\n      children: chatSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_details\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_details_top\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setShowDetails(false),\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            paddingLeft: '10px'\n          },\n          children: selectedConversation.isGroup ? 'Group Details:' : 'Contact Details:'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chat_details_body\",\n        children: [selectedConversation.isGroup ? /*#__PURE__*/_jsxDEV(\"showGroupDetails\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 47\n        }, this) : /*#__PURE__*/_jsxDEV(\"showUserDetails\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 68\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user_info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setPictureDialogOpen(true),\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              src: selectedConversation.ConversationImage,\n              style: {\n                margin: '20px',\n                height: '140px',\n                width: '140px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n            className: \"open_picture_dialog\",\n            onClose: () => setPictureDialogOpen(false),\n            open: pictureDialogOpen,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: selectedConversation.ConversationImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 16\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"name_and_lastSeen\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"group_title\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: selectedConversation.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 20\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => setEditGroupNameGlag(true),\n                children: /*#__PURE__*/_jsxDEV(EditIcon, {\n                  style: {\n                    fontSize: 'large',\n                    marginLeft: '10px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"lastSeen\",\n              style: {\n                padding: '10px',\n                paddingLeft: '0px'\n              },\n              children: [\" \", !selectedConversation.isGroup ? privateConversationHeader() : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\" created at:  \", selectedConversation.createdDate, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 150\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 18\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 12\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: chatSide\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Chat, \"uVoPgn2dfvT6XwWDtunpDrWvREc=\", false, function () {\n  return [useConversations, useUser, useStyles];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chat.js"],"names":["React","useState","useEffect","useConversations","useUser","Avatar","IconButton","makeStyles","Modal","ChatBody","SendImageBody","CloseIcon","EditIcon","CheckIcon","InsertEmoticonIcon","Picker","PersonAdd","ExitToAppIcon","AddGroupMember","Dialog","useStyles","root","backgroundColor","Chat","selectedConversation","currentConversationIsConnected","typingFlag","createConversation","conversations","setSelectedConversation","setTypingFlag","showDetails","setShowDetails","UpdateConversation","imageFlag","setImageFlag","imageURL","setImageURL","EditGroupNameGlag","setEditGroupNameGlag","EditGroupDescriptionGlag","setEditGroupDescriptionGlag","emojiFlag","setEmojiFlag","Text","setText","Name","Description","setDescription","description","info","classes","modalOpen","setModalOpen","dialogOpen","setDialogOpen","deleteUserDialog","setDeleteUserDialog","userToDelete","setUserToDelete","pictureDialogOpen","setPictureDialogOpen","onEmojiClick","event","emojiObject","emoji","onDescriptionEmojiClick","groupheader","returnValue","setTimeout","UsersInGroup","Participants","forEach","participant","index","length","name","chatBodyCallback","image","backToChatCallback","privateConversationHeader","changeGroupName","message","sessionStorage","timeSent","containsImage","containsRecord","recordURL","messages","Messages","push","updatedConversation","LastMasage","openConversation","existsFlag","conversation","isGroup","id","participantId","imageName","changeGroupDescription","LastMessage","removeFromGroup","beforeDeleteUser","removeUserFromGroup","participants","filter","closeModal","chatSide","ConversationImage","paddingLeft","margin","height","width","fontSize","marginLeft","padding","createdDate"],"mappings":"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","sourcesContent":["import '../css/chat.css'\r\nimport '../css/sidebar.css'\r\nimport React from 'react'\r\nimport { useState,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useUser } from '../contexts/userprovider';\r\nimport { Avatar ,IconButton,makeStyles,Modal} from '@material-ui/core'\r\nimport ChatBody from './chatbody';\r\nimport SendImageBody from './sendimagebody';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport Picker from 'emoji-picker-react';\r\nimport PersonAdd from '@material-ui/icons/PersonAdd';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport AddGroupMember from './addgroupmember';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\"\r\n\r\n    }}\r\n  });\r\n\r\n\r\nexport default function Chat() {\r\n\r\n    const {selectedConversation,currentConversationIsConnected,typingFlag,createConversation,conversations,setSelectedConversation,\r\n     setTypingFlag,showDetails,setShowDetails,UpdateConversation} = useConversations()\r\n    const [imageFlag,setImageFlag] =useState(false)\r\n    const [imageURL,setImageURL] =useState(false)\r\n    const [EditGroupNameGlag,setEditGroupNameGlag]=useState(false)\r\n    const [EditGroupDescriptionGlag,setEditGroupDescriptionGlag]=useState(false)\r\n    const [emojiFlag,setEmojiFlag]=useState(false)\r\n    const [Text,setText] = useState(selectedConversation.Name)\r\n    const [Description,setDescription] = useState(selectedConversation.description)\r\n    const {info} = useUser()\r\n    const classes = useStyles();\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const [dialogOpen, setDialogOpen] = useState(false)\r\n    const [deleteUserDialog,setDeleteUserDialog]= useState(false)\r\n    const [userToDelete,setUserToDelete] = useState()\r\n    const [pictureDialogOpen,setPictureDialogOpen]=useState(false)\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n      setEditGroupNameGlag(false)\r\n      setEditGroupDescriptionGlag(false)\r\n      setEmojiFlag(false)\r\n\r\n    },[selectedConversation])\r\n\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n      setText(Text + emojiObject.emoji)\r\n    };\r\n\r\n    const onDescriptionEmojiClick = (event, emojiObject) => {\r\n      setDescription(Description + emojiObject.emoji)\r\n    };\r\n\r\n    \r\n\r\n    const groupheader = () =>\r\n    {\r\n      let returnValue = ''\r\n      if(typingFlag !== '')\r\n      {\r\n        returnValue = <div className='lastSeen'> {typingFlag} is typing...</div>\r\n        setTimeout(()=> setTypingFlag(''),1000)\r\n      }\r\n\r\n      else\r\n      {\r\n        let UsersInGroup = ''\r\n        selectedConversation.Participants.forEach((participant,index)=> \r\n        {\r\n            if(index ===  selectedConversation.Participants.length-1 )\r\n                UsersInGroup = UsersInGroup + participant.name\r\n            else\r\n                UsersInGroup= UsersInGroup + participant.name + ', '\r\n        })\r\n            \r\n        returnValue=  <div className='lastSeen'>{UsersInGroup} </div>\r\n\r\n      }\r\n\r\n      return returnValue\r\n    }\r\n\r\n    function chatBodyCallback(image)\r\n    {\r\n      setImageURL(image)\r\n      setImageFlag(true)\r\n    }\r\n\r\n    function backToChatCallback()\r\n    {\r\n      setImageURL(null)\r\n      setImageFlag(false)\r\n    }\r\n\r\n    const privateConversationHeader = () =>\r\n    {\r\n       let returnValue = ''\r\n       if(currentConversationIsConnected === '')\r\n       {\r\n        if(typingFlag !== '')\r\n        {\r\n            returnValue = <div className='lastSeen'> typing...</div>\r\n            setTimeout(()=> setTypingFlag(''),1000)\r\n\r\n        }\r\n\r\n        else returnValue = <div className='connected'><div className='circle'></div> online </div>\r\n            \r\n       }\r\n       else returnValue = <div className='lastSeen'>{currentConversationIsConnected}</div>\r\n\r\n\r\n      return returnValue\r\n\r\n    }\r\n\r\n    function changeGroupName()\r\n    {\r\n      let message={name:\"manager\",message: sessionStorage['name'] +\" changed group name to \" + Text,timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n      let messages=selectedConversation.Messages\r\n      messages.push(message)\r\n      let updatedConversation={...selectedConversation,Name:Text,Messages:messages,LastMasage:message}\r\n      UpdateConversation(updatedConversation)\r\n      setEditGroupNameGlag(false)\r\n\r\n    }\r\n\r\n    function openConversation(participant)\r\n    {\r\n        let existsFlag=false\r\n        conversations.forEach(conversation=>\r\n        {\r\n            if(conversation.isGroup==false && conversation.Participants[0].id==participant.id)\r\n            {\r\n              existsFlag=true\r\n               setSelectedConversation(conversation)\r\n            }\r\n            \r\n        })\r\n        if(!existsFlag)\r\n        {\r\n          let participantId=[]\r\n          participantId.push(participant.id)\r\n          createConversation(participantId, participant.name, participant.imageName,false)\r\n        }\r\n      \r\n    }\r\n\r\n    function changeGroupDescription()\r\n    {\r\n      let message={name:\"manager\",message: sessionStorage['name'] +\" changed group Description\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n      let messages=selectedConversation.Messages\r\n      messages.push(message)\r\n      let updatedConversation={...selectedConversation,description:Description,Messages:messages,LastMessage:message}\r\n      UpdateConversation(updatedConversation)\r\n      setEditGroupDescriptionGlag(false)\r\n\r\n    }\r\n\r\n  function removeFromGroup()\r\n  {\r\n    let message={name:\"manager\",message: sessionStorage['name'] +\" left the group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n    let messages=selectedConversation.Messages\r\n    messages.push(message)\r\n    let updatedConversation={...selectedConversation,Messages:messages,LastMessage:message}\r\n    UpdateConversation(updatedConversation)\r\n    setDialogOpen(false)\r\n  }\r\n\r\n  function beforeDeleteUser(participant)\r\n  {\r\n    setUserToDelete(participant)\r\n    setDeleteUserDialog(true)\r\n  }\r\n\r\n  function removeUserFromGroup()\r\n  {\r\n    let messages=selectedConversation.Messages\r\n    let message={name:\"manager\",message: sessionStorage['name'] +\" removed \" + userToDelete.name + \" from the group \",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n    messages.push(message)\r\n    let participants= selectedConversation.Participants.filter(participant=> participant.id != userToDelete.id)\r\n    let updatedConversation={...selectedConversation,Participants:participants,Messages:messages,LastMessage:message}\r\n    UpdateConversation(updatedConversation)\r\n    setUserToDelete()\r\n    setDeleteUserDialog(false)\r\n\r\n  }\r\n\r\n\r\n  function closeModal() {\r\n     setModalOpen(false)\r\n  }\r\n\r\n\r\n\r\n    const chatSide=\r\n    <div>\r\n       <div className='chat_header' onClick={()=>setShowDetails(true)}>\r\n         <Avatar src={selectedConversation.ConversationImage}/>\r\n         <div className='chat_header_info'>\r\n            <h2> {selectedConversation.Name} </h2> \r\n            {selectedConversation.isGroup?  groupheader() : privateConversationHeader()}\r\n\r\n         </div>\r\n       </div>\r\n\r\n       {imageFlag?   <SendImageBody imageURL={imageURL} backToChat={backToChatCallback}/>:<ChatBody imageCallback={chatBodyCallback}/>} \r\n   </div>\r\n\r\n    return (\r\n       \r\n          showDetails?\r\n           <div className='chat_with_details'>\r\n            <div className='chat narrow_chat'>\r\n            {chatSide}\r\n            </div>\r\n\r\n            <div className='chat_details'>\r\n            <div className='chat_details_top'>\r\n              <IconButton onClick={()=>setShowDetails(false)}>\r\n                 <CloseIcon fontSize='large'  />\r\n              </IconButton>\r\n              <h2 style={{paddingLeft:'10px'}}>{selectedConversation.isGroup? 'Group Details:' : 'Contact Details:' }</h2>\r\n            </div>\r\n\r\n\r\n            <span className='chat_details_body'>\r\n               {selectedConversation.isGroup? <showGroupDetails/>: <showUserDetails/>}\r\n            <div className='user_info'>\r\n              <div onClick={()=>setPictureDialogOpen(true)}>\r\n                 <Avatar  src={selectedConversation.ConversationImage} style={{margin:'20px',height:'140px',width:'140px'}}/>\r\n              </div>\r\n\r\n              <Dialog className='open_picture_dialog' onClose={()=> setPictureDialogOpen(false)}  open={pictureDialogOpen}>\r\n               <img src={selectedConversation.ConversationImage}/>\r\n            </Dialog>\r\n\r\n           \r\n              <span className='name_and_lastSeen'>\r\n                <span className='group_title'>\r\n                   <h3>{selectedConversation.Name}</h3>\r\n                  <IconButton onClick={()=>setEditGroupNameGlag(true)}>\r\n                    <EditIcon style={{fontSize:'large',marginLeft:'10px'}}/>\r\n                    </IconButton>\r\n                </span>\r\n           \r\n                \r\n                 <span className='lastSeen' style={{padding:'10px',paddingLeft:'0px'}}> {!selectedConversation.isGroup? privateConversationHeader() :<span> created at:  {selectedConversation.createdDate} </span>}</span>\r\n              </span>\r\n             \r\n            </div>\r\n\r\n           \r\n            </span>\r\n            </div>\r\n\r\n            </div>:\r\n          <div className='chat'>\r\n              {chatSide}\r\n          </div>\r\n\r\n          \r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}