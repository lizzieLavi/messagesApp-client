{"ast":null,"code":"import _toConsumableArray from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{useUser}from'../contexts/userprovider';import{useConversations}from'../contexts/conversationsprovider';import{Avatar,IconButton}from'@material-ui/core';import CloseIcon from'@material-ui/icons/Close';import'../css/addnew.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function AddGroupMember(_ref){var closeModal=_ref.closeModal;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),selectedContactsId=_useState2[0],setSelectedContactsId=_useState2[1];var _useUser=useUser(),contacts=_useUser.contacts,info=_useUser.info;var _useConversations=useConversations(),UpdateConversation=_useConversations.UpdateConversation,selectedConversation=_useConversations.selectedConversation;var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),conversationContacts=_useState4[0],setConversationContacts=_useState4[1];//save ids of group participants so they wont show in add to group list\nuseEffect(function(){var ids=[];selectedConversation.Participants.forEach(function(participant){ids.push(participant.id);});setConversationContacts(ids);},[selectedConversation.Participants]);function AddMember(){var newParticipants=[];newParticipants=selectedConversation.Participants;var messages=selectedConversation.Messages;var message='';//add choosen contacts to group participants\ncontacts.forEach(function(contact){if(selectedContactsId.includes(contact.id)){newParticipants.push(contact);message={name:\"manager\",message:info.name+\" added \"+contact.name+\" to the group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null};messages.push(message);}});var updatedConversation=_objectSpread(_objectSpread({},selectedConversation),{},{Participants:newParticipants,Messages:messages,LastMessage:message});UpdateConversation(updatedConversation);closeModal();}//on checkbox Click,if exists- remove from list,if not-add to list\nfunction handleCheckboxChange(contactId){if(selectedContactsId.includes(contactId)){setSelectedContactsId(function(prevSelectedContactsId){return prevSelectedContactsId.filter(function(id){return id!==contactId;});});}else{setSelectedContactsId(function(prevSelectedContactsId){return[].concat(_toConsumableArray(prevSelectedContactsId),[contactId]);});}}return/*#__PURE__*/_jsx(\"div\",{className:\"add_new\",children:/*#__PURE__*/_jsx(\"div\",{className:\"add_new_group_border\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"new_conversation new_group\",children:[/*#__PURE__*/_jsxs(\"div\",{style:{flex:'1'},className:\"title_and_close\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"add_contact_title\",style:{marginLeft:'80px',paddingRight:'0px'},children:\"Select Members:\"}),/*#__PURE__*/_jsx(IconButton,{style:{marginLeft:'40px'},className:\"close_add_new\",onClick:function onClick(){return closeModal();},children:/*#__PURE__*/_jsx(CloseIcon,{fontSize:\"large\"})})]}),/*#__PURE__*/_jsx(\"div\",{style:{overflowY:'overlay',height:'200px'},children:contacts.map(function(contact){//show only user contacts that are not in the group\nif(!conversationContacts.includes(contact.id)){return/*#__PURE__*/_jsxs(\"div\",{className:\"contact_item\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",value:selectedContactsId.includes(contact.id),id:contact.id,onChange:function onChange(){return handleCheckboxChange(contact.id);}}),/*#__PURE__*/_jsxs(\"label\",{style:{display:'flex',flexDirection:'row',alignItems:'center',width:'100%'},for:contact.id,children:[/*#__PURE__*/_jsx(Avatar,{style:{margin:'5px'},src:process.env.PUBLIC_URL+contact.imageName,fontSize:\"large\"}),/*#__PURE__*/_jsxs(\"h3\",{className:\"enter_phone\",style:{marginLeft:'10px',fontWeight:'400'},children:[contact.name,\" \"]})]})]});}else return'';})}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(\"button\",{className:\"add_new_button\",type:\"submit\",onClick:function onClick(){return AddMember();},children:\"Add\"})})]})})});}export default AddGroupMember;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/addgroupmember.js"],"names":["React","useState","useEffect","useUser","useConversations","Avatar","IconButton","CloseIcon","AddGroupMember","closeModal","selectedContactsId","setSelectedContactsId","contacts","info","UpdateConversation","selectedConversation","conversationContacts","setConversationContacts","ids","Participants","forEach","participant","push","id","AddMember","newParticipants","messages","Messages","message","contact","includes","name","timeSent","containsImage","containsRecord","recordURL","updatedConversation","LastMessage","handleCheckboxChange","contactId","prevSelectedContactsId","filter","flex","marginLeft","paddingRight","overflowY","height","map","display","flexDirection","alignItems","width","margin","process","env","PUBLIC_URL","imageName","fontWeight","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState ,useEffect} from 'react'\r\nimport {useUser } from '../contexts/userprovider'\r\nimport {useConversations } from '../contexts/conversationsprovider'\r\nimport {Avatar,IconButton} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport '../css/addnew.css'\r\n\r\nfunction AddGroupMember({closeModal}) \r\n{\r\n\r\n    const [selectedContactsId, setSelectedContactsId] = useState([])\r\n    const {contacts,info } = useUser()\r\n    const {UpdateConversation,selectedConversation} = useConversations()\r\n    const [conversationContacts,setConversationContacts]=useState([])\r\n\r\n  \r\n    //save ids of group participants so they wont show in add to group list\r\n    useEffect(() =>\r\n    { \r\n        let ids=[]\r\n        selectedConversation.Participants.forEach((participant)=>\r\n        {\r\n           ids.push(participant.id)\r\n        }) \r\n        setConversationContacts(ids)\r\n\r\n    },[selectedConversation.Participants])\r\n\r\n    function AddMember()\r\n    {\r\n        let newParticipants= []\r\n        newParticipants=selectedConversation.Participants\r\n        let messages=selectedConversation.Messages\r\n        let message=''\r\n\r\n        //add choosen contacts to group participants\r\n        contacts.forEach(contact=>\r\n        {\r\n            if(selectedContactsId.includes(contact.id))\r\n            {\r\n                newParticipants.push(contact)\r\n                message={name:\"manager\",message: info.name +\" added \" + contact.name + \" to the group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n                messages.push(message)\r\n            }\r\n\r\n        })\r\n\r\n        let updatedConversation={...selectedConversation,Participants:newParticipants,Messages:messages,LastMessage:message}\r\n        UpdateConversation(updatedConversation)\r\n        closeModal()\r\n\r\n    }\r\n\r\n    //on checkbox Click,if exists- remove from list,if not-add to list\r\n    function handleCheckboxChange(contactId) \r\n    {\r\n       \r\n        if(selectedContactsId.includes(contactId))\r\n        {\r\n            setSelectedContactsId(prevSelectedContactsId =>\r\n            {\r\n                return (prevSelectedContactsId.filter(id=> id!==contactId))\r\n            } )\r\n        }\r\n  \r\n        else\r\n        {\r\n           setSelectedContactsId(prevSelectedContactsId=>\r\n            {\r\n              return [...prevSelectedContactsId,contactId]\r\n            })\r\n        } \r\n\r\n    }\r\n\r\n    return (\r\n       <div className='add_new'>\r\n           <div className='add_new_group_border'>\r\n               <div className='new_conversation new_group'>\r\n                   <div style={{flex:'1'}} className='title_and_close'>\r\n                       <h2 className='add_contact_title' style={{marginLeft:'80px',paddingRight:'0px'}}>Select Members:</h2> \r\n                       <IconButton style={{marginLeft:'40px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                          <CloseIcon fontSize='large' /> \r\n                       </IconButton>\r\n                   </div>\r\n                   <div style={{overflowY:'overlay',height:'200px'}}>\r\n                       {contacts.map(contact =>\r\n                       {\r\n                         //show only user contacts that are not in the group\r\n                         if(!(conversationContacts.includes(contact.id)))\r\n                         {\r\n                           return(\r\n                               <div className='contact_item' >\r\n                                   <input type=\"checkbox\" value={selectedContactsId.includes(contact.id)}\r\n                                    id={contact.id} onChange={() => handleCheckboxChange(contact.id)}/>\r\n                                   <label style={{display:'flex',flexDirection:'row',alignItems:'center',width:'100%'}}for={contact.id} >\r\n                                      <Avatar  style={{margin:'5px'}} src={process.env.PUBLIC_URL + contact.imageName}   fontSize='large'/>\r\n                                      <h3 className='enter_phone' style={{marginLeft:'10px' ,fontWeight:'400'}}>{contact.name} </h3>\r\n                                   </label>\r\n                               </div>\r\n                            )}\r\n\r\n                         else return ''\r\n            \r\n                        }) } \r\n             \r\n                   </div>\r\n                   <div style={{display:'flex' , justifyContent:'center'}}>\r\n                        <button className='add_new_button'  type=\"submit\" onClick={()=>AddMember()}>Add</button>\r\n                   </div>\r\n\r\n               </div>\r\n           </div>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default AddGroupMember\r\n"]},"metadata":{},"sourceType":"module"}