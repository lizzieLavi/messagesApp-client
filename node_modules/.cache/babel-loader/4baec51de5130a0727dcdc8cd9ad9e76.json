{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chatbody.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useState, useCallback, useEffect } from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { useSocket } from '../contexts/socketprovider';\nimport { useUser } from '../contexts/userprovider';\nimport { IconButton } from '@material-ui/core';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ImageIcon from '@material-ui/icons/Image';\nimport Picker from 'emoji-picker-react';\nimport Dialog from '@material-ui/core/Dialog';\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatBody(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [Text, setText] = useState('');\n  const {\n    socket\n  } = useSocket();\n  const {\n    info\n  } = useUser();\n  const {\n    sendMessage,\n    selectedConversation,\n    currentConversationIsConnected,\n    typingFlag,\n    setTypingFlag\n  } = useConversations();\n  const inputRef = useRef(null);\n  const [emojiFlag, setEmojiFlag] = useState(false);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [imageFlag, setImageFlag] = useState(false);\n  const [imageURL, setImageURL] = useState(null);\n  const [SelectedImageURL, setSelectedImageURL] = useState(null);\n  const [recordFlag, setRecordFlag] = useState(false);\n\n  const RecordView = () => {\n    _s();\n\n    const {\n      status,\n      startRecording,\n      stopRecording,\n      mediaBlobUrl\n    } = useReactMediaRecorder({\n      audio: true\n    });\n    const setRef = useCallback(node => {\n      if (node) node.scrollIntoView({\n        smooth: true\n      });\n    }, []);\n\n    function typing(e) {\n      setText(e.target.value);\n      if (socket.current == null) return;\n      socket.current.emit(\"typing\", {\n        user: info,\n        Conversation: selectedConversation\n      });\n    }\n\n    function handleSubmit(e) {\n      e.preventDefault();\n      sendMessage(Text, false);\n      setText(' ');\n    }\n\n    async function handleImage(e) {\n      const data = new FormData();\n      data.append('file', e.target.files[0]);\n      data.append(\"upload_preset\", \"whatsApp_clone\");\n      data.append(\"cloud_name\", \"dsrgpqnyv\");\n\n      try {\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\", data);\n        setImageURL(response.data.url);\n        setImageFlag(true);\n        props.imageCallback(response.data.url);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    function openImage(URL) {\n      setModalOpen(true);\n      setSelectedImageURL(URL);\n    }\n\n    function handleRecord() {\n      if (!recordFlag) {\n        startRecording();\n        setRecordFlag(true);\n      } else {\n        stopRecording();\n        setRecordFlag(false);\n      }\n    }\n\n    const onEmojiClick = (event, emojiObject) => {\n      setText(Text + emojiObject.emoji);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body_and_footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_body\",\n        children: selectedConversation.Messages.map((message, index) => {\n          const lastMessage = selectedConversation.Messages.length - 1 === index;\n          let sender = message.id == sessionStorage['id'] ? 'chat_message' : ' chat_message chat_reciever';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: sender,\n              ref: lastMessage ? setRef : null,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"sender_name\",\n                children: message.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 13\n              }, this), message.containsImage ? /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"image_in_message\",\n                src: message.imageURL,\n                onClick: () => openImage(message.imageURL),\n                width: \"200px\",\n                height: \"200px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 13\n              }, this) : '', /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"message_time_and_content\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"message_content\",\n                  children: message.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"message_time\",\n                  children: message.timeSent.substring(11, 17)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 13\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 14\n            }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n              onClose: () => setModalOpen(false),\n              open: modalOpen,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: SelectedImageURL,\n                height: \"500px\",\n                width: \"500px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 14\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_footer_with_stickers\",\n        children: [emojiFlag ? /*#__PURE__*/_jsxDEV(Picker, {\n          onEmojiClick: (e, emojiObject) => onEmojiClick(e, emojiObject),\n          pickerStyle: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 20\n        }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat_footer\",\n          children: [emojiFlag ? /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => setEmojiFlag(false),\n            children: [/*#__PURE__*/_jsxDEV(CloseIcon, {\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 66\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 19\n          }, this) : '', /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => setEmojiFlag(true),\n            children: /*#__PURE__*/_jsxDEV(InsertEmoticonIcon, {\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            accept: \"image/*\",\n            className: \"invisibleInput\",\n            id: \"icon-button-file\",\n            type: \"file\",\n            style: {\n              visibility: 'hidden'\n            },\n            onChange: handleImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"icon-button-file\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              component: \"span\",\n              children: /*#__PURE__*/_jsxDEV(ImageIcon, {\n                fontSize: \"large\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            className: \"message_section\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"message_input\",\n              ref: inputRef,\n              value: Text,\n              onChange: typing,\n              type: \"text\",\n              placeholder: \"type a message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \" send \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            children: /*#__PURE__*/_jsxDEV(MicIcon, {\n              fontSize: \"large\",\n              onClick: handleRecord\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this);\n  };\n\n  _s(RecordView, \"9Q7TJpLhAoqzxZA69w60tjowQiQ=\", false, function () {\n    return [useReactMediaRecorder];\n  });\n}\n\n_s2(ChatBody, \"EQmOfGmuD4RjQsf2X3+80nTWwIk=\", false, function () {\n  return [useSocket, useUser, useConversations];\n});\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chatbody.js"],"names":["React","useRef","useState","useCallback","useEffect","useConversations","useSocket","useUser","IconButton","InsertEmoticonIcon","MicIcon","CloseIcon","ImageIcon","Picker","Dialog","useReactMediaRecorder","axios","ChatBody","props","Text","setText","socket","info","sendMessage","selectedConversation","currentConversationIsConnected","typingFlag","setTypingFlag","inputRef","emojiFlag","setEmojiFlag","modalOpen","setModalOpen","imageFlag","setImageFlag","imageURL","setImageURL","SelectedImageURL","setSelectedImageURL","recordFlag","setRecordFlag","RecordView","status","startRecording","stopRecording","mediaBlobUrl","audio","setRef","node","scrollIntoView","smooth","typing","e","target","value","current","emit","user","Conversation","handleSubmit","preventDefault","handleImage","data","FormData","append","files","response","post","url","imageCallback","err","console","log","openImage","URL","handleRecord","onEmojiClick","event","emojiObject","emoji","Messages","map","message","index","lastMessage","length","sender","id","sessionStorage","name","containsImage","timeSent","substring","width","visibility"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\r\nimport { useState ,useCallback,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\nimport {IconButton } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport Picker from 'emoji-picker-react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\nimport axios from 'axios'\r\n\r\n\r\n\r\n\r\nfunction ChatBody(props) {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag} = useConversations()\r\n    const inputRef = useRef(null)\r\n  \r\n    const [emojiFlag,setEmojiFlag] = useState(false)\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const [imageFlag,setImageFlag] =useState(false)\r\n    const [imageURL,setImageURL] =useState(null)\r\n    const [SelectedImageURL,setSelectedImageURL] =useState(null)\r\n    const [recordFlag,setRecordFlag] =useState(false)\r\n    const RecordView = () => {const {status,startRecording,stopRecording,mediaBlobUrl,} = useReactMediaRecorder({ audio: true });\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const setRef = useCallback((node) => \r\n    {\r\n      if(node)\r\n         node.scrollIntoView({smooth:true})\r\n    },[])\r\n\r\n    function typing(e)\r\n    {\r\n        setText(e.target.value)\r\n        if (socket.current == null) return;\r\n        socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n    }\r\n\r\n    function handleSubmit(e)\r\n    {\r\n      e.preventDefault()\r\n      sendMessage(Text,false)\r\n      setText(' ')\r\n    }\r\n\r\n    async function handleImage(e)\r\n    {\r\n      const data = new FormData()\r\n      data.append('file',e.target.files[0])\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n      try{\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n      setImageURL(response.data.url)\r\n      setImageFlag(true)\r\n\r\n      props.imageCallback(response.data.url)\r\n      }catch(err){console.log(err)}\r\n    }\r\n\r\n    function openImage(URL)\r\n    {\r\n      setModalOpen(true)\r\n      setSelectedImageURL(URL)\r\n\r\n    }\r\n\r\n    function handleRecord()\r\n    {\r\n      if(!recordFlag)\r\n      {\r\n        startRecording()\r\n        setRecordFlag(true)\r\n      }\r\n\r\n      else\r\n      {\r\n         stopRecording()\r\n         setRecordFlag(false)\r\n      }\r\n    }\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setText(Text + emojiObject.emoji)\r\n      };\r\n\r\n\r\n\r\n    return (\r\n        <div className= 'body_and_footer'>\r\n        <div className='chat_body'>\r\n        {selectedConversation.Messages.map((message,index)=>\r\n        {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender = message.id==sessionStorage['id']? 'chat_message' : ' chat_message chat_reciever'\r\n\r\n            return (\r\n            <div>\r\n             <p className={sender} ref={lastMessage ? setRef : null}>\r\n            <span className='sender_name'>{message.name}</span>\r\n            {message.containsImage? \r\n            <img className='image_in_message' src={message.imageURL} onClick={()=>openImage(message.imageURL)} width='200px' height='200px' /> \r\n            : ''}\r\n          \r\n            <p className='message_time_and_content'><span className='message_content'>{message.message}</span> \r\n            <span className='message_time'>{(message.timeSent).substring(11,17)}</span> </p>\r\n    \r\n             </p> \r\n\r\n             <Dialog onClose={()=> setModalOpen(false)}  open={modalOpen}>\r\n                <img src={SelectedImageURL}  height='500px' width='500px'/>\r\n            </Dialog>\r\n            \r\n          \r\n             </div>\r\n       \r\n            )}\r\n\r\n     \r\n         )}\r\n\r\n    </div>\r\n\r\n   <div className='chat_footer_with_stickers'>\r\n      {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n      <div className='chat_footer'>\r\n      {emojiFlag? <IconButton  onClick={()=>setEmojiFlag(false)}><CloseIcon fontSize='large'/> </IconButton>:''}\r\n      <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n         <InsertEmoticonIcon fontSize='large'/>\r\n      </IconButton>\r\n      <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n      <label htmlFor=\"icon-button-file\">\r\n       <IconButton component=\"span\">\r\n         < ImageIcon  fontSize='large'></ImageIcon>\r\n       </IconButton>\r\n      </label> \r\n\r\n      <form onSubmit={handleSubmit} className='message_section'>\r\n         <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n         <button type='submit' > send </button>\r\n      </form>\r\n\r\n      <IconButton>\r\n         <MicIcon fontSize='large' onClick={handleRecord} />\r\n      </IconButton>\r\n    </div>\r\n</div>\r\n\r\n</div>\r\n\r\n    \r\n    )\r\n}}\r\n\r\nexport default ChatBody\r\n"]},"metadata":{},"sourceType":"module"}