{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useUser } from './userprovider';\nimport { useSocket } from './socketprovider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const socket = useSocket();\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n\n  async function createConversation(ids, name, image) {\n    let ConversationImage = image;\n\n    if (ids.length == 0) {\n      console.log('no participants choosen');\n      return;\n    }\n\n    let participants = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n    participants = [...participants, {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    }];\n\n    if (ids.length > 1) {\n      const formData = new FormData();\n      formData.append('file', ConversationImage);\n      const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\", formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const {\n        fileName,\n        filePath\n      } = fileResponse.data;\n      ConversationImage = 'uploads/' + fileName;\n    } //updateDB\n\n\n    let newConversation = {\n      name: name,\n      creatorId: sessionStorage['id'],\n      participants: participants,\n      messages: [],\n      lastMessage: {\n        id: '',\n        sender: '',\n        message: ''\n      },\n      ConversationImage: ConversationImage\n    };\n\n    try {\n      await axios.post(\"http://localhost:5000/api/conversations\", newConversation, config);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const addMessageToConversation = useCallback(({\n    currentConversation,\n    message,\n    fromMe,\n    sender\n  }) => {\n    let ConversationExists = false;\n    console.log(selectedConversation);\n    console.log(conversations);\n    conversations.map(async conversation => {\n      let CurrentMessage = {\n        id: sender.id,\n        name: sender.name,\n        message: message\n      };\n\n      if (conversation._id == currentConversation._id) {\n        ConversationExists = true;\n        let updatedConversation = conversation;\n\n        if (fromMe) {\n          let senderParticipant = {\n            id: info.id,\n            name: info.name,\n            phone: info.phone,\n            image: info.ProfilePic\n          };\n          updatedConversation = { ...updatedConversation,\n            LastMessage: CurrentMessage,\n            Messages: [...conversation.Messages, CurrentMessage]\n          };\n          setSelectedConversation(updatedConversation);\n          let updateDBConversation = { ...updatedConversation,\n            Participants: [...conversation.Participants, senderParticipant]\n          };\n          let response = await axios.put(\"http://localhost:5000/api/conversations/\" + conversation._id, updateDBConversation, config);\n        } else if (selectedConversation._id == currentConversation._id) {\n          console.log('here');\n          setSelectedConversation(currentConversation);\n        }\n      }\n    });\n    /*  if(ConversationExists == false)\r\n      {\r\n        let newConversation = currentConversation;\r\n        NewConversations=[...conversations,newConversation]\r\n      }\r\n      setConversations(NewConversations)*/\n  }, [setConversations]);\n  useEffect(async () => {\n    try {\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\" + sessionStorage['id'], config);\n      let ConversationsList = response.data.map(conversation => {\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage['name']) {\n          let UpdatedNameConversation = conversation;\n          UpdatedNameConversation = { ...UpdatedNameConversation,\n            Name: conversation.Participants[0].name\n          };\n          return UpdatedNameConversation;\n        } else return conversation;\n      });\n      setConversations(ConversationsList);\n    } catch (err) {\n      console.log(err);\n    }\n  }, [setConversations, createConversation, addMessageToConversation]);\n\n  function sendMessage(currentConversation, text) {\n    let sender = {\n      id: sessionStorage['id'],\n      name: info.name\n    };\n    socket.emit('send-message', {\n      currentConversation: currentConversation,\n      message: text,\n      sender: sender\n    });\n    addMessageToConversation({\n      currentConversation: selectedConversation,\n      message: text,\n      fromMe: true,\n      sender: sender\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('recieve-message');\n  }, [socket, addMessageToConversation]);\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"RWmoPdsdJzNuBrUPfOtzhcgwfGs=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","createGroupFlag","setCreateGroupFlag","socket","config","sessionStorage","createConversation","ids","name","image","ConversationImage","length","console","log","participants","map","addContactToConversation","filter","contact","phone","ProfilePic","formData","FormData","append","fileResponse","post","headers","fileName","filePath","data","newConversation","creatorId","messages","lastMessage","sender","message","err","addMessageToConversation","currentConversation","fromMe","ConversationExists","conversation","CurrentMessage","_id","updatedConversation","senderParticipant","LastMessage","Messages","updateDBConversation","Participants","response","put","get","ConversationsList","Name","UpdatedNameConversation","sendMessage","text","emit","on","off"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useUser } from './userprovider'\r\nimport { useSocket } from './socketprovider'\r\nimport axios from 'axios'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const {contacts,info} = useUser()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversation,setSelectedConversation] = useState()\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const socket = useSocket()\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}};\r\n\r\n\r\n\r\n  \r\n  async function createConversation(ids,name,image) \r\n  {\r\n    let  ConversationImage= image\r\n    if(ids.length == 0)\r\n    {\r\n     console.log('no participants choosen')\r\n     return;\r\n    }\r\n     let participants =ids.map(id=>\r\n    { \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n\r\n    participants=[...participants,{id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}]\r\n    \r\n    if(ids.length > 1)\r\n    {\r\n      const formData= new FormData();\r\n      formData.append('file',ConversationImage)\r\n      const fileResponse =await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\",formData,{headers: {\r\n      'Content-Type': 'multipart/form-data'}})\r\n      const {fileName,filePath} =fileResponse.data\r\n      ConversationImage='uploads/'+fileName\r\n    }\r\n\r\n\r\n    //updateDB\r\n    let newConversation = {name:name,creatorId: sessionStorage['id'],participants:participants,messages:[],lastMessage:{id:'',sender:'',message:''},ConversationImage:ConversationImage}\r\n    try{\r\n      await axios.post(\"http://localhost:5000/api/conversations\",newConversation,config)\r\n    } catch(err){console.log(err)}\r\n\r\n  }\r\n\r\n const addMessageToConversation = useCallback(({currentConversation, message, fromMe, sender}) =>\r\n\r\n  {\r\n         let ConversationExists = false;\r\n         console.log(selectedConversation)\r\n         console.log(conversations)\r\n         conversations.map(async(conversation)=>\r\n        {\r\n            let CurrentMessage ={ id: sender.id, name: sender.name,message: message}\r\n            if(conversation._id == currentConversation._id)\r\n            {\r\n              ConversationExists = true;\r\n              let updatedConversation = conversation\r\n            \r\n              if(fromMe)\r\n              {\r\n                let senderParticipant = {id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}\r\n                updatedConversation={... updatedConversation,LastMessage : CurrentMessage,Messages: [...conversation.Messages , CurrentMessage]}\r\n                setSelectedConversation(updatedConversation)\r\n                let updateDBConversation = {...updatedConversation,Participants: [...conversation.Participants, senderParticipant]}\r\n                let response = await axios.put(\"http://localhost:5000/api/conversations/\" + conversation._id,updateDBConversation,config)\r\n              }\r\n              else if(selectedConversation._id ==currentConversation._id )\r\n              {\r\n                console.log('here')\r\n                setSelectedConversation(currentConversation)\r\n              }\r\n\r\n    \r\n          }\r\n          })\r\n\r\n        /*  if(ConversationExists == false)\r\n          {\r\n            let newConversation = currentConversation;\r\n            NewConversations=[...conversations,newConversation]\r\n          }\r\n          setConversations(NewConversations)*/\r\n      \r\n  },[setConversations])\r\n\r\n      \r\n  useEffect(async () =>\r\n  {\r\n     try{\r\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\"+sessionStorage['id'],config)\r\n      let ConversationsList =  response.data.map(conversation=>\r\n        {\r\n          if(conversation.Participants.length == 1 && conversation.Name == sessionStorage['name'] )\r\n          {\r\n              let UpdatedNameConversation = conversation\r\n              UpdatedNameConversation= {...UpdatedNameConversation,Name:conversation.Participants[0].name}\r\n\r\n              return UpdatedNameConversation\r\n        \r\n            \r\n          }\r\n\r\n          else return conversation\r\n\r\n          \r\n        })\r\n        \r\n      setConversations(ConversationsList)\r\n     }catch(err){console.log(err)}\r\n\r\n\r\n  },[setConversations,createConversation,addMessageToConversation]) \r\n\r\n  function sendMessage(currentConversation,text) {\r\n\r\n\r\n    let sender ={id: sessionStorage['id'], name: info.name}\r\n\r\n    socket.emit('send-message', {currentConversation:currentConversation ,message:text,sender:sender})\r\n    addMessageToConversation({currentConversation:selectedConversation,message:text ,fromMe: true,sender:sender})\r\n\r\n  }\r\n\r\n  \r\n  useEffect(() =>\r\n  {\r\n    if(socket == null)  return\r\n    \r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('recieve-message')\r\n\r\n\r\n  },[socket,addMessageToConversation]) \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversation}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}