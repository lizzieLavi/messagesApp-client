{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\contexts\\\\conversationsprovider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useCallback } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useUser } from './userprovider';\nimport { useSocket } from './socketprovider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const [newMessageFlag, setNewMessageFlag] = useState(false);\n  const {\n    contacts,\n    info\n  } = useUser();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState();\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\n  const socket = useSocket();\n  const config = {\n    'headers': {\n      'x-access-token': sessionStorage['config']\n    }\n  };\n\n  async function createConversation(ids, name, image) {\n    let ConversationImage = image;\n\n    if (ids.length == 0) {\n      console.log('no participants choosen');\n      return;\n    }\n\n    let participants = ids.map(id => {\n      let addContactToConversation = contacts.filter(contact => id === contact.id);\n      return addContactToConversation[0];\n    });\n    participants = [...participants, {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    }];\n\n    if (ids.length > 1) {\n      const formData = new FormData();\n      formData.append('file', ConversationImage);\n      const fileResponse = await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\", formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const {\n        fileName,\n        filePath\n      } = fileResponse.data;\n      ConversationImage = 'uploads/' + fileName;\n    } //updateDB\n\n\n    let newConversation = {\n      name: name,\n      creatorId: sessionStorage['id'],\n      participants: participants,\n      messages: [],\n      lastMessage: {\n        id: '',\n        sender: '',\n        message: ''\n      },\n      ConversationImage: ConversationImage\n    };\n\n    try {\n      await axios.post(\"http://localhost:5000/api/conversations\", newConversation, config);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const addMessageToConversation = useCallback(async UpdatedConversation => {\n    let senderParticipant = {\n      id: info.id,\n      name: info.name,\n      phone: info.phone,\n      image: info.ProfilePic\n    };\n    let updateDBConversation = { ...UpdatedConversation,\n      Participants: [...UpdatedConversation.Participants, senderParticipant]\n    };\n    let response = await axios.put(\"http://localhost:5000/api/conversations/\" + UpdatedConversation._id, updateDBConversation, config);\n    setNewMessageFlag(!newMessageFlag);\n  }, [sendMessage]);\n  const GotNewMessage = useCallback(UpdatedConversation => {\n    if (selectedConversation) {\n      if (UpdatedConversation._id == selectedConversation._id) setSelectedConversation(UpdatedConversation);\n    }\n\n    setNewMessageFlag(!newMessageFlag);\n  }, [addMessageToConversation]);\n\n  function sendMessage(currentConversation, text) {\n    let CurrentMessage = {\n      id: sessionStorage['id'],\n      name: info.name,\n      message: text\n    };\n    let updatedConversation = { ...currentConversation,\n      LastMessage: CurrentMessage,\n      Messages: [...currentConversation.Messages, CurrentMessage]\n    };\n    setSelectedConversation(updatedConversation);\n    socket.emit('send-message', {\n      currentConversation: updatedConversation\n    });\n    addMessageToConversation(updatedConversation);\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', GotNewMessage);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n  useEffect(async () => {\n    try {\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\" + sessionStorage['id'], config);\n      let ConversationsList = response.data.map(conversation => {\n        if (conversation.Participants.length == 1 && conversation.Name == sessionStorage['name']) {\n          let UpdatedNameConversation = conversation;\n          UpdatedNameConversation = { ...UpdatedNameConversation,\n            Name: conversation.Participants[0].name\n          };\n          return UpdatedNameConversation;\n        } else return conversation;\n      });\n      setConversations(ConversationsList);\n    } catch (err) {\n      console.log(err);\n    }\n  }, [newMessageFlag]);\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      createGroupFlag,\n      setCreateGroupFlag,\n      sendMessage,\n      conversations,\n      createConversation,\n      setConversations,\n      setSelectedConversation,\n      selectedConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"UjtvlJBpw0R//mLLhUXApafMmK4=\", false, function () {\n  return [useUser, useSocket];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/contexts/conversationsprovider.js"],"names":["React","useContext","useCallback","useState","useEffect","useUser","useSocket","axios","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","newMessageFlag","setNewMessageFlag","contacts","info","conversations","setConversations","selectedConversation","setSelectedConversation","createGroupFlag","setCreateGroupFlag","socket","config","sessionStorage","createConversation","ids","name","image","ConversationImage","length","console","log","participants","map","addContactToConversation","filter","contact","phone","ProfilePic","formData","FormData","append","fileResponse","post","headers","fileName","filePath","data","newConversation","creatorId","messages","lastMessage","sender","message","err","addMessageToConversation","UpdatedConversation","senderParticipant","updateDBConversation","Participants","response","put","_id","sendMessage","GotNewMessage","currentConversation","text","CurrentMessage","updatedConversation","LastMessage","Messages","emit","on","off","get","ConversationsList","conversation","Name","UpdatedNameConversation"],"mappings":"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","sourcesContent":["import React, { useContext ,useCallback} from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport { useUser } from './userprovider'\r\nimport { useSocket } from './socketprovider'\r\nimport axios from 'axios'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({id, children }) {\r\n  const [newMessageFlag,setNewMessageFlag] =useState(false)\r\n  const {contacts,info} = useUser()\r\n  const [conversations,setConversations] =useState([])\r\n  const [selectedConversation,setSelectedConversation] = useState()\r\n  const [createGroupFlag,setCreateGroupFlag] =useState(false)\r\n  const socket = useSocket()\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}};\r\n\r\n    \r\n\r\n\r\n  \r\n  async function createConversation(ids,name,image) \r\n  {\r\n    let  ConversationImage= image\r\n    if(ids.length == 0)\r\n    {\r\n     console.log('no participants choosen')\r\n     return;\r\n    }\r\n     let participants =ids.map(id=>\r\n    { \r\n      let  addContactToConversation =contacts.filter(contact=> id === contact.id)    \r\n      return addContactToConversation[0]\r\n    })\r\n\r\n\r\n    participants=[...participants,{id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}]\r\n    \r\n    if(ids.length > 1)\r\n    {\r\n      const formData= new FormData();\r\n      formData.append('file',ConversationImage)\r\n      const fileResponse =await axios.post(\"http://localhost:5000/api/conversations/AddConversationPic\",formData,{headers: {\r\n      'Content-Type': 'multipart/form-data'}})\r\n      const {fileName,filePath} =fileResponse.data\r\n      ConversationImage='uploads/'+fileName\r\n    }\r\n\r\n\r\n    //updateDB\r\n    let newConversation = {name:name,creatorId: sessionStorage['id'],participants:participants,messages:[],lastMessage:{id:'',sender:'',message:''},ConversationImage:ConversationImage}\r\n    try{\r\n       await axios.post(\"http://localhost:5000/api/conversations\",newConversation,config)\r\n    } catch(err){console.log(err)}\r\n\r\n  }\r\n\r\n\r\n  \r\n  const addMessageToConversation = useCallback(async (UpdatedConversation) =>\r\n  {\r\n      let senderParticipant = {id:info.id,name:info.name,phone:info.phone,image:info.ProfilePic}\r\n      let updateDBConversation = {...UpdatedConversation,Participants: [...UpdatedConversation.Participants, senderParticipant]}\r\n      let response = await axios.put(\"http://localhost:5000/api/conversations/\" + UpdatedConversation._id,updateDBConversation,config)\r\n      setNewMessageFlag(!newMessageFlag)\r\n      \r\n  },[sendMessage])\r\n\r\n  \r\n  const GotNewMessage= useCallback((UpdatedConversation) =>\r\n  {\r\n    \r\n    if(selectedConversation)\r\n    {\r\n      if(UpdatedConversation._id == selectedConversation._id)\r\n         setSelectedConversation(UpdatedConversation)\r\n    }\r\n    setNewMessageFlag(!newMessageFlag)\r\n\r\n  },[addMessageToConversation])\r\n\r\n  function sendMessage(currentConversation,text) \r\n  {\r\n    let CurrentMessage ={ id: sessionStorage['id'], name: info.name,message: text}\r\n    let updatedConversation={...currentConversation,LastMessage : CurrentMessage,Messages: [...currentConversation.Messages , CurrentMessage]}\r\n    setSelectedConversation(updatedConversation)\r\n    socket.emit('send-message', {currentConversation:updatedConversation})\r\n    addMessageToConversation(updatedConversation)\r\n  }\r\n\r\n\r\n  useEffect(() => \r\n  {\r\n    if (socket == null) return\r\n\r\n    socket.on('receive-message', GotNewMessage)\r\n\r\n    return () => socket.off('receive-message')\r\n\r\n  }, [socket,addMessageToConversation])\r\n\r\n\r\n  useEffect(async () =>\r\n  {\r\n    try\r\n    {\r\n      let response = await axios.get(\"http://localhost:5000/api/conversations/UserConversations/\"+sessionStorage['id'],config)\r\n      let ConversationsList =  response.data.map(conversation=>\r\n      {\r\n        if(conversation.Participants.length == 1 && conversation.Name == sessionStorage['name'] )\r\n        {\r\n          let UpdatedNameConversation = conversation\r\n          UpdatedNameConversation= {...UpdatedNameConversation,Name:conversation.Participants[0].name}\r\n\r\n          return UpdatedNameConversation\r\n        }\r\n\r\n        else return conversation\r\n          \r\n      })\r\n        \r\n      setConversations(ConversationsList)\r\n\r\n     }catch(err){console.log(err)}\r\n\r\n  },[newMessageFlag]) \r\n\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={{createGroupFlag,setCreateGroupFlag,sendMessage,conversations,createConversation,setConversations,setSelectedConversation,selectedConversation}}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}