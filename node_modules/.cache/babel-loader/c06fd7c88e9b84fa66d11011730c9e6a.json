{"ast":null,"code":"import _slicedToArray from\"C:/Users/User/OneDrive/Desktop/whatsapp/myclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'../css/chat.css';import React from'react';import{useState}from'react';import{useConversations}from'../contexts/conversationsprovider';import{Avatar}from'@material-ui/core';import ChatBody from'./chatbody';import SendImageBody from'./sendimagebody';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function Chat(){var _useConversations=useConversations(),selectedConversation=_useConversations.selectedConversation,currentConversationIsConnected=_useConversations.currentConversationIsConnected,typingFlag=_useConversations.typingFlag,setTypingFlag=_useConversations.setTypingFlag;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),imageFlag=_useState2[0],setImageFlag=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),imageURL=_useState4[0],setImageURL=_useState4[1];var groupheader=function groupheader(){var returnValue='';if(typingFlag!==''){returnValue=/*#__PURE__*/_jsxs(\"div\",{className:\"lastSeen\",children:[\" \",typingFlag,\" is typing...\"]});setTimeout(function(){return setTypingFlag('');},1000);}else{var UsersInGroup='';selectedConversation.Participants.forEach(function(participant,index){if(index===selectedConversation.Participants.length-1)UsersInGroup=UsersInGroup+participant.name;else UsersInGroup=UsersInGroup+participant.name+', ';});returnValue=/*#__PURE__*/_jsxs(\"div\",{className:\"lastSeen\",children:[UsersInGroup,\" \"]});}return returnValue;};function chatBodyCallback(image){setImageURL(image);setImageFlag(true);}function backToChatCallback(){setImageURL(null);setImageFlag(false);}var privateConversationHeader=function privateConversationHeader(){var returnValue='';if(currentConversationIsConnected===''){if(typingFlag!==''){returnValue=/*#__PURE__*/_jsx(\"div\",{className:\"lastSeen\",children:\" typing...\"});setTimeout(function(){return setTypingFlag('');},1000);}else returnValue=/*#__PURE__*/_jsxs(\"div\",{className:\"connected\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"circle\"}),\" online \"]});}else returnValue=/*#__PURE__*/_jsx(\"div\",{className:\"lastSeen\",children:currentConversationIsConnected});return returnValue;};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat_header\",children:[/*#__PURE__*/_jsx(Avatar,{src:selectedConversation.ConversationImage}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat_header_info\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\" \",selectedConversation.Name,\" \"]}),selectedConversation.isGroup?groupheader():privateConversationHeader()]})]}),imageFlag?/*#__PURE__*/_jsx(SendImageBody,{imageURL:imageURL,backToChat:backToChatCallback}):/*#__PURE__*/_jsx(ChatBody,{imageCallback:chatBodyCallback})]});}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chat.js"],"names":["React","useState","useConversations","Avatar","ChatBody","SendImageBody","Chat","selectedConversation","currentConversationIsConnected","typingFlag","setTypingFlag","imageFlag","setImageFlag","imageURL","setImageURL","groupheader","returnValue","setTimeout","UsersInGroup","Participants","forEach","participant","index","length","name","chatBodyCallback","image","backToChatCallback","privateConversationHeader","ConversationImage","Name","isGroup"],"mappings":"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","sourcesContent":["import '../css/chat.css'\r\nimport React from 'react'\r\nimport { useState} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { Avatar } from '@material-ui/core'\r\nimport ChatBody from './chatbody';\r\nimport SendImageBody from './sendimagebody';\r\n\r\nexport default function Chat() {\r\n\r\n    const {selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag} = useConversations()\r\n    const [imageFlag,setImageFlag] =useState(false)\r\n    const [imageURL,setImageURL] =useState(false)\r\n\r\n    const groupheader = () =>\r\n    {\r\n      let returnValue = ''\r\n      if(typingFlag !== '')\r\n      {\r\n        returnValue = <div className='lastSeen'> {typingFlag} is typing...</div>\r\n        setTimeout(()=> setTypingFlag(''),1000)\r\n      }\r\n\r\n      else\r\n      {\r\n        let UsersInGroup = ''\r\n        selectedConversation.Participants.forEach((participant,index)=> \r\n        {\r\n            if(index ===  selectedConversation.Participants.length-1 )\r\n                UsersInGroup = UsersInGroup + participant.name\r\n            else\r\n                UsersInGroup= UsersInGroup + participant.name + ', '\r\n        })\r\n            \r\n        returnValue=  <div className='lastSeen'>{UsersInGroup} </div>\r\n\r\n      }\r\n\r\n      return returnValue\r\n    }\r\n\r\n    function chatBodyCallback(image)\r\n    {\r\n      setImageURL(image)\r\n      setImageFlag(true)\r\n    }\r\n\r\n    function backToChatCallback()\r\n    {\r\n      setImageURL(null)\r\n      setImageFlag(false)\r\n    }\r\n\r\n    const privateConversationHeader = () =>\r\n    {\r\n       let returnValue = ''\r\n       if(currentConversationIsConnected === '')\r\n       {\r\n        if(typingFlag !== '')\r\n        {\r\n            returnValue = <div className='lastSeen'> typing...</div>\r\n            setTimeout(()=> setTypingFlag(''),1000)\r\n\r\n        }\r\n\r\n        else returnValue = <div className='connected'><div className='circle'></div> online </div>\r\n            \r\n       }\r\n       else returnValue = <div className='lastSeen'>{currentConversationIsConnected}</div>\r\n\r\n\r\n      return returnValue\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='chat'>\r\n            <div className='chat_header'>\r\n                <Avatar src={selectedConversation.ConversationImage}/>\r\n                <div className='chat_header_info'>\r\n                   <h2> {selectedConversation.Name} </h2> \r\n                   {selectedConversation.isGroup?  groupheader() : privateConversationHeader()}\r\n               </div>\r\n            </div>\r\n\r\n            {imageFlag?   <SendImageBody imageURL={imageURL} backToChat={backToChatCallback}/>:<ChatBody imageCallback={chatBodyCallback}/>}  \r\n\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}