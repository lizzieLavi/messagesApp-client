{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\whatsapp\\\\myclient\\\\src\\\\components\\\\chatbody.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useState, useCallback, useEffect } from 'react';\nimport { useConversations } from '../contexts/conversationsprovider';\nimport { useSocket } from '../contexts/socketprovider';\nimport { useUser } from '../contexts/userprovider';\nimport { IconButton } from '@material-ui/core';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ImageIcon from '@material-ui/icons/Image';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Picker from 'emoji-picker-react';\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport axios from 'axios';\nimport Message from './message';\nimport AudioMessage from './audiomessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatBody(props) {\n  _s();\n\n  const [Text, setText] = useState('');\n  const {\n    socket\n  } = useSocket();\n  const {\n    info\n  } = useUser();\n  const {\n    sendMessage,\n    selectedConversation\n  } = useConversations();\n  const inputRef = useRef(null);\n  const [emojiFlag, setEmojiFlag] = useState(false);\n  const [recordFlag, setRecordFlag] = useState(false);\n  const {\n    startRecording,\n    stopRecording,\n    mediaBlobUrl,\n    clearBlobUrl\n  } = useReactMediaRecorder({\n    audio: true\n  });\n  const [audioBlob, setAudioBlob] = useState(null);\n  useEffect(() => {\n    setEmojiFlag(false);\n  }, [selectedConversation]);\n  const setRef = useCallback(node => {\n    if (node) node.scrollIntoView({\n      smooth: true\n    });\n  }, []);\n  useEffect(() => {\n    async function fetchData() {\n      if (audioBlob != null) {\n        let audio = await fetch(mediaBlobUrl).then(res => res.blob());\n        const data = new FormData();\n        data.append('file', audio);\n        data.append('resource_type', 'video');\n        data.append(\"upload_preset\", \"whatsApp_clone\");\n        data.append(\"cloud_name\", \"dsrgpqnyv\");\n\n        try {\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/video/upload\", data);\n          let recordURL = response.data.url;\n          recordURL = recordURL.slice(0, -4);\n          recordURL += 'mp3';\n          setRecordFlag(false);\n          clearBlobUrl();\n          sendMessage(Text, null, null, recordURL);\n          setRecordFlag(false);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n\n    fetchData();\n  }, [audioBlob]);\n\n  function typing(e) {\n    setText(e.target.value);\n    if (socket.current == null) return;\n    socket.current.emit(\"typing\", {\n      user: info,\n      Conversation: selectedConversation\n    });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    sendMessage(Text, false, null, null);\n    setText(' ');\n  }\n\n  async function handleImage(e) {\n    const data = new FormData();\n    data.append('file', e.target.files[0]);\n    data.append(\"upload_preset\", \"whatsApp_clone\");\n    data.append(\"cloud_name\", \"dsrgpqnyv\");\n\n    try {\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\", data);\n      props.imageCallback(response.data.url);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  function recordStart() {\n    setRecordFlag(true);\n    startRecording();\n  }\n\n  async function handleRecord() {\n    stopRecording();\n    let res = await fetch(mediaBlobUrl);\n    setAudioBlob(res.blob());\n  }\n\n  function cancelRecord() {\n    stopRecording();\n    clearBlobUrl();\n    setRecordFlag(false);\n  }\n\n  function updateRecordingDiv() {\n    let recordDiv = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n          fontSize: \"large\",\n          style: {\n            color: 'red'\n          },\n          onClick: cancelRecord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(CheckIcon, {\n          fontSize: \"large\",\n          style: {\n            color: 'green'\n          },\n          onClick: handleRecord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 23\n    }, this);\n\n    return recordDiv;\n  }\n\n  const onEmojiClick = (event, emojiObject) => {\n    setText(Text + emojiObject.emoji);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body_and_footer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_body\",\n      children: selectedConversation.Messages.map((message, index) => {\n        const lastMessage = selectedConversation.Messages.length - 1 === index;\n        let sender = '';\n        sender = message.name === 'manager' ? 'manager_message' : message.id === sessionStorage['id'] ? 'chat_message chat_sender' : ' chat_message chat_reciever';\n        let image = message.id === sessionStorage['id'] ? info.imageName : selectedConversation.ConversationImage;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: sender == 'manager_message' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"around_message\",\n            ref: lastMessage ? setRef : null,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"manager_message\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message_content\",\n                children: message.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 23\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: sender,\n            ref: lastMessage ? setRef : null,\n            children: message.containsRecord ? /*#__PURE__*/_jsxDEV(AudioMessage, {\n              message: message,\n              sender: sender,\n              image: image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              message: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 87\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 22\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_footer_with_stickers\",\n      children: [emojiFlag ? /*#__PURE__*/_jsxDEV(Picker, {\n        onEmojiClick: (e, emojiObject) => onEmojiClick(e, emojiObject),\n        pickerStyle: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 23\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_footer\",\n        children: [emojiFlag ? /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setEmojiFlag(false),\n          children: [/*#__PURE__*/_jsxDEV(CloseIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 71\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 24\n        }, this) : '', /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => setEmojiFlag(true),\n          children: /*#__PURE__*/_jsxDEV(InsertEmoticonIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          accept: \"image/*\",\n          className: \"invisibleInput\",\n          id: \"icon-button-file\",\n          type: \"file\",\n          style: {\n            visibility: 'hidden'\n          },\n          onChange: handleImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"icon-button-file\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            component: \"span\",\n            children: /*#__PURE__*/_jsxDEV(ImageIcon, {\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 16\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"message_section\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"message_input\",\n            ref: inputRef,\n            value: Text,\n            onChange: typing,\n            type: \"text\",\n            placeholder: \"type a message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \" send \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 12\n        }, this), recordFlag ? updateRecordingDiv() : /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: recordStart,\n          children: /*#__PURE__*/_jsxDEV(MicIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ChatBody, \"LyEVz/AqliHJKAU+lLjLwUKAgVc=\", false, function () {\n  return [useSocket, useUser, useConversations, useReactMediaRecorder];\n});\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/whatsapp/myclient/src/components/chatbody.js"],"names":["React","useRef","useState","useCallback","useEffect","useConversations","useSocket","useUser","IconButton","InsertEmoticonIcon","MicIcon","CloseIcon","ImageIcon","CheckIcon","Picker","useReactMediaRecorder","axios","Message","AudioMessage","ChatBody","props","Text","setText","socket","info","sendMessage","selectedConversation","inputRef","emojiFlag","setEmojiFlag","recordFlag","setRecordFlag","startRecording","stopRecording","mediaBlobUrl","clearBlobUrl","audio","audioBlob","setAudioBlob","setRef","node","scrollIntoView","smooth","fetchData","fetch","then","res","blob","data","FormData","append","response","post","recordURL","url","slice","err","console","log","typing","e","target","value","current","emit","user","Conversation","handleSubmit","preventDefault","handleImage","files","imageCallback","recordStart","handleRecord","cancelRecord","updateRecordingDiv","recordDiv","color","onEmojiClick","event","emojiObject","emoji","Messages","map","message","index","lastMessage","length","sender","name","id","sessionStorage","image","imageName","ConversationImage","containsRecord","width","visibility"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\r\nimport { useState ,useCallback,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\nimport {IconButton } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Picker from 'emoji-picker-react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\nimport axios from 'axios'\r\nimport Message from './message';\r\nimport AudioMessage from './audiomessage';\r\n\r\n\r\n\r\n\r\nfunction ChatBody(props) {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation} = useConversations()\r\n    const inputRef = useRef(null)\r\n  \r\n    const [emojiFlag,setEmojiFlag] = useState(false)\r\n    const [recordFlag,setRecordFlag] =useState(false)\r\n    const {startRecording,stopRecording,mediaBlobUrl,clearBlobUrl} = useReactMediaRecorder({audio: true })\r\n    const [audioBlob,setAudioBlob] = useState(null)\r\n  \r\n\r\n    useEffect(()=>{\r\n      setEmojiFlag(false)\r\n    },[selectedConversation])\r\n\r\n\r\n    const setRef = useCallback((node) => \r\n    {\r\n\r\n      if(node)\r\n         node.scrollIntoView({smooth:true})\r\n    },[])\r\n\r\n\r\n  useEffect( () => {\r\n    async function fetchData() {\r\n    if(audioBlob != null)\r\n    {\r\n      let audio= await fetch(mediaBlobUrl).then(res=> res.blob())\r\n      const data = new FormData();\r\n           \r\n      data.append('file', audio);\r\n      data.append('resource_type', 'video');\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n      try{\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/video/upload\",data)\r\n        let recordURL = response.data.url\r\n        recordURL=(recordURL.slice(0,-4))\r\n        recordURL+= 'mp3'\r\n        setRecordFlag(false)\r\n        clearBlobUrl()\r\n        sendMessage(Text,null,null,recordURL)\r\n        setRecordFlag(false)\r\n  \r\n      }catch(err){console.log(err)}\r\n    }\r\n    }\r\n\r\n    fetchData();\r\n \r\n  }, [audioBlob])\r\n\r\n\r\n\r\n    function typing(e)\r\n    {\r\n        setText(e.target.value)\r\n        if (socket.current == null) return;\r\n        socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n    }\r\n\r\n    function handleSubmit(e)\r\n    {\r\n      e.preventDefault()\r\n      sendMessage(Text,false,null,null)\r\n\r\n      setText(' ')\r\n    }\r\n\r\n    async function handleImage(e)\r\n    {\r\n      const data = new FormData()\r\n      data.append('file',e.target.files[0])\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n      try{\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n\r\n      props.imageCallback(response.data.url)\r\n      }catch(err){console.log(err)}\r\n    }\r\n\r\n   function recordStart()\r\n   {\r\n    setRecordFlag(true)\r\n    startRecording()\r\n   }\r\n \r\n    async function handleRecord()\r\n    {\r\n         stopRecording()\r\n         let res = await fetch(mediaBlobUrl)\r\n         setAudioBlob(res.blob())            \r\n    }\r\n\r\n  function cancelRecord()\r\n  {\r\n    stopRecording()\r\n    clearBlobUrl()\r\n    setRecordFlag(false)\r\n  }\r\n\r\n    function updateRecordingDiv()\r\n    {\r\n      let recordDiv = <div>\r\n      <IconButton>\r\n        <CloseIcon fontSize='large' style={{color:'red'}} onClick={cancelRecord} />\r\n      </IconButton>\r\n      <IconButton>\r\n         <CheckIcon fontSize='large'style={{color:'green'}} onClick={handleRecord} />\r\n      </IconButton>\r\n      </div>\r\n\r\n      return recordDiv\r\n  \r\n    }\r\n    \r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setText(Text + emojiObject.emoji)\r\n      };\r\n\r\n\r\n\r\n    return(\r\n\r\n      <div className= 'body_and_footer'>\r\n     \r\n <div className='chat_body'>\r\n      \r\n      \r\n        {selectedConversation.Messages.map((message,index)=>\r\n         {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender= ''\r\n            sender= message.name==='manager'? 'manager_message':( message.id===sessionStorage['id']? 'chat_message chat_sender' : ' chat_message chat_reciever')\r\n            let image=message.id===sessionStorage['id']? info.imageName :selectedConversation.ConversationImage\r\n\r\n            return (\r\n             \r\n                     <div>\r\n                      {sender == 'manager_message'?\r\n                      <div className='around_message'ref={lastMessage ? setRef : null}>\r\n                        <div className='manager_message'>\r\n                     <span className='message_content'>{message.message}</span>\r\n                     </div>\r\n                     </div>:\r\n                     <div key={index} className={sender} ref={lastMessage ? setRef : null}>\r\n                    {message.containsRecord ? \r\n                    <AudioMessage message={message} sender={sender} image={image}/> : <Message message={message}/> }\r\n\r\n                </div> }\r\n                </div>\r\n          )}\r\n        )}\r\n\r\n      </div>\r\n\r\n      <div className='chat_footer_with_stickers'>\r\n         {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n         <div className='chat_footer'>\r\n           {emojiFlag? <IconButton  onClick={()=>setEmojiFlag(false)}><CloseIcon fontSize='large'/> </IconButton>:''}\r\n           <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n             <InsertEmoticonIcon fontSize='large'/>\r\n           </IconButton>\r\n           <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n           <label htmlFor=\"icon-button-file\">\r\n             <IconButton component=\"span\">\r\n               <ImageIcon  fontSize='large'/>\r\n             </IconButton>\r\n           </label> \r\n\r\n           <form onSubmit={handleSubmit} className='message_section'>\r\n             <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n             <button type='submit' > send </button>\r\n           </form>\r\n           {recordFlag? updateRecordingDiv() :   \r\n           <IconButton onClick={recordStart}>\r\n             <MicIcon fontSize='large'  />\r\n           </IconButton>}\r\n         </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n    \r\n)}\r\n\r\nexport default ChatBody\r\n"]},"metadata":{},"sourceType":"module"}