{"version":3,"sources":["components/login.js","contexts/userprovider.js","contexts/socketprovider.js","contexts/conversationsprovider.js","components/conversations.js","components/contacts.js","components/addnewcontact.js","components/createnewgroup.js","components/profiledetails.js","components/sidebar.js","components/addgroupmember.js","components/showgroupdetails.js","components/showuserdetails.js","components/message.js","components/audiomessage.js","components/chatbody.js","components/sendimagebody.js","components/chat.js","components/dashboard.js","components/register.js","components/App.js","index.js"],"names":["LogIn","props","useState","phone","setPhone","UserName","setUserName","Error","setError","history","useHistory","e","a","preventDefault","obj","name","axios","post","response","data","sessionStorage","token","User","_id","CanLogIn","push","class","className","onSubmit","id","type","placeholder","onChange","target","value","required","to","style","margin","UserContext","React","createContext","useUser","useContext","UserProvider","children","contacts","setContacts","info","setInfo","config","getContacts","get","imageName","LastSeen","Status","useEffect","then","res","fetchData","createContact","status","message","filter","contact","length","newContacts","UpdatedUser","put","console","log","Provider","getSearchContacts","str","SearchResult","includes","SocketContext","useSocket","SocketProvider","userId","socket","useRef","ConnectedUsers","setConnectedUsers","current","io","emit","on","users","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversation","setSelectedConversation","RefConversations","currentConversationRef","typingFlag","setTypingFlag","currentConversationIsConnected","setCurrentConversationIsConnected","headers","showDetails","setShowDetails","removedFromGroupFlag","setRemovedFromGroupFlag","audio","Audio","getConversations","ConversationsList","map","conversation","UpdatedConversation","isGroup","Name","Participants","ConversationImage","image","ids","groupFlag","messages","lastMessage","ConversationExists","find","participants","createdDate","parts","Intl","DateTimeFormat","hc","year","month","day","hour","minute","timeZone","formatToParts","Date","reduce","acc","part","Object","create","timeSent","containsImage","containsRecord","recordURL","FormData","append","url","newConversation","creatorId","Messages","LastMessage","description","Response","prevConversations","updatedConversation","updateDBConv","addCurrentParticipant","UpdatedConversations","forEach","user","conversationId","some","addMessageToConversation","useCallback","UpdatedConv","play","newListOfConversations","newConv","off","sendMessage","text","imageFlag","imageURL","time","recordFlag","CurrentMessage","sender","AddMessage","newListOfConcversations","updateSenderConversation","createConversation","getSearchConverastions","UpdateConversation","Conversations","index","onClick","handleSelectedConversation","Avatar","src","slice","Contacts","newConversationCallback","openModalCallback","Button","height","fontSize","startConversation","AddNewContact","closeModal","userNameRef","error","responseStatus","IconButton","ref","CreateNewGroup","selectedContactsId","setSelectedContactsId","groupName","setGroupName","groupImage","setGroupImage","previewImage","setPreviewImage","goToParticipants","setGoToParticipants","handleFileUpload","files","window","URL","createObjectURL","flex","marginLeft","paddingRight","width","backgroundColor","marginTop","display","flexDirection","alignItems","position","zIndex","color","accept","opacity","padding","borderRadius","border","outline","justifyContent","overflowY","contactId","prevSelectedContactsId","for","process","fontWeight","useStyles","makeStyles","root","ProfileDetails","backToConversations","editNameFlag","setEditNameFlag","editStatusFlag","setEditStatusFlag","emojiFlag","setEmojiFlag","Text","setText","setStatus","statusEmojiFlag","setStatusEmojiFlag","classes","picturePath","lastSeen","curser","onEmojiClick","emojiObject","event","prevText","emoji","pickerStyle","changeProfileName","defaultValue","prevStatus","onStatusEmojiClick","changeProfileStatus","SideBar","choosenAct","setChoosenAct","modalOpen","setModalOpen","searchFlag","setSearchFlag","choosenModal","setChoosenModal","openProfileDetailsFlag","setOpenProfileDetailsFlag","openChoosenModal","modalType","Modal","open","onClose","AddGroupMember","conversationContacts","setConversationContacts","participant","newParticipants","AddMember","ShowGroupDetails","EditGroupNameGlag","setEditGroupNameGlag","EditGroupDescriptionGlag","setEditGroupDescriptionGlag","Description","setDescription","dialogOpen","setDialogOpen","deleteUserDialog","setDeleteUserDialog","userToDelete","setUserToDelete","LastMasage","changeGroupName","paddingLeft","onDescriptionEmojiClick","changeGroupDescription","marginRight","borderBottom","cursor","existsFlag","participantId","openConversation","flexGrow","beforeDeleteUser","Dialog","removeFromGroup","removeUserFromGroup","ShowUserDetails","privateConversationHeader","pictureDialogOpen","setPictureDialogOpen","alt","paddingBottom","Message","SelectedImageURL","setSelectedImageURL","substring","AudioMessage","messageColor","controls","controlsList","ChatBody","inputRef","setRecordFlag","useReactMediaRecorder","startRecording","stopRecording","mediaBlobUrl","clearBlobUrl","audioBlob","setAudioBlob","setRef","node","scrollIntoView","smooth","imageCallback","handleRecord","fetch","blob","cancelRecord","choosenClass","visibility","htmlFor","component","Conversation","SendImageBody","handleSubmit","backToChat","Chat","setImageFlag","setImageURL","returnValue","setTimeout","chatSide","UsersInGroup","groupheader","withRouter","undefined","Register","setName","Picture","setPicture","marginBottom","App","setId","dashboard","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wZASe,SAASA,EAAMC,GAG5B,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA+BF,mBAAS,IAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAyBJ,mBAAS,IAAlC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAQC,cALhB,4CAQE,WAA4BC,GAA5B,iBAAAC,EAAA,6DAEEJ,EAAS,IACTG,EAAEE,iBACEC,EAAM,CAACC,KAAMV,EAASF,MAAOA,GAJnC,SAKuBa,IAAMC,KAAK,+CAA+CH,GALjF,OAOuB,eAFjBI,EALN,QAOcC,MAEVC,eAAc,OAAYF,EAASC,KAAKE,MACxCD,eAAc,GAASF,EAASC,KAAKG,KAAKC,IAC1CH,eAAc,KAAWF,EAASC,KAAKG,KAAKP,KAC5Cd,EAAMuB,SAASN,EAASC,KAAKG,KAAKC,KAEjCd,EAAQgB,KAAK,SAKdjB,EAAS,4DAnBb,4CARF,sBA+BE,OAEE,qBAAKkB,MAAM,UAAX,SACE,sBAAMC,UAAU,aAAaC,SAlCnC,4CAkCM,SACE,sBAAKF,MAAM,MAAX,UACE,yBAAQA,MAAM,YAAd,UACE,wCACA,2DAEF,sBAAKA,MAAM,YAAX,UACE,uBAAMA,MAAM,aAAZ,UACE,mBAAGA,MAAM,sBACT,uBAAOA,MAAM,aAAaG,GAAG,YAAYC,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACrB,GAAD,OAAML,EAAYK,EAAEsB,OAAOC,QAAQC,UAAQ,OAEpI,uBAAMT,MAAM,aAAZ,UACE,mBAAGA,MAAM,cACT,uBAAOA,MAAM,aAAaI,KAAK,WAAWC,YAAY,WAAWF,GAAG,MAAOd,KAAK,WAAWiB,SAAU,SAACrB,GAAD,OAAMP,EAASO,EAAEsB,OAAOC,QAAQC,UAAQ,OAE/I,wBAAQR,UAAU,SAASG,KAAK,SAAhC,yBAEF,8BACE,eAAC,IAAD,CAAOH,UAAU,8BAA8BS,GAAE,YAAjD,yBAA4E,mBAAGC,MAAO,CAACC,OAAO,OAAOZ,MAAM,kBAAkB,cAAY,cAE1InB,S,4IC7DLgC,EAAcC,IAAMC,gBAEnB,SAASC,IAEd,OAAOC,qBAAWJ,GAGZ,SAASK,EAAT,GACP,IAD+BC,EAChC,EADgCA,SAE9B,EAAgC3C,mBAAS,IAAzC,mBAAO4C,EAAP,KAAiBC,EAAjB,KACA,EAAsB7C,mBAAS,IAA/B,mBAAO8C,EAAP,KAAYC,EAAZ,KACMC,EAAQ,CAAC,QAAW,CAAC,iBAAiB9B,eAAc,SAH5D,SAkBkB+B,IAlBlB,2EAkBG,4BAAAvC,EAAA,sEAE0BI,IAAMoC,IAAI,gDAAgDhC,eAAc,GAAO8B,GAFzG,cAEShC,EAFT,OAGG+B,EAAQ,CAACpB,GAAGX,EAASC,KAAKI,IAAIR,KAAKG,EAASC,KAAKJ,KAAKZ,MAAMe,EAASC,KAAKhB,MAAMkD,UAAUnC,EAASC,KAAKkC,UAAUC,SAASpC,EAASC,KAAKmC,SAASC,OAAOrC,EAASC,KAAKoC,SAH1K,kBAIUrC,EAASC,KAAK2B,UAJxB,4CAlBH,sBAOEU,qBAAW,WACX,4CACE,sBAAA5C,EAAA,sDAEEuC,IAAcM,MAAK,SAAAC,GAAG,OAAGX,EAAYW,MAFvC,4CADF,uBAAC,WAAD,wBAMEC,KAEC,CAACV,IAsBJ,IAAMW,EAAa,uCAAG,WAAM7C,GAAN,qBAAAH,EAAA,yDAGjBG,IAASiC,EAAKjC,KAHG,yCAKX,CAAC8C,OAAO,QAAQC,QAAQ,sBALb,UAUQ,IAFRhB,EAASiB,QAAO,SAAAC,GAAO,OAAGA,EAAQjD,OAASA,KAE9CkD,OAVG,yCAYX,CAACJ,OAAO,QAAQC,QAAQ,mBAZb,gCAkBI9C,IAAMoC,IAAI,0DAA4DrC,EAAKmC,GAlB/E,UAoBG,kBAFfhC,EAlBY,QAoBNC,KApBM,wBAsBV6C,EAAU,CAACnC,GAAGX,EAASC,KAAKI,IAAIpB,MAAMe,EAASC,KAAKhB,MAAMY,KAAKG,EAASC,KAAKJ,KAAKsC,UAAUnC,EAASC,KAAKkC,UAAUE,OAAOrC,EAASC,KAAKoC,QAC3IW,EAvBY,sBAuBMpB,GAvBN,CAuBekB,IAC/BjB,EAAYmB,GACRC,EAzBY,2BAyBInB,GAzBJ,IAyBSF,SAASoB,IAzBlB,oBA4BRlD,IAAMoD,IAAI,gDAAkDhD,eAAc,GAAO+C,EAAY,CAAC,QAAW,CAAC,iBAAiB/C,eAAc,UA5BjI,2DA6BHiD,QAAQC,IAAR,MA7BG,yDA+BN,CAACT,OAAO,QAAQC,QAAQ,sBA/BlB,0DAiCRO,QAAQC,IAAR,MAjCQ,iCAmCb,CAACT,OAAO,OAnCK,kEAAH,sDAyCnB,OACE,cAACtB,EAAYgC,SAAb,CAAsBrC,MAAO,CAACa,cAAYE,UAAQD,OAAKE,SAAOJ,WAASc,gBAAcY,kBArDvF,SAA2BC,GAEzBtB,IAAcM,MAAK,SAAAC,GAEjB,IAAIgB,EAAchB,EAAIK,QAAO,SAAAC,GAAO,OAAkC,IAA/BA,EAAQjD,KAAK4D,SAASF,MAC7D1B,EAAY2B,QAgDd,SACG7B,I,sBCzFD+B,EAAgBpC,IAAMC,gBAErB,SAASoC,IAEd,OAAOlC,qBAAWiC,GAGb,SAASE,EAAT,GACN,IADgCC,EACjC,EADiCA,OAAQlC,EACzC,EADyCA,SAGjCmC,EAASC,mBACf,EAA0C/E,mBAAS,IAAnD,mBAAOgF,EAAP,KAAsBC,EAAtB,KA2BA,OAzBA3B,qBAAU,WACV,4CACE,sBAAA5C,EAAA,sDACAoE,EAAOI,QAAUC,IAAG,yCADpB,4CADF,uBAAC,WAAD,wBAKE1B,KAEA,IAEJH,qBAAU,WACV,4CACE,sBAAA5C,EAAA,sDAEEoE,EAAOI,QAAQE,KAAK,UAAUlE,eAAc,IAC5C4D,EAAOI,QAAQG,GAAG,qBAAqB,SAAAC,GAErCL,EAAkBK,MALtB,4CADF,uBAAC,WAAD,wBAUE7B,KAEA,CAACoB,IAGC,cAACH,EAAcL,SAAf,CAAwBrC,MAAO,CAAC8C,SAAOE,kBAAvC,SACGrC,ICnCP,IAAM4C,EAAuBjD,IAAMC,gBAE5B,SAASiD,IAEd,OAAO/C,qBAAW8C,GAGb,SAASE,EAAT,GACN,IADsC9C,EACvC,EADuCA,SAGrC,EAAyBH,IAAlBI,EAAP,EAAOA,SAAUE,EAAjB,EAAiBA,KACjB,EAA0C9C,mBAAS,IAAnD,mBAAO0F,EAAP,KAAsBC,EAAtB,KACA,EAAwD3F,qBAAxD,mBAAO4F,EAAP,KAA6BC,EAA7B,KACMC,EAAmBf,iBAAOW,GAC1BK,EAAyBhB,iBAAOa,GACtC,EAAmCjB,IAA3BG,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,eAChB,EAAkChF,mBAAS,IAA3C,mBAAOgG,EAAP,KAAkBC,EAAlB,KACA,EAA2EjG,mBAAS,IAApF,mBAAOkG,EAAP,KAAsCC,EAAtC,KACMnD,EAAS,CAAEoD,QAAS,CAAE,iBAAkBlF,eAAc,SAC5D,EAAoClB,oBAAS,GAA7C,mBAAOqG,EAAP,KAAmBC,EAAnB,KACA,EAAuDtG,oBAAS,GAAhE,mBAAOuG,EAAP,KAA4BC,EAA5B,KACMC,EAAQ,IAAIC,MAAM,uFAb1B,SAkGiBC,IAlGjB,2EAkGE,8BAAAjG,EAAA,+EAKyBI,IAAMoC,IAAI,0EAA2EhC,eAAc,GAAO8B,GALnI,cAKQhC,EALR,OAMQ4F,EAAoB5F,EAASC,KAAK4F,KAAI,SAACC,GAEzC,IAAIC,EAAqBD,EAWxB,OAVIA,EAAaE,SAAWF,EAAaG,OAASnE,EAAKjC,OACtDkG,EAAmB,2BAAQA,GAAR,IAA4BE,KAAMH,EAAaI,aAAa,GAAGrG,KAAKsG,kBAAkBL,EAAaI,aAAa,GAAGE,SAErIxB,GAEEA,EAAqBvE,MAAQ0F,EAAoB1F,KAClDwE,EAAwBkB,GAIpBA,KAnBd,kBAuBWH,GAvBX,gCAyBiBzC,QAAQC,IAAR,MAzBjB,0DAlGF,kEAkIE,WAAsCG,GAAtC,SAAA7D,EAAA,sDAEEiG,IAAmBpD,MAAK,SAAAC,GAEtB,IAAIgB,EAAehB,EAAIK,QAAO,SAAAiD,GAAY,OACP,IAAnCA,EAAaG,KAAKxC,SAASF,MAC3BoB,EAAiBnB,MANrB,4CAlIF,kEA8IE,WAAkC6C,EAAKxG,EAAMuG,EAAME,GAAnD,qCAAA5G,EAAA,yDAGMyG,EAAoBC,EACpBJ,EAAUM,EACVC,EAAW,GACXC,EAAY,GAIG,IAAfH,EAAItD,OAVV,yCAWW,CAACJ,OAAO,QAAQC,QAAQ,4BAXnC,UAeM6D,EAAqB,KACN,IAAfJ,EAAItD,QAAiBiD,IACvBS,EAAqB/B,EAAcgC,MACjC,SAACZ,GAAD,OAAkBA,EAAaG,OAASpG,OAIxC4G,EAtBN,iBAsB0B5B,EAAwB4B,GAtBlD,4BA4BUE,EAAeN,EAAIR,KAAI,SAAClF,GAK5B,OAH+BiB,EAASiB,QACtC,SAACC,GAAD,OAAanC,IAAOmC,EAAQnC,MAEE,OAKrBJ,KAAK,CAChBI,GAAImB,EAAKnB,GACTd,KAAMiC,EAAKjC,KACXZ,MAAO6C,EAAK7C,MACZkD,UAAWL,EAAKK,UAChBC,SAAUN,EAAKM,WAGbwE,EAAY,IAGZZ,EAjDR,wBAmDUa,EAAQ,IAAIC,KAAKC,eAAe,KAAM,CACxCC,GAAI,MACJC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,SAAS,mBACVC,cAAc,IAAIC,MAClBC,QAAO,SAACC,EAAKC,GAEZ,OADAD,EAAIC,EAAK/G,MAAQ+G,EAAK3G,MACf0G,IACNE,OAAOC,OAAO,OAEjBjB,EAAY,GAAD,OAAKC,EAAMM,IAAX,YAAkBN,EAAMK,MAAxB,YAAiCL,EAAMI,KAAvC,YAA+CJ,EAAMO,KAArD,YAA6DP,EAAMQ,QAE9Eb,EAAY,CAAC3G,KAAK,UAAU+C,QAASd,EAAKjC,KAAM,sBAAsBiI,SAAS,GAAGC,eAAc,EAAMC,gBAAe,EAAMC,UAAU,MACrI1B,EAAShG,KAAKiG,IAERvG,EAAO,IAAIiI,UACZC,OAAO,OAAOhC,GACnBlG,EAAKkI,OAAO,gBAAgB,kBAC5BlI,EAAKkI,OAAO,aAAa,aAzE/B,oBA4E6BrI,IAAMC,KAAK,yDAAyDE,GA5EjG,QA4EYD,EA5EZ,OA6EQmG,EAAoBnG,EAASC,KAAKmI,IA7E1C,mDA+EkBjF,QAAQC,IAAR,MA/ElB,eAmFQiF,EACJ,CACEpC,KAAMpG,EACNyI,UAAWpI,eAAc,GACzBgG,aAAcS,EACd4B,SAAUhC,EACViC,YAAYhC,EACZL,kBAAmBA,EACnBH,QAAQA,EACRY,YAAYA,EACZ6B,YAAa,mBA7FnB,oBAmG2B3I,IAAMC,KACzB,uDACAsI,EACArG,GAtGR,QAyGmC,aANzB0G,EAnGV,QAyGmBzI,KAAK0C,SAEhBkC,EAAwB6D,EAASzI,KAAK6F,eAGlC4C,EAASzI,KAAK6F,aAAayC,SAASxF,OAAS,IAA6C,IAAvC2F,EAASzI,KAAK6F,aAAaE,WAEhFrB,GAAiB,SAACgE,GAChB,MAAM,GAAN,mBAAWA,GAAX,CAA8BD,EAASzI,KAAK6F,kBAE9ChC,EAAOI,QAAQE,KAAK,uBAAuBsE,EAASzI,KAAK6F,gBAnHnE,mDAsHkB3C,QAAQC,IAAR,MAtHlB,oEA9IF,kEAwQE,WAAkCwF,GAAlC,qBAAAlJ,EAAA,6DAGMmJ,EAHN,eAGuBD,GAChBA,EAAoBJ,YAAY5F,QAAQa,SAAS,UAEhDqF,EAAuB,CAACnI,GAAImB,EAAKnB,GAAG1B,MAAO6C,EAAK7C,MAAMY,KAAMiC,EAAKjC,KAAKuG,MAAOtE,EAAKK,WAClFwE,EAFN,sBAEuBiC,EAAoB1C,cAF3C,CAEwD4C,IACtDD,EAAa,2BAAIA,GAAL,IAAkB3C,aAAaS,YAGtCkC,EAAaxI,IAXtB,kBAgBuBP,IAAMoD,IAAI,wDAAyD0B,EAAqBvE,IAAIwI,EAAa7G,GAhBhI,OAiB8B,YAjB9B,OAiBgB/B,KAAK0C,SAEXoG,EAAqB,GACpBH,EAAoBJ,YAAY5F,QAAQa,SAAS,SAapDsF,EAAqBrE,EAAc7B,QAAO,SAAAiD,GAAY,OAAGA,EAAazF,MAAQuE,EAAqBvE,OACnGwE,MAZAA,EAAwB+D,GACxBlE,EAAcsE,SAAQ,SAAAlD,GAEjBA,EAAazF,MAAMuI,EAAoBvI,IACxC0I,EAAqBxI,KAAKqI,GACvBG,EAAqBxI,KAAKuF,OAUhC8C,EAAoBJ,YAAY5F,QAAQa,SAAS,WAClDK,EAAOI,QAAQE,KAAK,eAAeQ,GAEnCd,EAAOI,QAAQE,KAAK,uBAAuBQ,GAE7CD,EAAiBoE,IA1CvB,kDA6Cc5F,QAAQC,IAAR,MA7Cd,2DAxQF,sBAgBEd,qBAAU,WACV,4CAEE,sBAAA5C,EAAA,yDAEoB,MAAjBoE,EAAOI,QAFV,iDAGAJ,EAAOI,QAAQG,GAAG,eAAc,YAC/B,IADiC4E,EAClC,EADkCA,KAAKC,EACvC,EADuCA,eAGhCtE,GAEEA,EAAqBvE,MAAQ6I,GAE7BjE,EAAcgE,EAAKpJ,SAK5BiE,EAAOI,QAAQG,GAAG,sBAAlB,sBAAwC,sBAAA3E,EAAA,sDAGtCiG,IAAmBpD,MAAK,SAAAC,GAAG,OAAGmC,EAAiBnC,MAHT,4CAOxCsB,EAAOI,QAAQG,GAAG,eAAlB,sBAAiC,sBAAA3E,EAAA,sDAG/BiG,IAAmBpD,MAAK,SAAAC,IAEtBmC,EAAiBnC,GACdoC,KAG4B,IADVpC,EAAIK,QAAO,SAAAiD,GAAY,OAAGA,EAAazF,MAAQuE,EAAqBvE,OACrE0C,QAChByC,GAAwB,OAVC,4CAtBjC,4CAFF,uBAAC,WAAD,wBA2CA/C,KAEE,CAACmC,IAEHtC,qBAAW,WACX,4CACE,4BAAA5C,EAAA,0DAEGkF,EAFH,oBAIIA,EAAqBoB,QAJzB,qBAMKhC,EAAemF,MAAK,SAAAF,GAAI,OAAGA,EAAKpF,SAAUe,EAAqBsB,aAAa,GAAGvF,MANpF,gBAQIwE,EAAkC,IARtC,uCAYyBrF,IAAMoC,IAAI,gDAAiD0C,EAAqBsB,aAAa,GAAGvF,GAAGqB,GAZ5H,OAYQhC,EAZR,OAaImF,EAAkCnF,EAASC,KAAKmC,UAbpD,6CADF,uBAAC,WAAD,wBAoBAK,KAEE,CAACuB,EAAea,IAElBvC,qBAAU,WACV,4CACE,sBAAA5C,EAAA,sDACCiG,IAAmBpD,MAAK,SAAAC,GAAG,OAAGmC,EAAiBnC,MADhD,4CADF,uBAAC,WAAD,wBAIEC,KAEC,IAyNH,IAAM2G,EAA2BC,sBAAW,uCAAC,mCAAA3J,EAAA,sDAAS4J,EAAT,EAASA,YAEpD7D,EAAM8D,OAEF9C,GAAqB,EACrB+C,EAAyB1E,EAAiBZ,QAAQ2B,KAAI,SAACC,GAEzD,GAAIA,EAAazF,MAAQiJ,EAAYjJ,IACrC,CACEoG,GAAqB,EACrB,IAAIgD,EAAO,2BACN3D,GADM,IAETyC,SAAUe,EAAYf,SACtBC,YAAac,EAAYd,cAO3B,OANMzD,EAAuBb,SAEtBa,EAAuBb,QAAQ7D,MAAQiJ,EAAYjJ,KACrDwE,EAAwB4E,GAGtBA,EAGJ,OAAO3D,KAITW,EAeA9B,EAAiB6E,GAbfF,EAAYtD,QAWfrB,GAAiB,SAACgE,GAAD,4BAA2BA,GAA3B,CAA6CW,QAT1DjB,EADN,2BAEOiB,GAFP,IAGErD,KAAMqD,EAAYpD,aAAa,GAAGrG,KAClCsG,kBAAmBmD,EAAYpD,aAAa,GAAG/D,YAG/CwC,GAAiB,SAACgE,GAAD,4BAA2BA,GAA3B,CAA8CN,QArCxB,2CAAD,sDA2C1C,CAAC1D,IAEHrC,qBAAU,WAGR,GAAsB,MAAlBwB,EAAOI,QAMX,OAJAY,EAAiBZ,QAAUQ,EAC3BK,EAAuBb,QAAUU,EACjCd,EAAOI,QAAQG,GAAG,kBAAmB+E,GAE9B,kBACLtF,EAAOI,QAAQwF,IAAI,kBAAmBN,MACxC,CAAC1E,EAAeE,IAkFlB,OACE,cAACL,EAAqBlB,SAAtB,CACErC,MAAO,CACL2I,YAxDN,SAAqBC,EAAKC,EAAUC,EAAS7B,GAG3C,IAAIpB,EAAQ,IAAIC,KAAKC,eAAe,KAAM,CAC1CC,GAAI,MACJC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,SAAS,mBACRC,cAAc,IAAIC,MAClBC,QAAO,SAACC,EAAKC,GAGZ,OADAD,EAAIC,EAAK/G,MAAQ+G,EAAK3G,MACf0G,IACNE,OAAOC,OAAO,OAEbkC,EAAI,UAAMlD,EAAMM,IAAZ,YAAmBN,EAAMK,MAAzB,YAAkCL,EAAMI,KAAxC,aAAiDJ,EAAMO,KAAvD,YAA+DP,EAAMQ,QAEzE2C,GAAY,EAEF,MAAX/B,IACA+B,GAAW,GAEd,IAAIC,EAAiB,CAAEtJ,GAAImB,EAAKnB,GAAId,KAAMiC,EAAKjC,KAAM+C,QAASgH,EAAO9B,SAAUiC,EAAMhC,cAAe8B,EAAU7B,eAAegC,EAAW/B,UAAUA,IAClI,IAAb4B,IACAI,EAAe,2BAAKA,GAAN,IAAqBH,SAASA,KAE/C,IAAII,EACJ,CACEvJ,GAAImB,EAAKnB,GACT1B,MAAO6C,EAAK7C,MACZY,KAAMiC,EAAKjC,KACXuG,MAAOtE,EAAKK,WAGVgI,EAAU,2BACVvF,GADU,IAEZ2D,SAAS,GAAD,mBAAM3D,EAAqB2D,UAA3B,CAAqC0B,IAC7CzB,YAAayB,IAGfnG,EAAOI,QAAQE,KAAK,eACpB,CACE8F,OAAQA,EACRnE,oBAAqBoE,EACrBjB,eAAgBtE,EAAqBvE,MAzER,SAAC8J,GAGhC,IAAI1D,GAAqB,EACzB5B,EAAwBsF,GAExB,IAAIC,EAA0B1F,EAAcmB,KAAI,SAACC,GAE/C,OAAIA,EAAazF,MAAQ8J,EAAW9J,KAElCoG,GAAqB,EACd0D,GAEGrE,KAMZnB,EAFE8B,EAEe2D,EAGA,SAACzB,GAAD,4BAA2BA,GAA3B,CAA6CwB,MAsDhEE,CAAyBF,IAOrBzF,gBACA4F,mBAxcR,kDAycQ3F,mBACAE,0BACAD,uBACAM,iCACAF,aACAC,gBACAsF,uBA/cR,4CAgdQlF,cACAC,iBACAkF,mBAldR,4CAmdQjF,uBACAC,2BAhBJ,SAoBG7D,I,OCneQ,SAAS8I,IAGtB,MAA8DjG,IAAvDK,EAAP,EAAOA,wBAAwBH,EAA/B,EAA+BA,cAAcY,EAA7C,EAA6CA,eAF/C,4CAKE,WAA0CQ,GAA1C,SAAApG,EAAA,sDAEE4F,GAAe,GACfT,EAAwBiB,GAH1B,4CALF,sBAYE,OACE,qBAAKrF,UAAU,QAAf,SACE,qBAAKA,UAAU,gBAAf,SACGiE,EAAcmB,KAAI,SAACC,EAAa4E,GAE/B,OACE,sBAAkBC,QAAS,kBAlBvC,2CAkB2CC,CAA2B9E,IAAgBrF,UAAU,gBAApF,UACE,cAACoK,EAAA,EAAD,CAAQC,IAAKhF,EAAaK,oBAC1B,sBAAK1F,UAAU,WAAf,UACE,oBAAIA,UAAU,YAAd,SAA2BqF,EAAaG,OACxC,uBAAMxF,UAAU,cAAhB,cAAiCqF,EAAa0C,YAAY5F,QAASmI,MAAM,EAAE,IAA3E,eAJML,UClBP,SAASM,EAAT,GACd,IADiCC,EAClC,EADkCA,wBAAwBC,EAC1D,EAD0DA,kBAGxD,EAAwB1J,IAAjBM,EAAP,EAAOA,KAAKF,EAAZ,EAAYA,SACL0I,EAAsB9F,IAAtB8F,mBAUP,OAEE,sBAAK7J,UAAU,iBAAf,UACE,oBAAIA,UAAU,iBAAd,6BACA,cAAC0K,EAAA,EAAD,CAAShK,MAAO,CAACiK,OAAO,OAAQhK,OAAO,UAAUiK,SAAS,QAASV,QAAS,kBAAIO,KAChFzK,UAAU,iBADV,4BAEA,qBAAKA,UAAU,gBAAf,SACGmB,EAASiE,KAAI,SAAA/C,GAEZ,OAEC,sBAAKrC,UAAU,gBAAgBkK,QAAS,kBAnBjD,YACC,IAD2BhK,EAC5B,EAD4BA,GAAGd,EAC/B,EAD+BA,KAAKuG,EACpC,EADoCA,MAGlCkE,EADQ,CAAC3J,GACcd,EAAKuG,GAAM,GAClC6E,IAemDK,CAAkB,CAAC3K,GAAGmC,EAAQnC,GAAGd,KAAKiD,EAAQjD,KAAKuG,MAAMtD,EAAQX,aAA7G,UACE,cAAC0I,EAAA,EAAD,CAAQC,IAAKhI,EAAQX,YACpB,sBAAK1B,UAAU,WAAf,UACE,qBAAIA,UAAU,YAAd,UAA2BqC,EAAQjD,KAAnC,OACA,uBAAMY,UAAU,cAAhB,cAAiCqB,EAAKO,OAAQ0I,MAAM,EAAE,IAAtD,wB,4BC5BD,SAASQ,EAAT,GACd,IADsCC,EACvC,EADuCA,WAG/BC,EAAc1H,mBACbrB,EAAiBlB,IAAjBkB,cACP,EAAuB1D,mBAAS,IAAhC,mBAAO0M,EAAP,KAAapM,EAAb,KAJF,4CAOE,4BAAAI,EAAA,sEAG6BgD,EAAc+I,EAAYvH,QAAQlD,OAH/D,OAK+B,QAFzB2K,EAHN,QAKoBhJ,QAEf6I,IACAlM,EAAS,KAKVA,EAASqM,EAAe/I,SAb5B,4CAPF,sBAyBE,OAEE,qBAAKnC,UAAU,UAAf,SACI,qBAAKA,UAAU,yBAAf,SACI,sBAAKA,UAAU,oBAAf,UACI,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,oBAAd,6BACA,cAACmL,EAAA,EAAD,CAAYnL,UAAU,gBAAiBkK,QAAS,kBAAIa,KAApD,SACE,cAAC,IAAD,CAAWH,SAAS,eAIxB,sBAAK5K,UAAU,kBAAf,UACE,oBAAIA,UAAU,cAAd,uBACA,uBAAOA,UAAU,gBAAgBG,KAAK,OAAOiL,IAAKJ,EAAaxK,UAAQ,IACvE,wBAAQR,UAAU,iBAAiBkK,QAxCrD,2CAwCkB,6BAEF,sBAAMlK,UAAU,aAAhB,SAA8BiL,W,uDC4E/BI,MArHf,YAA0C,IAAfN,EAAc,EAAdA,WAEvB,EAAoDxM,mBAAS,IAA7D,mBAAO+M,EAAP,KAA2BC,EAA3B,KACOpK,EAAYJ,IAAZI,SACA0I,EAAsB9F,IAAtB8F,mBACP,EAAgCtL,mBAAS,IAAzC,mBAAOiN,EAAP,KAAiBC,EAAjB,KACA,EAAkClN,qBAAlC,mBAAOmN,EAAP,KAAkBC,EAAlB,KACA,EAAqCpN,qBAArC,mBAAOqN,EAAP,KAAoBC,EAApB,KACA,EAA+CtN,oBAAS,GAAxD,mBAAOuN,EAAP,KAAwBC,EAAxB,KA6BA,SAASC,EAAiBhN,GAEtB2M,EAAc3M,EAAEsB,OAAO2L,MAAM,IAC7BJ,EAAgBK,OAAOC,IAAIC,gBAAgBpN,EAAEsB,OAAO2L,MAAM,KAI9D,OACE,qBAAKjM,UAAU,UAAf,SACE,qBAAKA,UAAU,uBAAf,SACE,qBAAKA,UAAU,6BAAf,UACuB,IAApB8L,EACD,sBAAK9L,UAAU,gBAAf,UACE,sBAAKU,MAAO,CAAC2L,KAAK,KAAKrM,UAAU,kBAAjC,UACE,oBAAIA,UAAU,oBAAoBU,MAAO,CAAC4L,WAAW,OAAOC,aAAa,OAAzE,+BACA,cAACpB,EAAA,EAAD,CAAYzK,MAAO,CAAC4L,WAAW,QAAQtM,UAAU,gBAAiBkK,QAAS,kBAAIa,KAA/E,SACE,cAAC,IAAD,CAAWH,SAAS,eAIvBgB,EACD,sBAAK5L,UAAU,qBAAf,UACE,cAACoK,EAAA,EAAD,CAASC,IAAKuB,EAAclL,MAAO,CAACiK,OAAQ,QAAS6B,MAAO,QAASC,gBAAgB,OAAQ9L,OAAO,OAAO+L,UAAU,QAArH,gBACA,sBAAK1M,UAAU,wBAAwBU,MAAO,CAACiM,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAASC,SAAS,WAAWC,OAAO,IAAIC,MAAM,SAA9I,UACE,cAAC,IAAD,CAAgBtM,MAAO,CAACiK,OAAQ,OAAQ6B,MAAO,OAAQQ,MAAM,WAC7D,uBAAOC,OAAO,UAAU/M,GAAG,OAAOC,KAAK,OAAOf,KAAK,OAAOiB,SAAU2L,IACpE,sBAAMtL,MAAO,CAACkK,SAAS,QAAvB,iCAIJ,qBAAK5K,UAAU,kBAAf,SACE,eAACoK,EAAA,EAAD,CAAU1J,MAAO,CAACiK,OAAQ,QAAS6B,MAAO,QAASC,gBAAgB,OAAQ9L,OAAO,OAAO+L,UAAU,QAAnG,UACE,cAAC,IAAD,CAAehM,MAAO,CAACoM,SAAS,WAAWC,OAAO,IAAKG,QAAQ,MAAMvC,OAAQ,OAAQ6B,MAAO,UAC5F,sBAAM9L,MAAO,CAACiM,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAASC,SAAS,WAAWC,OAAO,IAAIC,MAAM,SAA7G,UACE,cAAC,IAAD,CAAgBtM,MAAO,CAACiK,OAAQ,OAAQ6B,MAAO,OAAQQ,MAAM,WAC7D,uBAAOC,OAAO,UAAU/M,GAAG,OAAOC,KAAK,OAAOf,KAAK,OAAOiB,SAAU2L,IACpE,sBAAMtL,MAAO,CAACkK,SAAS,QAAvB,qCAIN,sBAAK5K,UAAU,aAAf,UACE,sBAAMU,MAAO,CAACyM,QAAQ,MAAOxM,OAAO,MAAQiK,SAAS,OAAQoC,MAAM,WAAnE,0BACA,uBAAOtM,MAAO,CAAC0M,aAAa,OAAQC,OAAO,OAAOC,QAAQ,QAASjN,SAAU,SAACrB,GAAD,OAAKyM,EAAazM,EAAEsB,OAAOC,aAE1G,yBAAQG,MAAO,CAACiM,QAAQ,OAAOE,WAAW,SAASL,MAAM,QAAQe,eAAe,UAAWvN,UAAU,iBAAkBkK,QAAS,kBAAI6B,GAAoB,IAAxJ,UAA+J,cAAC,IAAD,CAAerL,MAAO,CAACC,OAAO,SAA7L,qBAGF,gCACE,sBAAKD,MAAO,CAAC2L,KAAK,KAAKrM,UAAU,kBAAjC,UACE,oBAAIA,UAAU,oBAAoBU,MAAO,CAAC4L,WAAW,OAAOC,aAAa,OAAzE,6BACA,cAACpB,EAAA,EAAD,CAAYzK,MAAO,CAAC4L,WAAW,QAAQtM,UAAU,gBAAiBkK,QAAS,kBAAIa,KAA/E,SACE,cAAC,IAAD,CAAWH,SAAS,eAGxB,qBAAKlK,MAAO,CAAC8M,UAAU,UAAU7C,OAAO,SAAxC,SACCxJ,EAASiE,KAAI,SAAA/C,GAEZ,OACE,sBAAKrC,UAAU,eAAf,UACE,uBAAOG,KAAK,WAAWI,MAAO+K,EAAmBtI,SAASX,EAAQnC,IAClEA,GAAImC,EAAQnC,GAAIG,SAAU,kBA/EZoN,EA+EuCpL,EAAQnC,QA7EtEoL,EAAmBtI,SAASyK,GAE3BlC,GAAsB,SAAAmC,GAElB,OAAQA,EAAuBtL,QAAO,SAAAlC,GAAE,OAAGA,IAAKuN,QAMrDlC,GAAsB,SAAAmC,GAEnB,MAAM,GAAN,mBAAWA,GAAX,CAAkCD,QAd5C,IAA8BA,KAgFd,wBAAO/M,MAAO,CAACiM,QAAQ,OAAOC,cAAc,MAAMC,WAAW,SAASL,MAAM,QAAQmB,IAAKtL,EAAQnC,GAAjG,UACE,cAACkK,EAAA,EAAD,CAAS1J,MAAO,CAACC,OAAO,OAAQ0J,IAAKuD,GAAyBvL,EAAQX,UAAakJ,SAAS,UAC5F,qBAAI5K,UAAU,cAAcU,MAAO,CAAC4L,WAAW,OAAQuB,WAAW,OAAlE,UAA2ExL,EAAQjD,KAAnF,kBAMR,qBAAKsB,MAAO,CAACiM,QAAQ,OAASY,eAAe,UAA7C,SACE,wBAAQvN,UAAU,iBAAkBG,KAAK,SAAS+J,QAAS,kBA9FnEL,EAAmByB,EAAmBE,EAAUE,GAAW,QAC3DX,KA6FQ,gC,mGCxGV+C,GAAYC,aAAW,CACzBC,KAAM,CACJ,UAAW,CACTvB,gBAAiB,kBA4KVwB,OAvKf,YACC,IADwBC,EACzB,EADyBA,oBAEvB,EAAuCnN,IAAhCM,EAAP,EAAOA,KAAKF,EAAZ,EAAYA,SAASG,EAArB,EAAqBA,QAAQC,EAA7B,EAA6BA,OAC7B,EAAqChD,mBAAS8C,EAAKK,WAAnD,mBAAOkK,EAAP,KAAoBC,EAApB,KACA,EAAuCtN,oBAAS,GAAhD,mBAAO4P,EAAP,KAAoBC,EAApB,KACA,EAA2C7P,oBAAS,GAApD,mBAAO8P,EAAP,KAAsBC,EAAtB,KACA,EAA+B/P,oBAAS,GAAxC,mBAAOgQ,EAAP,KAAiBC,EAAjB,KACA,EAAuBjQ,mBAAS8C,EAAKjC,MAArC,mBAAOqP,EAAP,KAAYC,EAAZ,KACA,EAA2BnQ,mBAAS8C,EAAKa,QAAzC,mBAAON,EAAP,KAAc+M,EAAd,KACA,EAA2CpQ,oBAAS,GAApD,mBAAOqQ,EAAP,KAAuBC,EAAvB,KACMC,EAAUhB,KATlB,4CA0BE,WAAgC9O,GAAhC,qBAAAC,EAAA,6DAGM8P,EAAY,IAEVvP,EAAO,IAAIiI,UACZC,OAAO,OAAO1I,EAAEsB,OAAO2L,MAAM,IAClCzM,EAAKkI,OAAO,gBAAgB,kBAC5BlI,EAAKkI,OAAO,aAAa,aAR3B,kBAYyBrI,IAAMC,KAAK,yDAAyDE,GAZ7F,OAYQD,EAZR,OAaIwP,EAAaxP,EAASC,KAAKmI,IAb/B,kDAecjF,QAAQC,IAAR,MAfd,eAiBMxD,EAAM,CAACC,KAAMiC,EAAKjC,KAAKZ,MAAO6C,EAAK7C,MAAMkD,UAAUqN,EAAY5N,SAASA,EAASQ,SAASN,EAAK2N,SAASpN,OAAOP,EAAKO,QAjB1H,oBAqByBvC,IAAMoD,IAAI,gDAAkDhD,eAAc,GAAON,EAAIoC,GArB9G,QAuBuB,YAvBvB,OAuBgB/B,MACV8B,EAAQnC,GAxBd,mDA0BcuD,QAAQC,IAAR,MA1Bd,QA4BIkJ,EAAgBK,OAAOC,IAAIC,gBAAgBpN,EAAEsB,OAAO2L,MAAM,KA5B9D,mEA1BF,kEA0DE,4BAAAhN,EAAA,6DAEME,EAAM,CAACC,KAAMqP,EAAKjQ,MAAO6C,EAAK7C,MAAMkD,UAAUL,EAAKK,UAAUP,SAASA,EAASQ,SAASN,EAAKM,SAASC,OAAOP,EAAKO,QAFxH,kBAKyBvC,IAAMoD,IAAI,gDAAkDhD,eAAc,GAAON,EAAIoC,GAL9G,OAMuB,YANvB,OAMgB/B,MACV8B,EAAQnC,GAPd,gDAScuD,QAAQC,IAAR,MATd,QAWI6L,GAAa,GACbJ,GAAgB,GAZpB,0DA1DF,kEA0EE,4BAAAnP,EAAA,6DAEME,EAAM,CAACC,KAAKiC,EAAKjC,KAAKZ,MAAO6C,EAAK7C,MAAMkD,UAAUL,EAAKK,UAAUP,SAASA,EAASQ,SAASN,EAAKM,SAASC,OAAOA,GAFvH,kBAKyBvC,IAAMoD,IAAI,gDAAkDhD,eAAc,GAAON,EAAIoC,GAL9G,OAOuB,YAPvB,OAOgB/B,MACV8B,EAAQnC,GARd,gDAUcuD,QAAQC,IAAR,MAVd,QAYEkM,GAAmB,GACnBP,GAAkB,GAbpB,0DA1EF,sBA2FI,OACI,sBAAKtO,UAAU,eAAf,UACI,wBAAQA,UAAU,gBAAlB,SACE,sBAAKA,UAAU,kCAAf,UACE,cAACmL,EAAA,EAAD,CAAYjB,QAAS,kBAAIgE,KAAzB,SACG,cAAC,IAAD,CAAexN,MAAO,CAACiK,OAAO,OAAO6B,MAAM,YAE9C,oBAAIxM,UAAU,WAAd,4BAKJ,sBAAKA,UAAU,uBAAf,UAEE,sBAAKA,UAAU,cAAf,UACG,cAACoK,EAAA,EAAD,CAASC,IAAKuB,EAAclL,MAAO,CAACiK,OAAQ,QAAS6B,MAAO,QAASC,gBAAgB,OAAQ9L,OAAO,OAAO+L,UAAU,QAArH,eACA,sBAAK1M,UAAU,wBAAwBU,MAAO,CAACiM,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAASC,SAAS,WAAWC,OAAO,IAAIC,MAAM,QAAQiC,OAAO,WAA7J,UACI,cAAC,IAAD,CAAgBvO,MAAO,CAACiK,OAAQ,OAAQ6B,MAAO,OAAQQ,MAAM,WAC7D,uBAAOC,OAAO,UAAU/M,GAAG,OAAOC,KAAK,OAAOf,KAAK,OAAOiB,SA7G/E,8CA8GqB,sBAAMK,MAAO,CAACkK,SAAS,QAAvB,mCAIP,uBAAM5K,UAAU,kBAAhB,UACE,oBAAIA,UAAU,aAAd,wBACCmO,EACE,gCACII,EAAY,cAAC,KAAD,CAAQW,aAAc,SAAClQ,EAAEmQ,GAAH,OAzGlC,SAACC,EAAOD,GAE3BT,GAAQ,SAAAW,GAAQ,OAAIA,EAAWF,EAAYG,SAuG2BJ,CAAalQ,EAAEmQ,IAAcI,YAAa,CAAE/C,MAAO,OAAQ7B,OAAO,WAAc,GACpI,sBAAK3K,UAAU,kBAAkBU,MAAO,CAACC,OAAO,OAAOwM,QAAQ,OAA/D,UACE,cAAChC,EAAA,EAAD,CAAYnL,UAAW8O,EAAQd,KAAMtN,MAAO,CAACyM,QAAQ,OAAQjD,QAAS,kBAxH9F,0CAwHkGsF,IAA1E,SACE,cAAC,KAAD,CAAW5E,SAAS,YAEtB,cAACO,EAAA,EAAD,CAAYnL,UAAW8O,EAAQd,KAAMtN,MAAO,CAACyM,QAAQ,OAAQjD,QAAS,kBAAIsE,GAAcD,IAAxF,SACE,cAAC,KAAD,CAAoB3D,SAAS,YAE/B,uBAAO5K,UAAU,aAAayP,aAAchB,EAAMpO,SAAU,SAACrB,GAAD,OAAK0P,EAAQ1P,EAAEsB,OAAOC,gBAItF,sBAAKP,UAAU,eAAf,UACE,cAACmL,EAAA,EAAD,CAAYjB,QAAS,kBAAIkE,GAAgB,IAAzC,SACE,cAAC,KAAD,CAAU1N,MAAO,CAACkK,SAAS,aAE7B,6BAAKvJ,EAAKjC,aAIlB,uBAAMY,UAAU,kBAAhB,UAEA,oBAAIA,UAAU,aAAd,qBACCqO,EACC,gCACGE,EAAY,cAAC,KAAD,CAAQW,aAAc,SAAClQ,EAAEmQ,GAAH,OA3HxB,SAACC,EAAOD,GAEjCR,GAAU,SAAAe,GAAU,OAAIA,EAAaP,EAAYG,SAyHiBK,CAAmB3Q,EAAEmQ,IAAcI,YAAa,CAAE/C,MAAO,OAAQ7B,OAAO,WAAc,GAC1I,sBAAK3K,UAAU,kBAAkBU,MAAO,CAACC,OAAO,OAAOwM,QAAQ,OAA/D,UACE,cAAChC,EAAA,EAAD,CAAYnL,UAAW8O,EAAQd,KAAMtN,MAAO,CAACyM,QAAQ,OAAQjD,QAAS,kBAjJ1F,0CAiJ8F0F,IAA1E,SACE,cAAC,KAAD,CAAWhF,SAAS,YAEtB,cAACO,EAAA,EAAD,CAAYnL,UAAW8O,EAAQd,KAAMtN,MAAO,CAACyM,QAAQ,OAAQjD,QAAS,kBAAI2E,GAAoBD,IAA9F,SACE,cAAC,KAAD,CAAoBhE,SAAS,YAE/B,uBAAO5K,UAAU,aAAayP,aAAc7N,EAAQvB,SAAU,SAACrB,GAAD,OAAK2P,EAAU3P,EAAEsB,OAAOC,gBAG1F,sBAAKP,UAAU,eAAf,UACE,cAACmL,EAAA,EAAD,CAAYjB,QAAS,kBAAIoE,GAAkB,IAA3C,SACE,cAAC,KAAD,CAAU5N,MAAO,CAACkK,SAAS,aAE7B,oBAAIlK,MAAO,CAACkK,SAAS,QAArB,SAA+BvJ,EAAKO,sBC/JvC,SAASiO,KAEtB,MAAiCtR,mBAAS,iBAA1C,mBAAOuR,EAAP,KAAkBC,EAAlB,KACA,EAAkCxR,oBAAS,GAA3C,mBAAOyR,EAAP,KAAkBC,EAAlB,KACA,EAAgClP,IAAzBM,EAAP,EAAOA,KAAKwB,EAAZ,EAAYA,kBACZ,EAAkCtE,oBAAS,GAA3C,mBAAO2R,EAAP,KAAkBC,EAAlB,KACOrG,EAA0B/F,IAA1B+F,uBACP,EAAsCvL,mBAAS,IAA/C,mBAAO6R,EAAP,KAAoBC,EAApB,KACA,EAAyD9R,oBAAS,GAAlE,mBAAO+R,EAAP,KAA8BC,EAA9B,KAYA,SAASxF,IAEPkF,GAAa,GAGf,SAASO,EAAiBC,GAExBR,GAAa,GACbI,EAAgBI,GAQlB,OAEE,qBAAKzQ,UAAU,UAAf,SAEGsQ,EAAwB,cAAC,GAAD,CAAgBpC,oBAT7C,WAEEqC,GAA0B,MAQtB,gCACE,sBAAKvQ,UAAU,cAAf,UACE,qBAAKA,UAAU,mBAAmBkK,QAAS,kBAAKqG,GAA0B,IAA1E,SACE,cAACnG,EAAA,EAAD,CAAQC,IAAKhJ,EAAKK,UAAWkJ,SAAS,YAExC,sBAAK5K,UAAU,oBAAf,UACE,cAACmL,EAAA,EAAD,CAAYjB,QAAS,kBAAI6F,EAAc,kBAAvC,SACE,cAAC,IAAD,CAAUnF,SAAS,YAErB,cAACO,EAAA,EAAD,CAAYP,SAAS,QAAQV,QAAS,kBAAI6F,EAAc,aAAxD,SACE,cAAC,IAAD,CAAanF,SAAS,YAExB,cAACO,EAAA,EAAD,UACE,cAAC,IAAD,YAKL+E,EACD,sBAAKlQ,UAAU,eAAf,UACE,qBAAKA,UAAU,cAAf,SACE,cAACmL,EAAA,EAAD,CAAYjB,QAAS,kBAAIiG,GAAc,IAAvC,SACE,cAAC,IAAD,CAAevF,SAAS,cAG5B,uBAAO5K,UAAU,cAAcG,KAAK,OAAOE,SAvDrD,SAAsBrB,GAEF,kBAAf8Q,EACDhG,EAAuB9K,EAAEsB,OAAOC,OAE7BsC,EAAkB7D,EAAEsB,OAAOC,aAqD1B,qBAAKP,UAAU,YAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,cAAC,IAAD,IACA,uBAAOI,YAAY,SAASD,KAAK,OAAO+J,QAAS,kBAAIiG,GAAc,WAIzD,aAAbL,EACC,gCACE,qBAAK9P,UAAU,iBAAf,SACE,cAAC0K,EAAA,EAAD,CAAQhK,MAAO,CAACkK,SAAS,QAASV,QAAS,kBAAIsG,EAAiB,gBAAexQ,UAAU,iBAAzF,+BAIF,qBAAKA,UAAU,iBAAf,SACE,cAACuK,EAAD,CAAUC,wBAAyB,kBAAKuF,EAAc,kBAAmBtF,kBAAmB,kBAAI+F,EAAiB,qBAIrH,qBAAKxQ,UAAU,iBAAf,SAAgC,cAACgK,EAAD,MAEhC,cAAC0G,EAAA,EAAD,CAAQ1Q,UAAU,QAAQ2Q,KAAMX,EAAWY,QAAS7F,EAApD,SACE,8BACoB,cAAjBqF,EACD,cAAC,EAAD,CAAgBrF,WAAYA,IAC5B,cAACD,EAAD,CAAeC,WAAYA,a,qDCG5B8F,OA9Gf,YACC,IADwB9F,EACzB,EADyBA,WAGrB,EAAoDxM,mBAAS,IAA7D,mBAAO+M,EAAP,KAA2BC,EAA3B,KACA,EAAyBxK,IAAlBI,EAAP,EAAOA,SAASE,EAAhB,EAAgBA,KAChB,EAAkD0C,IAA3CgG,EAAP,EAAOA,mBAAmB5F,EAA1B,EAA0BA,qBAC1B,EAAqD5F,mBAAS,IAA9D,mBAAOuS,EAAP,KAA4BC,EAA5B,KA8DA,OA1DAlP,qBAAU,WAEN,IAAI+D,EAAI,GACRzB,EAAqBsB,aAAa8C,SAAQ,SAACyI,GAExCpL,EAAI9F,KAAKkR,EAAY9Q,OAExB6Q,EAAwBnL,KAE1B,CAACzB,EAAqBsB,eAkDrB,qBAAKzF,UAAU,UAAf,SACI,qBAAKA,UAAU,uBAAf,SACI,sBAAKA,UAAU,6BAAf,UACI,sBAAKU,MAAO,CAAC2L,KAAK,KAAMrM,UAAU,kBAAlC,UACI,oBAAIA,UAAU,oBAAoBU,MAAO,CAAC4L,WAAW,OAAOC,aAAa,OAAzE,6BACA,cAACpB,EAAA,EAAD,CAAYzK,MAAO,CAAC4L,WAAW,QAAQtM,UAAU,gBAAiBkK,QAAS,kBAAIa,KAA/E,SACG,cAAC,IAAD,CAAWH,SAAS,eAG3B,qBAAKlK,MAAO,CAAC8M,UAAU,UAAU7C,OAAO,SAAxC,SACKxJ,EAASiE,KAAI,SAAA/C,GAGZ,OAAKyO,EAAqB9N,SAASX,EAAQnC,IAa/B,GAVN,sBAAKF,UAAU,eAAf,UACI,uBAAOG,KAAK,WAAWI,MAAO+K,EAAmBtI,SAASX,EAAQnC,IACjEA,GAAImC,EAAQnC,GAAIG,SAAU,kBAxC5BoN,EAwCuDpL,EAAQnC,QArCtFoL,EAAmBtI,SAASyK,GAE3BlC,GAAsB,SAAAmC,GAElB,OAAQA,EAAuBtL,QAAO,SAAAlC,GAAE,OAAGA,IAAKuN,QAMrDlC,GAAsB,SAAAmC,GAEnB,MAAM,GAAN,mBAAWA,GAAX,CAAkCD,QAf5C,IAA8BA,KAyCC,wBAAO/M,MAAO,CAACiM,QAAQ,OAAOC,cAAc,MAAMC,WAAW,SAASL,MAAM,QAAQmB,IAAKtL,EAAQnC,GAAjG,UACG,cAACkK,EAAA,EAAD,CAAS1J,MAAO,CAACC,OAAO,OAAQ0J,IAAKuD,GAAyBvL,EAAQX,UAAakJ,SAAS,UAC5F,qBAAI5K,UAAU,cAAcU,MAAO,CAAC4L,WAAW,OAAQuB,WAAW,OAAlE,UAA2ExL,EAAQjD,KAAnF,kBAUnB,qBAAKsB,MAAO,CAACiM,QAAQ,OAASY,eAAe,UAA7C,SACK,wBAAQvN,UAAU,iBAAkBG,KAAK,SAAS+J,QAAS,kBAhF/E,WAEI,IAAI+G,EAAiB,GACrBA,EAAgB9M,EAAqBsB,aACrC,IAAIK,EAAS3B,EAAqB2D,SAC9B3F,EAAQ,GAGZhB,EAASoH,SAAQ,SAAAlG,GAEViJ,EAAmBtI,SAASX,EAAQnC,MAEnC+Q,EAAgBnR,KAAKuC,GACrBF,EAAQ,CAAC/C,KAAK,UAAU+C,QAASd,EAAKjC,KAAM,UAAYiD,EAAQjD,KAAO,gBAAgBiI,SAAS,GAAGC,eAAc,EAAMC,gBAAe,EAAMC,UAAU,MACtJ1B,EAAShG,KAAKqC,OAKtB,IAAIgG,EAAoB,2BAAIhE,GAAL,IAA0BsB,aAAawL,EAAgBnJ,SAAShC,EAASiC,YAAY5F,IAC5G4H,EAAmB5B,GACnB4C,IA2D+EmG,IAA/D,2B,UC1FlBpD,GAAYC,aAAW,CACzBC,KAAM,CACJ,UAAW,CACTvB,gBAAiB,kBA0SV0E,OApSf,WAEI,MAA2GpN,IAApGI,EAAP,EAAOA,qBAAqB0F,EAA5B,EAA4BA,mBAAmB5F,EAA/C,EAA+CA,cAAcG,EAA7D,EAA6DA,wBAAwB2F,EAArF,EAAqFA,mBACrF,EAA+CxL,oBAAS,GAAxD,mBAAO6S,EAAP,KAAyBC,EAAzB,KACA,EAA6D9S,oBAAS,GAAtE,mBAAO+S,EAAP,KAAgCC,EAAhC,KACA,EAA+BhT,oBAAS,GAAxC,mBAAOgQ,EAAP,KAAiBC,EAAjB,KACA,EAAuBjQ,mBAAS4F,EAAqBqB,MAArD,mBAAOiJ,EAAP,KAAYC,EAAZ,KACA,EAAqCnQ,mBAAS4F,EAAqB6D,aAAnE,mBAAOwJ,EAAP,KAAmBC,EAAnB,KACOpQ,EAAQN,IAARM,KACDyN,EAAUhB,KAChB,EAAkCvP,oBAAS,GAA3C,mBAAOyR,EAAP,KAAkBC,EAAlB,KACA,EAAoC1R,oBAAS,GAA7C,mBAAOmT,EAAP,KAAmBC,EAAnB,KACA,EAA8CpT,oBAAS,GAAvD,mBAAOqT,EAAP,KAAwBC,EAAxB,KACA,GAAuCtT,qBAAvC,qBAAOuT,GAAP,MAAoBC,GAApB,MACA,GAAqCxT,mBAAS4F,EAAqBuB,mBAAnE,qBAAOkG,GAAP,MAAoBC,GAApB,MA8FA,SAASd,KAENkF,GAAa,GA9GQ,8CAiHxB,WAAgCjR,GAAhC,yBAAAC,EAAA,6DAEG4M,GAAgBK,OAAOC,IAAIC,gBAAgBpN,EAAEsB,OAAO2L,MAAM,KACrD8C,EAAY,IAEVvP,EAAO,IAAIiI,UACZC,OAAO,OAAO1I,EAAEsB,OAAO2L,MAAM,IAClCzM,EAAKkI,OAAO,gBAAgB,kBAC5BlI,EAAKkI,OAAO,aAAa,aAR7B,kBAY2BrI,IAAMC,KAAK,yDAAyDE,GAZ/F,OAYUD,EAZV,OAaMwP,EAAaxP,EAASC,KAAKmI,IAbjC,kDAegBjF,QAAQC,IAAR,MAfhB,QAkBQmD,EAAS3B,EAAqB2D,SAC9B3F,EAAQ,CAAC/C,KAAK,UAAU+C,QAASd,EAAKjC,KAAM,yBAAyBiI,SAAS,GAAGC,eAAc,EAAMC,gBAAe,EAAMC,UAAU,MACxI1B,EAAShG,KAAKqC,GACVgG,EArBR,2BAqBgChE,GArBhC,IAqBqDuB,kBAAkBqJ,EAAYjH,SAAShC,EAASiC,YAAY5F,IAC7G4H,EAAmB5B,GAtBvB,2DAjHwB,sBA8IxB,OA5HAtG,qBAAU,WAENwP,GAAqB,GACrBE,GAA4B,GAC5B/C,GAAa,KAEf,CAACrK,IAuHC,gCACG,sBAAKnE,UAAU,YAAf,UACG,sBAAKA,UAAU,qBAAf,UACG,cAACoK,EAAA,EAAD,CAASC,IAAKuB,GAAclL,MAAO,CAACiK,OAAQ,QAAS6B,MAAO,QAASC,gBAAgB,OAAQ9L,OAAO,OAAO+L,UAAU,QAArH,eACA,sBAAK1M,UAAU,wBAAwBU,MAAO,CAACiM,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAASC,SAAS,WAAWC,OAAO,IAAIC,MAAM,QAAQiC,OAAO,WAA7J,UACG,cAAC,IAAD,CAAgBvO,MAAO,CAACiK,OAAQ,OAAQ6B,MAAO,OAAQQ,MAAM,WAC7D,uBAAOC,OAAO,UAAU/M,GAAG,OAAOC,KAAK,OAAOf,KAAK,OAAOiB,SArJlD,+CAsJR,sBAAMK,MAAO,CAACkK,SAAS,QAAvB,mCAGN,uBAAM5K,UAAU,oBAAhB,UACGoR,EACE,sBAAK1Q,MAAO,CAACiM,QAAQ,OAAOC,cAAc,UAA1C,UACG2B,EAAY,cAAC,KAAD,CAAQW,aAAc,SAAClQ,EAAEmQ,GAAH,OAjI/B,SAACC,EAAOD,GAEzBT,EAAQD,EAAOU,EAAYG,OA+HsCJ,CAAalQ,EAAEmQ,IAAcI,YAAa,CAAE/C,MAAO,OAAQ7B,OAAO,WAAc,GACpI,sBAAK3K,UAAU,kBAAf,UACG,cAACmL,EAAA,EAAD,CAAYnL,UAAW8O,EAAQd,KAAMtN,MAAO,CAACyM,QAAQ,OAAQjD,QAAS,kBAzH1F,WAEI,IAAI/H,EAAQ,CAAC/C,KAAK,UAAU+C,QAASd,EAAKjC,KAAM,0BAA4BqP,EAAKpH,SAAS,GAAGC,eAAc,EAAMC,gBAAe,EAAMC,UAAU,MAC5I1B,EAAS3B,EAAqB2D,SAClChC,EAAShG,KAAKqC,GACd,IAAIgG,EAAoB,2BAAIhE,GAAL,IAA0BqB,KAAKiJ,EAAK3G,SAAShC,EAASkM,WAAW7P,IACxF4H,EAAmB5B,GACnBkJ,GAAqB,GAkHqEY,IAA1E,SACG,cAAC,KAAD,CAAWrH,SAAS,YAEvB,cAACO,EAAA,EAAD,CAAYnL,UAAW8O,EAAQd,KAAMtN,MAAO,CAACyM,QAAQ,OAAQjD,QAAS,kBAAIsE,GAAcD,IAAxF,SACI,cAAC,KAAD,CAAoB3D,SAAS,YAElC,uBAAO5K,UAAU,aAAayP,aAAchB,EAAMpO,SAAU,SAACrB,GAAD,OAAK0P,EAAQ1P,EAAEsB,OAAOC,gBAGvF,uBAAMP,UAAU,cAAhB,UACG,6BAAKmE,EAAqBqB,OAC1B,cAAC2F,EAAA,EAAD,CAAYjB,QAAS,kBAAImH,GAAqB,IAA9C,SACI,cAAC,KAAD,CAAU3Q,MAAO,CAACkK,SAAS,QAAQ0B,WAAW,eAItD,uBAAMtM,UAAU,WAAWU,MAAO,CAACyM,QAAQ,OAAO+E,YAAY,OAA9D,2BAAqF/N,EAAqBgC,YAA1G,aAIL,sBAAKnG,UAAU,0BAAf,UACG,oBAAIA,UAAU,cAAcU,MAAO,CAACyM,QAAQ,OAA5C,2BACAmE,EACC,sBAAK5Q,MAAO,CAACiM,QAAQ,OAAOC,cAAc,UAA1C,UACG2B,EAAY,cAAC,KAAD,CAAQW,aAAc,SAAClQ,EAAEmQ,GAAH,OAtJjB,SAACC,EAAOD,GAEpCsC,EAAeD,EAAcrC,EAAYG,OAoJqB6C,CAAwBnT,EAAEmQ,IAAcI,YAAa,CAAE/C,MAAO,OAAQ7B,OAAO,WAAc,GAC/I,sBAAK3K,UAAU,kBAAkBU,MAAO,CAACyM,QAAQ,OAAjD,UACE,cAAChC,EAAA,EAAD,CAAYnL,UAAW8O,EAAQd,KAAMtN,MAAO,CAACyM,QAAQ,OAAQjD,QAAS,kBAlHtF,WAEK,IAAI/H,EAAQ,CAAC/C,KAAK,UAAU+C,QAASd,EAAKjC,KAAM,6BAA6BiI,SAAS,GAAGC,eAAc,EAAMC,gBAAe,EAAMC,UAAU,MACxI1B,EAAS3B,EAAqB2D,SAClChC,EAAShG,KAAKqC,GACd,IAAIgG,EAAoB,2BAAIhE,GAAL,IAA0B6D,YAAYwJ,EAAY1J,SAAShC,EAASiC,YAAY5F,IACvG4H,EAAmB5B,GACnBoJ,GAA4B,GA2GyDa,IAA1E,SACI,cAAC,KAAD,CAAWxH,SAAS,YAExB,cAACO,EAAA,EAAD,CAAYnL,UAAW8O,EAAQd,KAAMtN,MAAO,CAACyM,QAAQ,OAAQjD,QAAS,kBAAIsE,GAAcD,IAAxF,SAAoG,cAAC,KAAD,CAAoB3D,SAAS,YACjI,uBAAO5K,UAAU,aAAayP,aAAc+B,EAAanR,SAAU,SAACrB,GAAD,OAAKyS,EAAezS,EAAEsB,OAAOC,gBAGpG,sBAAKP,UAAU,yBAAf,UACE,sBAAMU,MAAO,CAACkK,SAAS,OAAOyH,YAAY,OAA1C,SACKlO,EAAqB6D,cAE1B,cAACmD,EAAA,EAAD,CAAYjB,QAAS,kBAAIqH,GAA4B,IAArD,SACI,cAAC,KAAD,CAAU7Q,MAAO,CAACkK,SAAS,mBAMrC,sBAAK5K,UAAU,0BAAf,UACG,qBAAIA,UAAU,cAAcU,MAAO,CAAEyM,QAAQ,OAAQmF,aAAa,qBAAlE,UACKnO,EAAqBsB,aAAanD,OAAQ,EAD/C,mBAGA,cAACoO,EAAA,EAAD,CAAO1Q,UAAU,QAAQ2Q,KAAMX,EAAWY,QAAS7F,GAAnD,SACG,cAAC,GAAD,CAAgBA,WAAYA,OAG9B5G,EAAqB0D,YAAYpI,eAAc,GAC5C,sBAAKO,UAAU,cAAcU,MAAO,CAAC6R,OAAO,UAAU3H,SAAS,QAASV,QAAS,kBAAI+F,GAAa,IAAlG,UACG,cAAC7F,EAAA,EAAD,UACG,cAACe,EAAA,EAAD,CAAYnL,UAAW8O,EAAQd,KAAMtN,MAAO,CAACyM,QAAQ,OAArD,SACG,cAAC,KAAD,CAAWvC,SAAS,cAG1B,oBAAI5K,UAAU,yBAAd,2BACI,GAEVmE,EAAqBsB,aAAaL,KAAI,SAAC4L,EAAY/G,GAEjD,OACC,sBAAkBjK,UAAU,cAA5B,UACE,sBAAKkK,QAAS,kBAjL/B,SAA0B8G,GAEtB,IAAIwB,GAAW,EAYf,GAVAvO,EAAcsE,SAAQ,SAAAlD,IAEU,IAAzBA,EAAaE,SAAqBF,EAAaI,aAAa,GAAGvF,KAAO8Q,EAAY9Q,KAEnFsS,GAAW,EACXpO,EAAwBiB,QAK1BmN,EACJ,CACI,IAAIC,EAAc,GAClBA,EAAc3S,KAAKkR,EAAY9Q,IAC/B2J,EAAmB4I,EAAezB,EAAY5R,KAAM4R,EAAYtP,WAAU,IA+J/CgR,CAAiB1B,IAActQ,MAAO,CAACiM,QAAQ,OAAOgG,SAAS,IAAI/F,cAAc,MAAMC,WAAW,SAAS0F,OAAO,WAApI,UACI,cAACnI,EAAA,EAAD,CAAQC,IAAK2G,EAAYtP,YACzB,sBAAMhB,MAAO,CAACiM,QAAQ,OAAOgG,SAAS,IAAI/F,cAAc,MAAMC,WAAW,UAAzE,UACE,oBAAI7M,UAAU,yBAAd,SAAwCgR,EAAY5R,OACnD4R,EAAY9Q,KAAKiE,EAAqB0D,UACrC,qBAAK7H,UAAU,cAAf,SACG,oBAAIU,MAAO,CAACkK,SAAS,QAArB,6BAEJ,SAGNnL,eAAc,KAAW0E,EAAqB0D,UAC5C,cAACsD,EAAA,EAAD,CAAajB,QAAS,kBAlJ1C,SAA0B8G,GAEvBe,GAAgBf,GAChBa,GAAoB,GA+IuBe,CAAiB5B,IAActQ,MAAO,CAACyM,QAAQ,OAAzE,SACE,cAAC,IAAD,CAAWvC,SAAS,aAExB,KAhBQX,MAoBd,qBAAMjK,UAAU,cAAhB,SACG,sBAAKU,MAAO,CAACiM,QAAQ,OAAOgG,SAAS,IAAI/F,cAAc,MAAMC,WAAW,UAAxE,UACE,cAACzC,EAAA,EAAD,CAAQC,IAAKhJ,EAAKK,YAClB,sBAAKhB,MAAO,CAACiM,QAAQ,OAAOgG,SAAS,IAAI/F,cAAc,MAAMC,WAAW,UAAxE,UACI,oBAAI7M,UAAU,yBAAd,SAAwCqB,EAAKjC,OAC5CK,eAAc,KAAS0E,EAAqB0D,UAC3C,qBAAK7H,UAAU,cAAf,SACI,oBAAIU,MAAO,CAACkK,SAAS,QAArB,6BAEJ,cAMf,qBAAK5K,UAAU,gCAAgCkK,QAAS,kBAAIyH,GAAc,IAA1E,SACI,sBAAK3R,UAAU,aAAf,UACI,cAACmL,EAAA,EAAD,CAAYnL,UAAW8O,EAAQd,KAAMtN,MAAO,CAACyM,QAAQ,OAArD,SACE,cAAC,KAAD,CAAezM,MAAO,CAACsM,MAAM,WAAWpC,SAAS,YAElD,oBAAI5K,UAAU,yBAAyBU,MAAO,CAACsM,MAAM,UAAUpC,SAAS,QAAxE,8BAIT,cAACiI,GAAA,EAAD,CAAQ7S,UAAU,oBAAoB4Q,QAAS,kBAAKe,GAAc,IAAShB,KAAMe,EAAjF,SACG,sBAAKhR,MAAO,CAACyM,QAAQ,QAArB,UACE,oBAAInN,UAAU,eAAd,yDACA,sBAAKA,UAAU,yBAAf,UACE,wBAAQA,UAAU,gBAAgBkK,QAAS,kBA/L1D,WAEG,IAAI/H,EAAQ,CAAC/C,KAAK,UAAU+C,QAASd,EAAKjC,KAAM,kBAAkBiI,SAAS,GAAGC,eAAc,EAAMC,gBAAe,EAAMC,UAAU,MAC7H1B,EAAS3B,EAAqB2D,SAClChC,EAAShG,KAAKqC,GACd,IAAIgG,EAAoB,2BAAIhE,GAAL,IAA0B2D,SAAShC,EAASiC,YAAY5F,IAC/E4H,EAAmB5B,GACnBwJ,GAAc,GAwL6CmB,IAA/C,iBACA,wBAAQ9S,UAAU,gBAAgBkK,QAAS,kBAAIyH,GAAc,IAA7D,wBAMP,cAACkB,GAAA,EAAD,CAAQ7S,UAAU,oBAAoB4Q,QAAS,kBAAKiB,GAAoB,IAASlB,KAAMiB,EAAvF,SACG,sBAAKlR,MAAO,CAACyM,QAAQ,QAArB,UACE,oBAAInN,UAAU,eAAd,yDACA,sBAAKA,UAAU,yBAAf,UACE,wBAAQA,UAAU,gBAAgBkK,QAAS,kBA1L1D,WAEG,IAAIpE,EAAS3B,EAAqB2D,SAC9B3F,EAAQ,CAAC/C,KAAK,UAAU+C,QAASd,EAAKjC,KAAM,YAAc0S,GAAa1S,KAAO,mBAAmBiI,SAAS,GAAGC,eAAc,EAAMC,gBAAe,EAAMC,UAAU,MACpK1B,EAAShG,KAAKqC,GACd,IAAI+D,EAAc/B,EAAqBsB,aAAarD,QAAO,SAAA4O,GAAW,OAAGA,EAAY9Q,KAAO4R,GAAa5R,MACrGiI,EAAoB,2BAAIhE,GAAL,IAA0BsB,aAAaS,EAAa4B,SAAShC,EAASiC,YAAY5F,IACzG4H,EAAmB5B,GACnB4J,KACAF,GAAoB,GAiLuCkB,IAA/C,iBACA,wBAAQ/S,UAAU,gBAAgBkK,QAAS,kBAAI2H,GAAoB,IAAnE,4BC9QJmB,OAlCf,YAAuD,IAA7BC,EAA4B,EAA5BA,0BAEf9O,EAAwBJ,IAAxBI,qBACP,EAA+C5F,oBAAS,GAAxD,mBAAO2U,EAAP,KAAyBC,EAAzB,KAGA,OAEI,sBAAKnT,UAAU,YAAf,UACG,qBAAKkK,QAAS,kBAAIiJ,GAAqB,IAAvC,SACI,cAAC/I,EAAA,EAAD,CAASC,IAAKlG,EAAqBuB,kBAAmBhF,MAAO,CAACC,OAAO,OAAOgK,OAAO,QAAQ6B,MAAM,aAGrG,cAACqG,GAAA,EAAD,CAAQ7S,UAAU,sBAAsB4Q,QAAS,kBAAKuC,GAAqB,IAASxC,KAAMuC,EAA1F,SACG,qBAAK7I,IAAKlG,EAAqBuB,kBAAmB0N,IAAI,OAIzD,uBAAMpT,UAAU,oBAAoBU,MAAO,CAAC2S,cAAc,OAA1D,UACI3Q,QAAQC,IAAI,QACb,sBAAM3C,UAAU,cAAhB,SACG,6BAAKmE,EAAqBqB,SAG7B,sBAAMxF,UAAU,WAAWU,MAAO,CAACyM,QAAQ,OAAO+E,YAAY,OAA9D,SACKe,a,oDCaJK,OAzCf,YACC,IADiB7J,EAClB,EADkBA,OAAOtH,EACzB,EADyBA,QAEvB,EAAiC5D,oBAAS,GAA1C,mBAAOyR,EAAP,KAAiBC,EAAjB,KACA,EAA8C1R,mBAAS,MAAvD,mBAAOgV,EAAP,KAAwBC,EAAxB,KAQA,OAEE,qBAAKxT,UAAWyJ,EAAhB,SACE,sBAAKzJ,UAAU,UAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,SAAf,SACEmC,EAAQ/C,OAET+C,EAAQmF,cACT,qBAAKtH,UAAU,mBAAmBqK,IAAKlI,EAAQkH,SAAU+J,IAAI,GAAGlJ,QAAS,kBAf9DiC,EAe4EhK,EAAQkH,SAbrG4G,GAAa,QACbuD,EAAoBrH,GAHtB,IAAmBA,GAe+FK,MAAM,QAAQ7B,OAAO,UAC5H,MAEL,8BACE,sBAAK3K,UAAU,mBAAf,UACE,qBAAKA,UAAU,kBAAf,SAAkCmC,EAAQA,UAC1C,qBAAKnC,UAAU,sBAAf,SACE,qBAAKA,UAAU,eAAf,SACImC,EAAQkF,SAAUoM,UAAU,GAAG,aAMzC,cAACZ,GAAA,EAAD,CAAQjC,QAAS,kBAAKX,GAAa,IAASU,KAAMX,EAAlD,SACE,qBAAK3F,IAAKkJ,EAAkBH,IAAI,a,OCH3BM,OA/Bf,YACC,IADsBvR,EACvB,EADuBA,QAAQsH,EAC/B,EAD+BA,OAAO9D,EACtC,EADsCA,MAG9BgO,EAAelK,EAAOzG,SAAS,iBAAmB,WAAW,SAEnE,OAEE,qBAAKhD,UAAWyJ,EAAhB,SACE,qBAAKzJ,UAAU,qBAAf,SACE,sBAAKA,UAAW2T,EAAhB,UACgB,gBAAXlK,EACD,sBAAKzJ,UAAU,mBAAf,UACI,uBAAS4T,UAAQ,EAACC,aAAa,aAA/B,SACE,wBAAQxJ,IAAKlI,EAAQqF,UAAWrH,KAAK,gBAEvC,cAACiK,EAAA,EAAD,CAAQC,IAAK1E,EAAOjF,MAAO,CAAEiK,OAAQ,OAAQ6B,MAAO,OAAO7L,OAAO,YAGtE,sBAAKX,UAAU,mBAAf,UACI,cAACoK,EAAA,EAAD,CAAQC,IAAK1E,EAAOjF,MAAO,CAAEiK,OAAQ,OAAQ6B,MAAO,OAAO7L,OAAO,SAClE,uBAASiT,UAAQ,EAACC,aAAa,aAA/B,SACE,wBAAQxJ,IAAKlI,EAAQqF,UAAWrH,KAAK,mBAG3C,sBAAMH,UAAU,eAAhB,SAAiCmC,EAAQkF,SAAUoM,UAAU,GAAG,cC+N7DK,OAzOf,SAAkBxV,GAEhB,MAAuBC,mBAAS,IAAhC,mBAAOkQ,EAAP,KAAYC,EAAZ,KACOrL,EAAUH,IAAVG,OACAhC,EAAQN,IAARM,KACP,EAAgH0C,IAAzGmF,EAAP,EAAOA,YAAY/E,EAAnB,EAAmBA,qBAAqBW,EAAxC,EAAwCA,qBAAqBC,EAA7D,EAA6DA,wBAAwBX,EAArF,EAAqFA,wBAC/E2P,EAAWzQ,iBAAO,MACxB,EAAiC/E,oBAAS,GAA1C,mBAAOgQ,EAAP,KAAiBC,EAAjB,KACA,EAAkCjQ,oBAAS,GAA3C,mBAAOgL,EAAP,KAAkByK,EAAlB,KACA,EAAiEC,iCAAsB,CAACjP,OAAO,IAAxFkP,EAAP,EAAOA,eAAeC,EAAtB,EAAsBA,cAAcC,EAApC,EAAoCA,aAAaC,EAAjD,EAAiDA,aACjD,EAAiC9V,mBAAS,MAA1C,mBAAO+V,EAAP,KAAiBC,EAAjB,KAGMC,EAAS5L,uBAAY,SAAC6L,GAEvBA,GACDA,EAAKC,eAAe,CAACC,QAAO,MAE9B,IAlBqB,4CAuFvB,WAA2B3V,GAA3B,iBAAAC,EAAA,6DAGQO,EAAO,IAAIiI,UACZC,OAAO,OAAO1I,EAAEsB,OAAO2L,MAAM,IAClCzM,EAAKkI,OAAO,gBAAgB,kBAC5BlI,EAAKkI,OAAO,aAAa,aAN3B,kBAUyBrI,IAAMC,KAAK,yDAAyDE,GAV7F,OAUQD,EAVR,OAWIjB,EAAMsW,cAAcrV,EAASC,KAAKmI,KAXtC,kDAYgBjF,QAAQC,IAAR,MAZhB,2DAvFuB,+BAkHRkS,IAlHQ,2EAkHvB,4BAAA5V,EAAA,6DAEEkV,IAFF,SAGkBW,MAAMV,GAHxB,OAGMrS,EAHN,OAIEwS,EAAaxS,EAAIgT,QAJnB,4CAlHuB,sBA2HvB,SAASC,IAEPb,IACAE,IACAL,GAAc,GAuChB,OAlJAnS,qBAAU,WAER2M,GAAa,KAEb,CAACrK,IAKHtC,qBAAW,WACX,4CAEE,kCAAA5C,EAAA,yDAEkB,MAAbqV,EAFL,iCAIqBQ,MAAMV,GAActS,MAAK,SAAAC,GAAG,OAAGA,EAAIgT,UAJxD,cAIQ/P,EAJR,QAKUxF,EAAO,IAAIiI,UAEZC,OAAO,OAAQ1C,GACpBxF,EAAKkI,OAAO,gBAAiB,SAC7BlI,EAAKkI,OAAO,gBAAgB,kBAC5BlI,EAAKkI,OAAO,aAAa,aAV7B,mBAe2BrI,IAAMC,KAAK,yDAAyDE,GAf/F,QAeUD,EAfV,OAiBMiI,GADIA,EAAYjI,EAASC,KAAKmI,KACT2C,MAAM,GAAG,GAC9B9C,GAAY,MACZwM,GAAc,GACdK,IACAnL,EAAYuF,EAAK,KAAK,KAAKjH,GAC3BwM,GAAc,GAtBpB,kDAwBgBtR,QAAQC,IAAR,MAxBhB,2DAFF,uBAAC,WAAD,wBA8BEX,KAEA,CAACsS,IA0GD,sBAAKtU,UAAW,kBAAhB,UACI,qBAAKA,UAAU,YAAf,SAEGmE,EAAqB2D,SAAS1C,KAAI,SAACjD,EAAQ8H,GAE1C,IACIR,EADE1D,EAAc5B,EAAqB2D,SAASxF,OAAQ,IAAM2H,EAEhER,EAAuB,YAAftH,EAAQ/C,KAAkB,UAAY+C,EAAQjC,KAAKT,eAAc,GAAQ,cAAgB,aACjG,IAAIkG,EAAMxD,EAAQjC,KAAKT,eAAc,GAAQ4B,EAAKK,UAAWyC,EAAqBuB,kBAC9EuP,EAAwB,eAATxL,EAAuB,2BAA4B,8BAEtE,OACE,8BACc,YAAXA,EACD,qBAAKzJ,UAAU,iBAAgBoL,IAAKrF,EAAcyO,EAAS,KAA3D,SACE,qBAAKxU,UAAU,kBAAf,SACG,sBAAMA,UAAU,kBAAhB,SAAmCmC,EAAQA,cAIhD,qBAAiBnC,UAAWiV,EAAc7J,IAAKrF,EAAcyO,EAAS,KAAtE,SACGrS,EAAQoF,eACT,cAAC,GAAD,CAAcpF,QAASA,EAASsH,OAAQA,EAAQ9D,MAAOA,IAAW,cAAC,GAAD,CAAU8D,OAAQA,EAAQtH,QAASA,KAF7F8H,IARFA,QAkBhB,sBAAKjK,UAAU,4BAAf,UACIuO,EAAY,cAAC,KAAD,CAAQW,aAAc,SAAClQ,EAAEmQ,GAAH,OAxCvB,SAACC,EAAOD,GAE3BT,EAAQD,EAAOU,EAAYG,OAsCgCJ,CAAalQ,EAAEmQ,IAAcI,YAAa,CAAE/C,MAAO,UAAa,GACnH,sBAAKxM,UAAU,cAAf,UACGuO,EAAW,eAACpD,EAAA,EAAD,CAAajB,QAAS,kBAAIsE,GAAa,IAAvC,UAA+C,cAAC,IAAD,CAAW5D,SAAS,UAAnE,OAA2F,GACvG,cAACO,EAAA,EAAD,CAAajB,QAAS,kBAAIsE,GAAa,IAAvC,SACG,cAAC,KAAD,CAAoB5D,SAAS,YAEhC,uBAAOqC,OAAO,UAAUjN,UAAU,iBAAiBE,GAAG,mBAAmBC,KAAK,OAAQO,MAAO,CAAEwU,WAAY,UAAW7U,SA7M3G,8CA8MX,uBAAO8U,QAAQ,mBAAf,SACE,cAAChK,EAAA,EAAD,CAAYiK,UAAU,OAAtB,SACE,cAAC,KAAD,CAAYxK,SAAS,cAGzB,uBAAM3K,SAtIlB,SAAsBjB,GAEpBA,EAAEE,iBACFgK,EAAYuF,GAAK,EAAM,KAAK,MAC5BC,EAAQ,MAkIgC1O,UAAU,kBAAxC,UACG,uBAAOA,UAAU,gBAAgBoL,IAAK2I,EAAWxT,MAAOkO,EAAMpO,SAlJ7E,SAAgBrB,GAGd0P,EAAQ1P,EAAEsB,OAAOC,OACK,MAAlB8C,EAAOI,SACTJ,EAAOI,QAAQE,KAAK,SAAU,CAAC6E,KAAKnH,EAAKgU,aAAalR,KA6IqChE,KAAK,OAAOC,YAAY,mBACxG,wBAAQD,KAAK,SAAb,uBAEFoJ,EAhFX,gCACE,cAAC4B,EAAA,EAAD,UACE,cAAC,IAAD,CAAWP,SAAS,QAAQlK,MAAO,CAACsM,MAAM,OAAQ9C,QAAS8K,MAE7D,cAAC7J,EAAA,EAAD,UACE,cAAC,KAAD,CAAWP,SAAS,QAAOlK,MAAO,CAACsM,MAAM,SAAU9C,QAAS2K,SA4EtD,cAAC1J,EAAA,EAAD,CAAYjB,QA/GxB,WAGE8J,GAAc,GACdE,KA2GU,SACE,cAAC,KAAD,CAAStJ,SAAS,kBAI1B,cAACiI,GAAA,EAAD,CAAQ7S,UAAU,oBAAqB2Q,KAAM7L,EAA7C,SACE,sBAAKpE,MAAO,CAACyM,QAAQ,QAArB,UACE,oBAAInN,UAAU,eAAd,gDACE,qBAAKA,UAAU,yBAAf,SACE,wBAAQA,UAAU,gBAAgBkK,QAAS,kBAzEvDnF,GAAwB,QACxBX,KAwEY,2B,8BCtLDkR,OAjDf,SAAuBhX,GAGrB,IAAMyV,EAAWzQ,iBAAO,MACxB,EAAuB/E,mBAAS,IAAhC,mBAAOkQ,EAAP,KAAYC,EAAZ,KACOrL,EAAUH,IAAVG,OACAhC,EAAQN,IAARM,KACP,EAA2C0C,IAApCmF,EAAP,EAAOA,YAAY/E,EAAnB,EAAmBA,qBAEnB,SAASoR,EAAanM,IAGL,IAAZA,GACDF,EAAYuF,GAAK,EAAKnQ,EAAM+K,UAE9BqF,EAAQ,KACRpQ,EAAMkX,aAcN,OACE,sBAAKxV,UAAU,YAAf,UACE,qBAAKA,UAAU,oBACb,cAACmL,EAAA,EAAD,CAAYhL,KAAK,SAAS+J,QAAS,kBAAIqL,GAAa,IAApD,SACE,cAAC,IAAD,CAAW3K,SAAS,YAEtB,qBAAKP,IAAM/L,EAAM+K,SAAU+J,IAAI,GAAGzI,OAAO,QAAQ6B,MAAM,UACvD,qBAAKxM,UAAU,cAAf,SACE,uBAAMC,SAAU,kBAAIsV,GAAa,IAAOvV,UAAU,kBAAlD,UACE,cAACmL,EAAA,EAAD,CAAYhL,KAAK,SAASO,MAAO,CAAC2L,KAAK,OAAvC,SACE,cAAC,KAAD,CAAUzB,SAAS,YAErB,uBAAO5K,UAAU,gBAAgBoL,IAAK2I,EAAWxT,MAAOkO,EAAMpO,SAtB1E,SAAgBrB,GAGd0P,EAAQ1P,EAAEsB,OAAOC,OAEK,MAAlB8C,EAAOI,SACTJ,EAAOI,QAAQE,KAAK,SAAU,CAAC6E,KAAKnH,EAAKgU,aAAalR,KAgBkChE,KAAK,OAAOC,YAAY,4BC1CvG,SAASqV,KAGtB,MAAkH1R,IAA3GI,EAAP,EAAOA,qBAAqBM,EAA5B,EAA4BA,+BAA+BF,EAA3D,EAA2DA,WAAWC,EAAtE,EAAsEA,cAAcI,EAApF,EAAoFA,YAAYC,EAAhG,EAAgGA,eAChG,EAAgCtG,oBAAS,GAAzC,mBAAO6K,EAAP,KAAiBsM,EAAjB,KACA,EAA8BnX,oBAAS,GAAvC,mBAAO8K,EAAP,KAAgBsM,EAAhB,KAGM1C,EAA4B,WAGhC,IAAI2C,EAAc,GAgBlB,MAfsC,KAAnCnR,EAEiB,KAAfF,GAEDqR,EAAc,qBAAK5V,UAAU,WAAf,wBACd6V,YAAW,kBAAKrR,EAAc,MAAI,MAG/BoR,EAAc,sBAAK5V,UAAU,YAAf,UAA2B,qBAAKA,UAAU,WAA1C,cAIhB4V,EAAc,qBAAK5V,UAAU,WAAf,SAA2ByE,IAGvCmR,GA+CT,IAAME,EACJ,gCACE,sBAAK9V,UAAU,cAAckK,QAAS,kBAAIrF,GAAe,IAAzD,UACE,cAACuF,EAAA,EAAD,CAAQC,IAAKlG,EAAqBuB,oBAClC,sBAAK1F,UAAU,mBAAf,UACE,qBAAIU,MAAO,CAACkK,SAAS,QAArB,cAAgCzG,EAAqBqB,KAArD,OACCrB,EAAqBoB,QAjDV,WAGlB,IAAIqQ,EAAc,GAClB,GAAkB,KAAfrR,EAEDqR,EAAc,sBAAK5V,UAAU,WAAf,cAA4BuE,EAA5B,mBACdsR,YAAW,kBAAKrR,EAAc,MAAI,SAIpC,CAEE,IAAIuR,EAAe,GAEnB5R,EAAqBsB,aAAa8C,SAAQ,SAACyI,EAAY/G,GAElDA,IAAW9F,EAAqBsB,aAAanD,OAAO,EACrDyT,GAA8B/E,EAAY5R,KAE1C2W,EAAcA,EAAe/E,EAAY5R,KAAO,QAGpDwW,EAAc,sBAAK5V,UAAU,WAAf,UAA2B+V,EAA3B,OAIhB,OAAOH,EAsB+BI,GAAgB/C,UAGnD7J,EAAW,cAAC,GAAD,CAAeC,SAAUA,EAAUmM,WAhBnD,WAEEG,EAAY,MACZD,GAAa,MAasE,cAAC,GAAD,CAAUd,cAtB/F,SAA0BjP,GAExBgQ,EAAYhQ,GACZ+P,GAAa,SAuBf,OAEE9Q,EACE,sBAAK5E,UAAU,oBAAf,UACE,qBAAKA,UAAU,mBAAf,SACG8V,IAGH,sBAAK9V,UAAU,eAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,cAACmL,EAAA,EAAD,CAAYjB,QAAS,kBAAIrF,GAAe,IAAxC,SACE,cAAC,IAAD,CAAW+F,SAAS,YAEtB,oBAAIlK,MAAO,CAACwR,YAAY,OAAOtH,SAAS,QAAxC,SAAkDzG,EAAqBoB,QAAS,iBAAmB,wBAGrG,sBAAMvF,UAAU,oBAAhB,SACKmE,EAAqBoB,QAAS,cAAC,GAAD,IAAqB,cAAC,GAAD,CAAiB0N,0BAA2BA,YAKxG,qBAAKjT,UAAU,OAAf,SACG8V,ICnHMG,oBAAW,YAA0B,IAAN/V,EAAK,EAALA,GACnCiE,EAAuBJ,IAAvBI,qBAEP,OACI,qBAAKnE,UAAU,YAAf,SACI,sBAAKA,UAAU,iBAAf,UACE,cAAC6P,GAAD,SACwBqG,IAAvB/R,EAAmC,cAAC,GAAD,CAAMjE,GAAIA,IAAS,WCgHtDiW,OAnHf,SAAkB7X,GAGhB,MAAuBC,mBAAS,IAAhC,mBAAMC,EAAN,KAAYC,EAAZ,KACA,EAAqBF,mBAAS,IAA9B,mBAAMa,EAAN,KAAWgX,EAAX,KACA,EAA4B7X,mBAAS,MAArC,mBAAO8X,EAAP,KAAeC,EAAf,KACMxX,EAAQC,cACd,EAAwBR,mBAAS,IAAjC,mBAAO0M,EAAP,KAAapM,EAAb,KACA,EAAqCN,qBAArC,mBAAOqN,EAAP,KAAoBC,EAApB,KAPF,4CAUE,WAA4B7M,GAA5B,uBAAAC,EAAA,yDAEED,EAAEE,iBAEE6P,EAAY,IAEbsH,EANL,wBAQU7W,EAAO,IAAIiI,UACZC,OAAO,OAAO2O,GACnB7W,EAAKkI,OAAO,gBAAgB,kBAC5BlI,EAAKkI,OAAO,aAAa,aAX7B,mBAe2BrI,IAAMC,KAAK,yDAAyDE,GAf/F,QAeUD,EAfV,OAgBMwP,EAAaxP,EAASC,KAAKmI,IAhBjC,kDAkBgBjF,QAAQC,IAAR,MAlBhB,eAsBMxD,EAAM,CAACC,KAAKA,EAAKZ,MAAMA,EAAMkD,UAAUqN,EAAY5N,SAAS,GAAGQ,SAAS,kBAAkBC,OAAO,gCAtBvG,oBAyB8BvC,IAAMC,KAAK,wDAAwDH,GAzBjG,QA0BmC,WADtBI,EAzBb,QA0BmBC,KAAK0C,OAEdrD,EAASU,EAASC,KAAK2C,UAKvB1C,eAAc,OAAYF,EAASC,KAAKE,MACxCD,eAAc,GAASF,EAASC,KAAKG,KAAKC,IAC1CH,eAAc,KAAWF,EAASC,KAAKG,KAAKP,KAC5Cd,EAAMuB,SAASN,EAASC,KAAKG,KAAKC,KAElCd,EAAQgB,KAAK,SAtCvB,mDAwCkB4C,QAAQC,IAAR,MAxClB,mEAVF,sBAsDE,SAASqJ,EAAiBhN,GAGxBsX,EAAWtX,EAAEsB,OAAO2L,MAAM,IAC1BJ,EAAgBK,OAAOC,IAAIC,gBAAgBpN,EAAEsB,OAAO2L,MAAM,KAI5D,OAEE,qBAAKjM,UAAU,UAAf,SACE,sBAAMA,UAAU,aAAaC,SAjEnC,4CAiEM,SACG,sBAAKD,UAAU,MAAf,UACG,yBAAQA,UAAU,YAAaU,MAAO,CAAC6V,aAAa,MAAOlD,cAAc,OAAzE,UACE,0CACA,2DAEF,sBAAKrT,UAAU,YAAf,UACE4L,EACC,sBAAK5L,UAAU,qBAAf,UACK,cAACoK,EAAA,EAAD,CAASC,IAAKuB,EAAclL,MAAO,CAACiK,OAAQ,QAAS6B,MAAO,QAASC,gBAAgB,OAAQ9L,OAAO,OAAO+L,UAAU,QAArH,eACA,sBAAK1M,UAAU,wBAAwBU,MAAO,CAACiM,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAASC,SAAS,WAAWC,OAAO,IAAIC,MAAM,QAAQiC,OAAO,WAA7J,UACE,cAAC,IAAD,CAAgBvO,MAAO,CAACiK,OAAQ,OAAQ6B,MAAO,OAAQQ,MAAM,WAC7D,uBAAOC,OAAO,UAAU/M,GAAG,OAAOC,KAAK,OAAOf,KAAK,OAAOiB,SAAU2L,IACpE,sBAAMtL,MAAO,CAACkK,SAAS,QAAvB,mCAKR,qBAAK5K,UAAU,sBAAf,SACE,eAACoK,EAAA,EAAD,CAAU1J,MAAO,CAACiK,OAAQ,QAAS6B,MAAO,QAASC,gBAAgB,OAAQ9L,OAAO,OAAO+L,UAAU,QAAnG,UACE,cAAC,IAAD,CAAehM,MAAO,CAACoM,SAAS,WAAWC,OAAO,IAAKG,QAAQ,MAAMvC,OAAQ,OAAQ6B,MAAO,UAC5F,sBAAM9L,MAAO,CAACiM,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAASC,SAAS,WAAWC,OAAO,IAAIC,MAAM,QAAQiC,OAAO,WAA5H,UACE,cAAC,IAAD,CAAgBvO,MAAO,CAACiK,OAAQ,OAAQ6B,MAAO,OAAQQ,MAAM,WAC7D,uBAAOC,OAAO,UAAU/M,GAAG,OAAOC,KAAK,OAAOf,KAAK,OAAOiB,SAAU2L,IACpE,sBAAMtL,MAAO,CAACkK,SAAS,QAAvB,yCAIN,uBAAM5K,UAAU,aAAhB,UACE,mBAAGD,MAAM,sBACT,uBAAOC,UAAU,aAAaE,GAAG,YAAYC,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACrB,GAAD,OAAMoX,EAAQpX,EAAEsB,OAAOC,QAAQC,UAAQ,OAEpI,uBAAMR,UAAU,aAAhB,UACE,mBAAGD,MAAM,cACT,uBAAOC,UAAU,aAAaG,KAAK,WAAWC,YAAY,WAAWF,GAAG,MAAOd,KAAK,WAAWiB,SAAU,SAACrB,GAAD,OAAMP,EAASO,EAAEsB,OAAOC,QAAQC,UAAQ,OAEnJ,wBAAQR,UAAU,SAASG,KAAK,SAAhC,2BAEF,8BACE,eAAC,IAAD,CAAOH,UAAU,8BAA8BS,GAAE,IAAjD,iBAA4D,mBAAGC,MAAO,CAACC,OAAO,OAAOZ,MAAM,kBAAkB,cAAY,SAAzH,sBAEF,sBAAMW,MAAO,CAACkK,SAAS,QAAvB,SAAiCK,Y,OC3E9BuL,OAhCf,WAGE,MAAkBjY,qBAAlB,mBAAO2B,EAAP,KAAUuW,EAAV,KAEMC,EACL,cAACvT,EAAD,CAAgBC,OAAQlD,EAAxB,SACE,cAACe,EAAD,CAAcf,GAAIA,EAAlB,SACC,cAAC8D,EAAD,UACE,cAAC,GAAD,CAAY9D,GAAIA,UAMtB,OAEE,cAAC,IAAD,UACE,qBAAKF,UAAU,MAAf,SACG,eAAC,IAAD,WACGP,eAAc,GACd,eAAC,IAAD,CAAOkX,OAAK,EAACC,KAAK,IAAlB,cAAwB,cAACvY,EAAD,CAAOwB,SAAU4W,OACzC,eAAC,IAAD,CAAOG,KAAK,YAAZ,cAA0B,cAAC,GAAD,CAAU/W,SAAU4W,OAC7ChX,eAAc,GAAS,eAAC,IAAD,CAAOkX,OAAK,EAACC,KAAK,OAAlB,cAA4BF,EAA5B,OAAgD,cAAC,IAAD,CAAUjW,GAAG,cC7BjGoW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.421ee1aa.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport '../css/login.css'\r\nimport axios from 'axios'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\n\r\n\r\n\r\nexport default function LogIn(props) \r\n{\r\n\r\n  const [phone,setPhone] = useState('');\r\n  const [UserName,setUserName] = useState('');\r\n  const [Error,setError] = useState('')\r\n  const history=useHistory();\r\n\r\n  //get user information and token from DB\r\n  async function handleSubmit(e)\r\n  {\r\n    setError('')\r\n    e.preventDefault()\r\n    let obj = {name: UserName,phone: phone}\r\n    let response = await axios.post(\"https://messagesapp1.herokuapp.com/api/logIn\",obj)\r\n\r\n    if(response.data !== \"not found\")\r\n    {\r\n      sessionStorage['config']= response.data.token \r\n      sessionStorage['id'] = response.data.User._id\r\n      sessionStorage['name'] = response.data.User.name\r\n      props.CanLogIn(response.data.User._id)\r\n\r\n       history.push('/App')\r\n\r\n    }\r\n        \r\n    else\r\n      setError(\"One or more of your identification details is incorrect.\")\r\n\r\n  }\r\n\r\n  return (\r\n  \r\n    <div class=\"overlay\">\r\n      <form className='login_form' onSubmit={handleSubmit}>\r\n        <div class=\"con\">\r\n          <header class=\"head-form\">\r\n            <h2>Log In</h2>\r\n            <p>welcome to  my whatsApp</p>\r\n          </header>\r\n          <div class=\"field-set\">\r\n            <span class=\"input-item\">\r\n              <i class=\"fa fa-user-circle\"></i>\r\n              <input class=\"form-input\" id=\"txt-input\" type=\"text\" placeholder=\"@UserName\" onChange={(e)=> setUserName(e.target.value)} required />\r\n            </span>\r\n            <span class=\"input-item\">\r\n              <i class=\"fa fa-key\"></i>\r\n              <input class=\"form-input\" type=\"password\" placeholder=\"Password\" id=\"pwd\"  name=\"password\" onChange={(e)=> setPhone(e.target.value)} required/>\r\n            </span>\r\n            <button className=\"log-in\" type='submit'> Log In </button>\r\n          </div>\r\n          <div>\r\n            <Link  className=\"submits sign-up defaultLink\" to={`/Register`}>     Sign Up<i style={{margin:'7px'}}class=\"fa fa-user-plus\" aria-hidden=\"true\"/></Link>\r\n          </div>\r\n          {Error}\r\n        </div>\r\n      </form>\r\n    </div>    \r\n  )\r\n}\r\n","\r\nimport React, { useState ,useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() \r\n{\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n\r\n\r\n  \r\n  useEffect( () =>\r\n  {\r\n    async function fetchData() \r\n    {\r\n      getContacts().then(res=> setContacts(res))\r\n    }\r\n\r\n    fetchData();\r\n\r\n   },[setInfo])\r\n\r\n   async function getContacts()\r\n   {\r\n      const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+sessionStorage['id'],config);\r\n      setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen,Status:response.data.Status})\r\n      return(response.data.contacts)\r\n\r\n   }\r\n   \r\n\r\n  function getSearchContacts(str)\r\n  {\r\n    getContacts().then(res=>\r\n    {\r\n      let SearchResult =res.filter(contact=> contact.name.includes(str) === true)\r\n      setContacts(SearchResult)\r\n    })\r\n\r\n  }\r\n\r\n\r\n  const createContact = async(name) =>\r\n  {\r\n    \r\n    if(name === info.name)\r\n    {\r\n      return {status:'error',message:'cant Add yourself'};\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.name === name)\r\n\r\n    if(checkIfExists.length !== 0)\r\n    {\r\n      return {status:'error',message:'already exists'};\r\n    }\r\n\r\n    try\r\n    { \r\n\r\n      const response= await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByName/\" + name,config)\r\n\r\n      if(response.data !== 'no such user')\r\n      {\r\n        const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName,Status:response.data.Status}\r\n        let newContacts = [...contacts,contact]\r\n        setContacts(newContacts)\r\n        let UpdatedUser={...info,contacts:newContacts}\r\n        try\r\n        {\r\n          await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n        } catch(err){console.log(err)}\r\n      }\r\n      else return {status:'error',message:'user doesnt exist'};\r\n     \r\n    }catch(err){console.log(err)}\r\n\r\n    return {status:'ok'}\r\n    \r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact,getSearchContacts }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}","import React, { useState,useContext,useRef,useEffect} from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nconst SocketContext = React.createContext()\r\n\r\nexport function useSocket() \r\n{\r\n  return useContext(SocketContext)\r\n}\r\n\r\nexport function SocketProvider({ userId, children }) \r\n{\r\n\r\n  const socket = useRef()\r\n  const [ConnectedUsers,setConnectedUsers] =useState([])\r\n\r\n  useEffect(()=>\r\n  {\r\n    async function fetchData() {\r\n    socket.current = io(\"wss://messagesapp1.herokuapp.com:443/\");\r\n    }\r\n\r\n    fetchData()\r\n\r\n  },[])\r\n\r\nuseEffect(()=>\r\n{\r\n  async function fetchData() \r\n  {\r\n    socket.current.emit(\"AddUser\",sessionStorage['id'])\r\n    socket.current.on(\"getConnectedUsers\", users =>\r\n    {\r\n      setConnectedUsers(users)\r\n    })\r\n  }\r\n\r\n  fetchData();\r\n\r\n},[userId])\r\n\r\n  return (\r\n    <SocketContext.Provider value={{socket,ConnectedUsers}}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  )\r\n}","import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() \r\n{\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({children }) \r\n{\r\n\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const { socket, ConnectedUsers } = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n  const [showDetails,setShowDetails] =useState(false)\r\n  const [removedFromGroupFlag,setRemovedFromGroupFlag] = useState(false)\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n\r\n\r\n  useEffect(()=>\r\n  {\r\n\r\n    async function fetchData() {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === conversationId)\r\n          {\r\n             setTypingFlag(user.name)\r\n          }\r\n        }\r\n    })\r\n\r\n    socket.current.on('update-conversation',async ()=>\r\n    {\r\n    \r\n      getConversations().then(res=> setConversations(res))\r\n    \r\n    })\r\n\r\n    socket.current.on('removed-user',async ()=>\r\n    {\r\n    \r\n      getConversations().then(res=> \r\n      {\r\n        setConversations(res)\r\n        if(selectedConversation)\r\n        {\r\n          let checkIfDeleted=res.filter(conversation=> conversation._id === selectedConversation._id)\r\n          if(checkIfDeleted.length === 0 ) \r\n            setRemovedFromGroupFlag(true)\r\n\r\n        }\r\n\r\n      })\r\n    \r\n    })\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[selectedConversation])\r\n\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() {\r\n\r\n    if(selectedConversation)\r\n    {\r\n    if(!selectedConversation.isGroup)\r\n     {\r\n      if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n      {\r\n        setCurrentConversationIsConnected('')\r\n      }\r\n      else\r\n      {\r\n        let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n        setCurrentConversationIsConnected(response.data.LastSeen)\r\n      }\r\n     }\r\n    }\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,setSelectedConversation])\r\n\r\n  useEffect(() =>\r\n  {\r\n    async function fetchData() {\r\n     getConversations().then(res=> setConversations(res))\r\n    }\r\n    fetchData();\r\n    \r\n  }, []);\r\n\r\n  async function getConversations()\r\n  {\r\n\r\n    try\r\n    {\r\n      let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n      let ConversationsList = response.data.map((conversation) =>\r\n      {\r\n        let UpdatedConversation= conversation\r\n        if (!conversation.isGroup && conversation.Name === info.name)\r\n          UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === UpdatedConversation._id)\r\n            setSelectedConversation(UpdatedConversation)\r\n\r\n        }\r\n          \r\n         return UpdatedConversation;\r\n\r\n      })\r\n\r\n      return ConversationsList \r\n\r\n    } catch (err) {console.log(err);}\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  async function getSearchConverastions(str)\r\n  {\r\n    getConversations().then(res=>\r\n    {\r\n      let SearchResult = res.filter(conversation=> \r\n      conversation.Name.includes(str) ===true)\r\n      setConversations(SearchResult)\r\n    })\r\n\r\n  }\r\n        \r\n\r\n  async function createConversation(ids, name, image,groupFlag)\r\n  {\r\n\r\n    let ConversationImage = image;\r\n    let isGroup = groupFlag;\r\n    let messages = []\r\n    let lastMessage=''\r\n\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      return {status:'error',message:'no participants choosen'};\r\n    }\r\n\r\n    //check if conversation already exists and it's not a group\r\n    let ConversationExists = null;\r\n    if (ids.length === 1 && !isGroup) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => \r\n      {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      let createdDate=''\r\n\r\n      //if group\r\n      if (isGroup) \r\n      {\r\n        let parts = new Intl.DateTimeFormat('en', {\r\n          hc: 'h12',\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          timeZone:'Asia/Jerusalem'})\r\n        .formatToParts(new Date())\r\n        .reduce((acc, part) => {\r\n          acc[part.type] = part.value;\r\n          return acc;\r\n        }, Object.create(null));\r\n\r\n        createdDate= `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}`;\r\n\r\n        lastMessage={name:\"manager\",message: info.name +\" created this group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n        messages.push(lastMessage)\r\n\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n          ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      }\r\n    \r\n      let newConversation = \r\n      {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: messages,\r\n        LastMessage:lastMessage,\r\n        ConversationImage: ConversationImage,\r\n        isGroup:isGroup,\r\n        createdDate:createdDate,\r\n        description: \"Add Description\",\r\n      };\r\n\r\n      //updateDB\r\n      try \r\n      {\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n\r\n        if (Response.data.status === \"created\") \r\n        {\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent or if its A group\r\n          if (Response.data.conversation.Messages.length > 0  || Response.data.conversation.isGroup === true)\r\n          {\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n            socket.current.emit('conversation-changed',Response.data.conversation)\r\n          }\r\n        }\r\n      }catch (err) {console.log(err);}\r\n    }\r\n  }\r\n\r\n  async function UpdateConversation(updatedConversation)\r\n  {\r\n\r\n    let updateDBConv={...updatedConversation}\r\n    if(!(updatedConversation.LastMessage.message.includes('left')))\r\n    {\r\n      let addCurrentParticipant= {id: info.id,phone: info.phone,name: info.name,image: info.imageName,}\r\n      let participants=[...updatedConversation.Participants,addCurrentParticipant]\r\n      updateDBConv={...updateDBConv,Participants:participants}\r\n    }\r\n\r\n    delete updateDBConv._id\r\n\r\n\r\n    try\r\n    {\r\n      let response=await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+ selectedConversation._id,updateDBConv,config)\r\n      if(response.data.status==='Updated')\r\n      {\r\n        let UpdatedConversations=[]\r\n        if(!(updatedConversation.LastMessage.message.includes('left')))\r\n        {\r\n          setSelectedConversation(updatedConversation)\r\n          conversations.forEach(conversation=>\r\n          { \r\n            if(conversation._id===updatedConversation._id)    \r\n              UpdatedConversations.push(updatedConversation)\r\n            else UpdatedConversations.push(conversation)\r\n\r\n          })\r\n        }\r\n        else\r\n        {\r\n          UpdatedConversations=conversations.filter(conversation=> conversation._id !== selectedConversation._id)\r\n          setSelectedConversation()\r\n        }\r\n\r\n        if(updatedConversation.LastMessage.message.includes('removed'))\r\n          socket.current.emit('user-deleted',selectedConversation)\r\n        else\r\n          socket.current.emit('conversation-changed',selectedConversation)\r\n\r\n        setConversations(UpdatedConversations)\r\n              \r\n      }\r\n    }catch(err){console.log(err)}\r\n  }\r\n\r\n\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n  {\r\n    audio.play()\r\n\r\n    let ConversationExists = false;\r\n    let newListOfConversations = RefConversations.current.map((conversation) =>\r\n    {\r\n      if (conversation._id === UpdatedConv._id) \r\n      {\r\n        ConversationExists = true;\r\n        let newConv = \r\n        { ...conversation,\r\n          Messages: UpdatedConv.Messages,\r\n          LastMessage: UpdatedConv.LastMessage,};\r\n          if (currentConversationRef.current) \r\n          {\r\n           if (currentConversationRef.current._id === UpdatedConv._id)\r\n             setSelectedConversation(newConv);\r\n          }\r\n\r\n        return newConv;\r\n\r\n      }\r\n      else return conversation;\r\n    });\r\n\r\n\r\n    if (!ConversationExists) \r\n    {\r\n      if (!UpdatedConv.isGroup)\r\n      {\r\n        let newConversation = \r\n        { ...UpdatedConv,\r\n        Name: UpdatedConv.Participants[0].name,\r\n        ConversationImage: UpdatedConv.Participants[0].imageName,\r\n        };\r\n\r\n        setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n      } \r\n      else\r\n        setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n    } \r\n    else setConversations(newListOfConversations);\r\n  },[setConversations]);\r\n\r\n  useEffect(() => \r\n  {\r\n\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  },[conversations, selectedConversation]);\r\n\r\n\r\n  const updateSenderConversation = (AddMessage) => \r\n  {\r\n\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => \r\n    {\r\n      if (conversation._id === AddMessage._id) \r\n      {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } \r\n      else return conversation;\r\n\r\n    });\r\n\r\n    if (ConversationExists) \r\n    {\r\n      setConversations(newListOfConcversations);\r\n    } \r\n    else\r\n      setConversations((prevConversations) => [...prevConversations,AddMessage]);\r\n  };\r\n\r\n\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n    let parts = new Intl.DateTimeFormat('en', {\r\n    hc: 'h12',\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => \r\n    {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = \r\n    {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      image: info.imageName,\r\n    };\r\n\r\n    let AddMessage = \r\n    {...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n\r\n    socket.current.emit(\"send-message\", \r\n    {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n        showDetails,\r\n        setShowDetails,\r\n        UpdateConversation,\r\n        removedFromGroupFlag,\r\n        setRemovedFromGroupFlag\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport {Avatar} from '@material-ui/core';\r\nimport {useConversations} from '../contexts/conversationsprovider';\r\nimport '../css/conversations.css'\r\n\r\nexport default function Conversations() \r\n{\r\n\r\n  const {setSelectedConversation,conversations,setShowDetails} =useConversations()\r\n\r\n  \r\n  async function handleSelectedConversation(conversation) \r\n  {\r\n    setShowDetails(false)\r\n    setSelectedConversation(conversation)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='Chats' >\r\n      <div className='contacts_list'>\r\n        {conversations.map((conversation,index)=>\r\n        {\r\n          return  (   \r\n            <div key={index}  onClick={()=>handleSelectedConversation(conversation)}  className='ChatsListItem'>\r\n              <Avatar src={conversation.ConversationImage}/>\r\n              <div className='chatInfo'>\r\n                <h2 className='user_name'>{conversation.Name}</h2>\r\n                <span className='user_status'> {(conversation.LastMessage.message).slice(0,28)}... </span>\r\n              </div>\r\n            \r\n            </div>\r\n          )\r\n                    \r\n                })}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport {Avatar,Button} from '@material-ui/core';\r\nimport {useUser} from '../contexts/userprovider';\r\nimport {useConversations} from '../contexts/conversationsprovider'\r\nimport '../css/conversations.css'\r\n\r\nexport default function Contacts({newConversationCallback,openModalCallback}) \r\n{\r\n\r\n  const {info,contacts} = useUser()\r\n  const {createConversation} = useConversations()\r\n\r\n  function startConversation({id,name,image}) \r\n  {\r\n    let ids=[id]\r\n    createConversation(ids,name,image,false)\r\n    newConversationCallback()\r\n    \r\n  }\r\n\r\n  return (\r\n\r\n    <div className='Chats contacts'  >\r\n      <h4 className='new_chat_title'>Start New Chat:</h4>            \r\n      <Button  style={{height:'30px' ,margin:'5px 0px',fontSize:'10px'}} onClick={()=>openModalCallback()}\r\n      className='add_new_Button' > Create Group </Button>\r\n      <div className='contacts_list'>\r\n        {contacts.map(contact =>\r\n        {\r\n          return(\r\n         \r\n           <div className='ChatsListItem' onClick={()=>startConversation({id:contact.id,name:contact.name,image:contact.imageName})}>\r\n             <Avatar src={contact.imageName}/>\r\n              <div className='chatInfo'>\r\n                <h2 className='user_name'>{contact.name} </h2>\r\n                <span className='user_status'> {(info.Status).slice(0,25)}... </span>\r\n              </div>\r\n            </div> \r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n};","import { useRef,useState } from 'react'\r\nimport {useUser } from '../contexts/userprovider';\r\nimport {IconButton } from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport '../css/addnew.css'\r\n\r\n\r\nexport default function AddNewContact({closeModal})\r\n{\r\n\r\n  const userNameRef = useRef()\r\n  const {createContact} = useUser()\r\n  const [error,setError]=useState('')\r\n   \r\n\r\n  async function AddContact()\r\n  {\r\n\r\n    let responseStatus = await createContact(userNameRef.current.value)\r\n\r\n    if(responseStatus.status === 'ok')\r\n    {\r\n       closeModal();\r\n       setError('')\r\n    }\r\n    \r\n    else\r\n    {\r\n      setError(responseStatus.message)\r\n    }\r\n   \r\n  }\r\n\r\n  return (\r\n   \r\n    <div className='add_new'>\r\n        <div className='add_new_contact_border'>\r\n            <div className='add_contact_model'>\r\n                <div className='title_and_close'>\r\n                  <h2 className='add_contact_title'>Add New Contact</h2> \r\n                  <IconButton className='close_add_new'  onClick={()=>closeModal()}>\r\n                    <CloseIcon fontSize='large' /> \r\n                  </IconButton>\r\n                </div>\r\n        \r\n                <div className='add_new_contact'>\r\n                  <h3 className='enter_phone'>userName:</h3>\r\n                  <input className='add_new_input' type='text' ref={userNameRef} required/>\r\n                  <button className='add_new_button' onClick={AddContact}> Add Contact</button>\r\n                </div>\r\n                <span className='show_error'>{error}</span>\r\n            </div>\r\n\r\n        </div>       \r\n    </div>\r\n\r\n  )\r\n}","import React, {useState } from 'react'\r\nimport {useUser } from '../contexts/userprovider'\r\nimport {useConversations } from '../contexts/conversationsprovider'\r\nimport {Avatar,IconButton} from '@material-ui/core';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nfunction CreateNewGroup( { closeModal }) {\r\n\r\n    const [selectedContactsId, setSelectedContactsId] = useState([])\r\n    const {contacts} = useUser()\r\n    const {createConversation} = useConversations()\r\n    const [groupName,setGroupName] =useState('')\r\n    const [groupImage,setGroupImage] =useState()\r\n    const [previewImage,setPreviewImage]=useState()\r\n    const [goToParticipants,setGoToParticipants] = useState(false)\r\n\r\n\r\n    function createGroup()\r\n    {\r\n        createConversation(selectedContactsId,groupName,groupImage,true)\r\n        closeModal()\r\n    }\r\n\r\n    \r\n    function handleCheckboxChange(contactId) \r\n    {\r\n        if(selectedContactsId.includes(contactId))\r\n        {\r\n            setSelectedContactsId(prevSelectedContactsId =>\r\n            {\r\n                return (prevSelectedContactsId.filter(id=> id!==contactId))\r\n            } )\r\n        }\r\n  \r\n        else\r\n        {\r\n           setSelectedContactsId(prevSelectedContactsId=>\r\n            {\r\n              return [...prevSelectedContactsId,contactId]\r\n            })\r\n        }   \r\n    }\r\n\r\n    function handleFileUpload(e)\r\n    {\r\n        setGroupImage(e.target.files[0])\r\n        setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='add_new'>\r\n        <div className='add_new_group_border'>\r\n          <div className='new_conversation new_group'>\r\n            {goToParticipants !==true ?\r\n            <div className='top_new_group'>\r\n              <div style={{flex:'1'}}className='title_and_close'>\r\n                <h2 className='add_contact_title' style={{marginLeft:'85px',paddingRight:'0px'}}>Create New Group:</h2> \r\n                <IconButton style={{marginLeft:'45px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                  <CloseIcon fontSize='large' /> \r\n                </IconButton>\r\n              </div>\r\n\r\n              {previewImage? \r\n              <div className='change_group_image'> \r\n                <Avatar  src={previewImage} style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}>  </Avatar>\r\n                <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white'}}>\r\n                  <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                  <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                  <span style={{fontSize:'10px'}}>Change Image </span>\r\n                </div>\r\n              </div>\r\n              :\r\n              <div className='add_group_image'>\r\n                <Avatar   style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}>\r\n                  <PeopleAltIcon style={{position:'absolute',zIndex:'0', opacity:'0.1',height: '80px', width: '80px' }}/>\r\n                  <div  style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white'}}>\r\n                    <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                    <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                    <span style={{fontSize:'10px'}}>add group image</span>\r\n                  </div>\r\n                </Avatar>\r\n              </div> }\r\n              <div className='group_name'>\r\n                <span style={{padding:'5px', margin:'5px' , fontSize:'13px', color:'#fcfcfc'}}> Group Name:</span>\r\n                <input style={{borderRadius:'10px', border:'none',outline:'none'}} onChange={(e)=>setGroupName(e.target.value)}/>\r\n              </div>\r\n              <button style={{display:'flex',alignItems:'center',width:'180px',justifyContent:'center'}} className='add_new_button'  onClick={()=>setGoToParticipants(true)}><ArrowBackIcon style={{margin:'5px'}} /> Add Members</button>\r\n            </div>\r\n            :\r\n            <div>\r\n              <div style={{flex:'1'}}className='title_and_close'>\r\n                <h2 className='add_contact_title' style={{marginLeft:'80px',paddingRight:'0px'}}>Select Members:</h2> \r\n                <IconButton style={{marginLeft:'40px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                  <CloseIcon fontSize='large' /> \r\n                </IconButton>\r\n              </div>\r\n              <div style={{overflowY:'overlay',height:'200px'}}>\r\n              {contacts.map(contact =>\r\n              {\r\n                return(\r\n                  <div className='contact_item' >\r\n                    <input type=\"checkbox\" value={selectedContactsId.includes(contact.id)}\r\n                    id={contact.id} onChange={() => handleCheckboxChange(contact.id)}/>\r\n                    <label style={{display:'flex',flexDirection:'row',alignItems:'center',width:'100%'}}for={contact.id} >\r\n                      <Avatar  style={{margin:'5px'}} src={process.env.PUBLIC_URL + contact.imageName}   fontSize='large'/>\r\n                      <h3 className='enter_phone' style={{marginLeft:'10px' ,fontWeight:'400'}}>{contact.name} </h3>\r\n                    </label>\r\n                  </div>\r\n                )}) \r\n                }  \r\n              </div>\r\n              <div style={{display:'flex' , justifyContent:'center'}}>\r\n                <button className='add_new_button'  type=\"submit\" onClick={()=>createGroup()}>Create</button>\r\n              </div>\r\n\r\n            </div>}  \r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default CreateNewGroup\r\n","import React,{useState} from 'react'\r\nimport '../css/profiledetails.css'\r\nimport axios from 'axios';\r\nimport {useUser } from '../contexts/userprovider';\r\nimport {Avatar, IconButton,makeStyles } from '@material-ui/core';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport Picker from 'emoji-picker-react';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      \"&:hover\": {\r\n        backgroundColor: \"transparent\"\r\n  \r\n      }}\r\n    });\r\n\r\nfunction ProfileDetails({backToConversations}) \r\n{\r\n  const {info,contacts,setInfo,config} = useUser()\r\n  const [previewImage,setPreviewImage]=useState(info.imageName)\r\n  const [editNameFlag,setEditNameFlag] = useState(false)\r\n  const [editStatusFlag,setEditStatusFlag] = useState(false)\r\n  const [emojiFlag,setEmojiFlag]=useState(false)\r\n  const [Text,setText] = useState(info.name)\r\n  const [Status,setStatus] = useState(info.status)\r\n  const [statusEmojiFlag,setStatusEmojiFlag]=useState(false)\r\n  const classes = useStyles();\r\n\r\n\r\n  //add emoji to name\r\n  const onEmojiClick = (event, emojiObject) => \r\n  {\r\n    setText(prevText => prevText + emojiObject.emoji)\r\n  };\r\n\r\n\r\n  //add emoji to status\r\n  const onStatusEmojiClick = (event, emojiObject) => \r\n  {\r\n    setStatus(prevStatus => prevStatus + emojiObject.emoji)\r\n  };\r\n\r\n  //change profile picture  \r\n  async function handleFileUpload(e)\r\n  {\r\n\r\n    let picturePath=''\r\n    \r\n    const data = new FormData()\r\n    data.append('file',e.target.files[0])\r\n    data.append(\"upload_preset\",\"whatsApp_clone\")\r\n    data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n       \r\n    try\r\n    {\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n      picturePath =response.data.url\r\n\r\n    }catch(err){console.log(err)}\r\n\r\n    let obj = {name: info.name,phone: info.phone,imageName:picturePath,contacts:contacts,LastSeen:info.lastSeen,Status:info.Status}\r\n\r\n    try\r\n    {\r\n      let response = await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],obj,config)\r\n\r\n      if(response.data==='Updated')\r\n        setInfo(obj)\r\n\r\n    }catch(err){console.log(err)}\r\n\r\n      setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n\r\n  }\r\n\r\n  async function changeProfileName()\r\n  {\r\n    let obj = {name: Text,phone: info.phone,imageName:info.imageName,contacts:contacts,LastSeen:info.LastSeen,Status:info.Status}\r\n    try\r\n    {\r\n      let response = await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],obj,config)\r\n      if(response.data==='Updated')\r\n        setInfo(obj)\r\n\r\n    }catch(err){console.log(err)}\r\n\r\n      setEmojiFlag(false)\r\n      setEditNameFlag(false)\r\n\r\n  }\r\n\r\n  async function changeProfileStatus()\r\n  {\r\n    let obj = {name:info.name,phone: info.phone,imageName:info.imageName,contacts:contacts,LastSeen:info.LastSeen,Status:Status}\r\n    try\r\n    {\r\n      let response = await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],obj,config)\r\n\r\n      if(response.data==='Updated')\r\n        setInfo(obj)\r\n\r\n    }catch(err){console.log(err)}\r\n\r\n    setStatusEmojiFlag(false)\r\n    setEditStatusFlag(false)\r\n\r\n  }\r\n\r\n    return (\r\n        <div className='show_details'>\r\n            <header className='profile_title'>\r\n              <div className='title_and_back_to_conversations'>\r\n                <IconButton onClick={()=>backToConversations()}>\r\n                   <ArrowBackIcon style={{height:'30px',width:'30px'}}  />\r\n                </IconButton>\r\n                <h2 className='title_h2'> Profile </h2>\r\n              </div>\r\n\r\n            </header>\r\n\r\n            <div className='profile_details_body'>\r\n\r\n              <div className='profile_pic'>\r\n                 <Avatar  src={previewImage} style={{height: '170px', width: '170px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}> </Avatar>\r\n                 <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white',curser:'pointer'}}>\r\n                     <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                     <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                     <span style={{fontSize:'10px'}}>Change Picture </span>\r\n                 </div>\r\n              </div>\r\n\r\n              <span className='profile_details'>\r\n                <h3 className='edit_title'>your name:</h3>\r\n                {editNameFlag?\r\n                   <div>\r\n                      {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' ,height:'200px'}}/> : ''}\r\n                      <div className='edit_group_name' style={{margin:'10px',padding:'5px'}}>\r\n                        <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeProfileName()}>\r\n                          <CheckIcon fontSize='large'/>\r\n                        </IconButton>\r\n                        <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setEmojiFlag(!emojiFlag)}>\r\n                          <InsertEmoticonIcon fontSize='large'/>\r\n                        </IconButton>\r\n                        <input className='input_text' defaultValue={Text} onChange={(e)=>setText(e.target.value)} ></input>\r\n                      </div>\r\n                    </div>\r\n                    :\r\n                    <div className='edit_details'>\r\n                      <IconButton onClick={()=>setEditNameFlag(true)}>\r\n                        <EditIcon style={{fontSize:'large'}}/>\r\n                      </IconButton>\r\n                      <h3>{info.name}</h3>\r\n                    </div>}\r\n                  </span>\r\n\r\n              <span className='profile_details'>\r\n\r\n              <h3 className='edit_title'>status:</h3>\r\n              {editStatusFlag?\r\n                <div>\r\n                  {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onStatusEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' ,height:'200px'}}/> : ''}\r\n                  <div className='edit_group_name' style={{margin:'10px',padding:'5px'}}>\r\n                    <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeProfileStatus()}>\r\n                      <CheckIcon fontSize='large'/>\r\n                    </IconButton>\r\n                    <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setStatusEmojiFlag(!statusEmojiFlag)}>\r\n                      <InsertEmoticonIcon fontSize='large'/>\r\n                    </IconButton>\r\n                    <input className='input_text' defaultValue={Status} onChange={(e)=>setStatus(e.target.value)} ></input>\r\n                  </div>\r\n                </div>:\r\n                <div className='edit_details'>\r\n                  <IconButton onClick={()=>setEditStatusFlag(true)}>\r\n                    <EditIcon style={{fontSize:'large'}}/>\r\n                  </IconButton>\r\n                  <h3 style={{fontSize:'15px'}}>{info.Status}</h3>\r\n                </div>}\r\n              </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileDetails\r\n","import '../css/sidebar.css'\r\nimport React from 'react'\r\nimport { useState} from 'react';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\r\nimport { Avatar, IconButton,Button, Modal } from '@material-ui/core';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Conversations from './conversations';\r\nimport Contacts from './contacts';\r\nimport AddNewContact from './addnewcontact'\r\nimport { useUser } from '../contexts/userprovider';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {useConversations } from '../contexts/conversationsprovider';\r\nimport CreateNewGroup from './createnewgroup';\r\nimport ProfileDetails from './profiledetails';\r\n\r\n\r\n\r\n\r\nexport default function SideBar() \r\n{\r\n  const [choosenAct,setChoosenAct]=useState('conversations')\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n  const {info,getSearchContacts} =useUser()\r\n  const [searchFlag,setSearchFlag] =useState(false)\r\n  const {getSearchConverastions} = useConversations()\r\n  const [choosenModal,setChoosenModal] =useState('')\r\n  const [openProfileDetailsFlag,setOpenProfileDetailsFlag]=useState(false)\r\n    \r\n    \r\n  function handleChange(e)\r\n  {\r\n    if(choosenAct === 'conversations')\r\n      getSearchConverastions(e.target.value)\r\n\r\n    else getSearchContacts(e.target.value)\r\n\r\n  }\r\n\r\n  function closeModal() \r\n  {\r\n    setModalOpen(false)\r\n  }\r\n\r\n  function openChoosenModal(modalType)\r\n  {\r\n    setModalOpen(true)\r\n    setChoosenModal(modalType)\r\n  }\r\n\r\n  function backToConversationsCallback()\r\n  {\r\n    setOpenProfileDetailsFlag(false)\r\n  }\r\n\r\n  return (\r\n    \r\n    <div className='sideBar'>\r\n\r\n      {openProfileDetailsFlag? <ProfileDetails backToConversations={backToConversationsCallback}/>:\r\n        <div>\r\n          <div className='sidebar_top'>\r\n            <div className='user_profile_pic' onClick={()=> setOpenProfileDetailsFlag(true)}>\r\n              <Avatar src={info.imageName} fontSize='large' />\r\n            </div>\r\n            <div className='sidebar_top_right'>\r\n              <IconButton onClick={()=>setChoosenAct('conversations')}>\r\n                <ChatIcon fontSize='large' />\r\n              </IconButton>\r\n              <IconButton fontSize='large' onClick={()=>setChoosenAct('contacts')}>\r\n                <PeopleIcon  fontSize='large'  />\r\n              </IconButton>\r\n              <IconButton >\r\n                <MoreVertIcon />\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n         \r\n          {searchFlag?  \r\n          <div className='activeSearch' >\r\n            <div className='arrowButton'>\r\n              <IconButton onClick={()=>setSearchFlag(false)} >\r\n                <ArrowBackIcon fontSize='large' />\r\n              </IconButton>\r\n            </div>\r\n            <input className='searchBlock' type='text' onChange={handleChange}/> \r\n          </div>\r\n          :\r\n          <div className='searchBar'>\r\n            <div className='searchContainer' >\r\n              <SearchOutlined/>\r\n              <input placeholder='search' type='text' onClick={()=>setSearchFlag(true)}/>\r\n            </div>\r\n          </div>}\r\n           \r\n          {choosenAct==='contacts'?\r\n            <div>\r\n              <div className='sidebar_middle'>\r\n                <Button style={{fontSize:'10px'}} onClick={()=>openChoosenModal('NEW_CONTACT')}className='add_new_Button' >\r\n                  Add New Contact\r\n                </Button>\r\n              </div>\r\n              <div className='sidebar_bottom'>\r\n                <Contacts newConversationCallback={()=> setChoosenAct('conversations')}  openModalCallback={()=>openChoosenModal('NEW_GROUP')}/>\r\n              </div>\r\n            </div>\r\n            :   \r\n            <div className='sidebar_bottom'><Conversations/></div>}\r\n           \r\n            <Modal  className='Modal' open={modalOpen} onClose={closeModal} >\r\n              <div>\r\n                {choosenModal === 'NEW_GROUP' ? \r\n                <CreateNewGroup closeModal={closeModal}  /> :\r\n                <AddNewContact closeModal={closeModal} /> } \r\n              </div>\r\n            </Modal>\r\n        </div>}\r\n\r\n      </div>\r\n    )\r\n}\r\n","import React, { useState ,useEffect} from 'react'\r\nimport {useUser } from '../contexts/userprovider'\r\nimport {useConversations } from '../contexts/conversationsprovider'\r\nimport {Avatar,IconButton} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport '../css/addnew.css'\r\n\r\nfunction AddGroupMember({closeModal}) \r\n{\r\n\r\n    const [selectedContactsId, setSelectedContactsId] = useState([])\r\n    const {contacts,info } = useUser()\r\n    const {UpdateConversation,selectedConversation} = useConversations()\r\n    const [conversationContacts,setConversationContacts]=useState([])\r\n\r\n  \r\n    //save ids of group participants so they wont show in add to group list\r\n    useEffect(() =>\r\n    { \r\n        let ids=[]\r\n        selectedConversation.Participants.forEach((participant)=>\r\n        {\r\n           ids.push(participant.id)\r\n        }) \r\n        setConversationContacts(ids)\r\n\r\n    },[selectedConversation.Participants])\r\n\r\n    function AddMember()\r\n    {\r\n        let newParticipants= []\r\n        newParticipants=selectedConversation.Participants\r\n        let messages=selectedConversation.Messages\r\n        let message=''\r\n\r\n        //add choosen contacts to group participants\r\n        contacts.forEach(contact=>\r\n        {\r\n            if(selectedContactsId.includes(contact.id))\r\n            {\r\n                newParticipants.push(contact)\r\n                message={name:\"manager\",message: info.name +\" added \" + contact.name + \" to the group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n                messages.push(message)\r\n            }\r\n\r\n        })\r\n\r\n        let updatedConversation={...selectedConversation,Participants:newParticipants,Messages:messages,LastMessage:message}\r\n        UpdateConversation(updatedConversation)\r\n        closeModal()\r\n\r\n    }\r\n\r\n    //on checkbox Click,if exists- remove from list,if not-add to list\r\n    function handleCheckboxChange(contactId) \r\n    {\r\n       \r\n        if(selectedContactsId.includes(contactId))\r\n        {\r\n            setSelectedContactsId(prevSelectedContactsId =>\r\n            {\r\n                return (prevSelectedContactsId.filter(id=> id!==contactId))\r\n            } )\r\n        }\r\n  \r\n        else\r\n        {\r\n           setSelectedContactsId(prevSelectedContactsId=>\r\n            {\r\n              return [...prevSelectedContactsId,contactId]\r\n            })\r\n        } \r\n\r\n    }\r\n\r\n    return (\r\n       <div className='add_new'>\r\n           <div className='add_new_group_border'>\r\n               <div className='new_conversation new_group'>\r\n                   <div style={{flex:'1'}} className='title_and_close'>\r\n                       <h2 className='add_contact_title' style={{marginLeft:'80px',paddingRight:'0px'}}>Select Members:</h2> \r\n                       <IconButton style={{marginLeft:'40px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                          <CloseIcon fontSize='large' /> \r\n                       </IconButton>\r\n                   </div>\r\n                   <div style={{overflowY:'overlay',height:'200px'}}>\r\n                       {contacts.map(contact =>\r\n                       {\r\n                         //show only user contacts that are not in the group\r\n                         if(!(conversationContacts.includes(contact.id)))\r\n                         {\r\n                           return(\r\n                               <div className='contact_item' >\r\n                                   <input type=\"checkbox\" value={selectedContactsId.includes(contact.id)}\r\n                                    id={contact.id} onChange={() => handleCheckboxChange(contact.id)}/>\r\n                                   <label style={{display:'flex',flexDirection:'row',alignItems:'center',width:'100%'}}for={contact.id} >\r\n                                      <Avatar  style={{margin:'5px'}} src={process.env.PUBLIC_URL + contact.imageName}   fontSize='large'/>\r\n                                      <h3 className='enter_phone' style={{marginLeft:'10px' ,fontWeight:'400'}}>{contact.name} </h3>\r\n                                   </label>\r\n                               </div>\r\n                            )}\r\n\r\n                         else return ''\r\n            \r\n                        }) } \r\n             \r\n                   </div>\r\n                   <div style={{display:'flex' , justifyContent:'center'}}>\r\n                        <button className='add_new_button'  type=\"submit\" onClick={()=>AddMember()}>Add</button>\r\n                   </div>\r\n\r\n               </div>\r\n           </div>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default AddGroupMember\r\n","import React from 'react'\r\nimport '../css/sidebar.css'\r\nimport axios from 'axios';\r\nimport { useState,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useUser } from '../contexts/userprovider';\r\nimport { Avatar ,IconButton,makeStyles,Modal} from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport Picker from 'emoji-picker-react';\r\nimport PersonAdd from '@material-ui/icons/PersonAdd';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport AddGroupMember from './addgroupmember';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      \"&:hover\": {\r\n        backgroundColor: \"transparent\"\r\n  \r\n      }}\r\n    });\r\n  \r\n\r\nfunction ShowGroupDetails() {\r\n\r\n    const {selectedConversation,createConversation,conversations,setSelectedConversation,UpdateConversation} = useConversations()\r\n    const [EditGroupNameGlag,setEditGroupNameGlag]=useState(false)\r\n    const [EditGroupDescriptionGlag,setEditGroupDescriptionGlag]=useState(false)\r\n    const [emojiFlag,setEmojiFlag]=useState(false)\r\n    const [Text,setText] = useState(selectedConversation.Name)\r\n    const [Description,setDescription] = useState(selectedConversation.description)\r\n    const {info} = useUser()\r\n    const classes = useStyles();\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const [dialogOpen, setDialogOpen] = useState(false)\r\n    const [deleteUserDialog,setDeleteUserDialog]= useState(false)\r\n    const [userToDelete,setUserToDelete] = useState()\r\n    const [previewImage,setPreviewImage]=useState(selectedConversation.ConversationImage)\r\n\r\n\r\n       \r\n    useEffect(()=>\r\n    {\r\n        setEditGroupNameGlag(false)\r\n        setEditGroupDescriptionGlag(false)\r\n        setEmojiFlag(false)\r\n\r\n    },[selectedConversation])\r\n  \r\n  \r\n    const onEmojiClick = (event, emojiObject) =>\r\n    {\r\n        setText(Text + emojiObject.emoji)\r\n    };\r\n  \r\n    const onDescriptionEmojiClick = (event, emojiObject) =>\r\n    {\r\n        setDescription(Description + emojiObject.emoji)\r\n    };\r\n  \r\n    function changeGroupName()\r\n    {\r\n        let message={name:\"manager\",message: info.name +\" changed group name to \" + Text,timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n        let messages=selectedConversation.Messages\r\n        messages.push(message)\r\n        let updatedConversation={...selectedConversation,Name:Text,Messages:messages,LastMasage:message}\r\n        UpdateConversation(updatedConversation)\r\n        setEditGroupNameGlag(false)\r\n    }\r\n  \r\n    function openConversation(participant)\r\n    {\r\n        let existsFlag=false\r\n\r\n        conversations.forEach(conversation=>\r\n        {\r\n            if(conversation.isGroup === false && conversation.Participants[0].id === participant.id)\r\n            {\r\n              existsFlag=true\r\n              setSelectedConversation(conversation)\r\n            }\r\n              \r\n        })\r\n\r\n        if(!existsFlag)\r\n        {\r\n            let participantId=[]\r\n            participantId.push(participant.id)\r\n            createConversation(participantId, participant.name, participant.imageName,false)\r\n        }\r\n        \r\n    }\r\n  \r\n    function changeGroupDescription()\r\n    {\r\n         let message={name:\"manager\",message: info.name +\" changed group Description\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n         let messages=selectedConversation.Messages\r\n         messages.push(message)\r\n         let updatedConversation={...selectedConversation,description:Description,Messages:messages,LastMessage:message}\r\n         UpdateConversation(updatedConversation)\r\n         setEditGroupDescriptionGlag(false)\r\n    }\r\n  \r\n    function removeFromGroup()\r\n    {\r\n       let message={name:\"manager\",message: info.name +\" left the group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n       let messages=selectedConversation.Messages\r\n       messages.push(message)\r\n       let updatedConversation={...selectedConversation,Messages:messages,LastMessage:message}\r\n       UpdateConversation(updatedConversation)\r\n       setDialogOpen(false)\r\n    }\r\n  \r\n    function beforeDeleteUser(participant)\r\n    {\r\n       setUserToDelete(participant)\r\n       setDeleteUserDialog(true)\r\n    }\r\n  \r\n    function removeUserFromGroup()\r\n    {\r\n       let messages=selectedConversation.Messages\r\n       let message={name:\"manager\",message: info.name +\" removed \" + userToDelete.name + \" from the group \",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n       messages.push(message)\r\n       let participants= selectedConversation.Participants.filter(participant=> participant.id !== userToDelete.id)\r\n       let updatedConversation={...selectedConversation,Participants:participants,Messages:messages,LastMessage:message}\r\n       UpdateConversation(updatedConversation)\r\n       setUserToDelete()\r\n       setDeleteUserDialog(false)\r\n    }\r\n  \r\n    function closeModal()\r\n    {\r\n       setModalOpen(false)\r\n    }\r\n\r\n    async function handleFileUpload(e)\r\n    {\r\n       setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n        let picturePath=''\r\n    \r\n        const data = new FormData()\r\n        data.append('file',e.target.files[0])\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n       \r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n          picturePath =response.data.url\r\n\r\n        }catch(err){console.log(err)}\r\n\r\n\r\n        let messages=selectedConversation.Messages\r\n        let message={name:\"manager\",message: info.name +\" changed group picture\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n        messages.push(message)\r\n        let updatedConversation={...selectedConversation,ConversationImage:picturePath,Messages:messages,LastMessage:message}    \r\n        UpdateConversation(updatedConversation)\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n           <div className='user_info'>\r\n              <div className='change_group_image'> \r\n                 <Avatar  src={previewImage} style={{height: '150px', width: '150px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}> </Avatar>\r\n                 <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white',curser:'pointer'}}>\r\n                    <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                    <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                    <span style={{fontSize:'10px'}}>Change Picture </span>\r\n                 </div>\r\n              </div>\r\n              <span className='name_and_lastSeen'>\r\n                {EditGroupNameGlag?\r\n                   <div style={{display:'flex',flexDirection:'column'}}>\r\n                     {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' ,height:'200px'}}/> : ''}\r\n                     <div className='edit_group_name'>\r\n                        <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeGroupName()}>\r\n                           <CheckIcon fontSize='large'/>\r\n                        </IconButton>\r\n                        <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setEmojiFlag(!emojiFlag)}>\r\n                            <InsertEmoticonIcon fontSize='large'/>\r\n                        </IconButton>\r\n                       <input className='input_text' defaultValue={Text} onChange={(e)=>setText(e.target.value)}></input>\r\n                     </div>\r\n                  </div>:\r\n                  <span className='group_title'>\r\n                     <h3>{selectedConversation.Name}</h3>\r\n                     <IconButton onClick={()=>setEditGroupNameGlag(true)}>\r\n                         <EditIcon style={{fontSize:'large',marginLeft:'10px'}}/>\r\n                     </IconButton>\r\n                  </span>}\r\n                \r\n                 <span className='lastSeen' style={{padding:'10px',paddingLeft:'0px'}}> created at:  {selectedConversation.createdDate} </span>\r\n              </span>\r\n            </div>\r\n\r\n            <div className='group_details_container'>\r\n               <h2 className='group_title' style={{padding:'5px'}}> Description </h2>\r\n              {EditGroupDescriptionGlag?\r\n                <div style={{display:'flex',flexDirection:'column'}}>\r\n                  {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onDescriptionEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' ,height:'200px'}}/> : ''}\r\n                  <div className='edit_group_name' style={{padding:'5px'}}>\r\n                    <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeGroupDescription()}>\r\n                        <CheckIcon fontSize='large'/>\r\n                     </IconButton>\r\n                    <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setEmojiFlag(!emojiFlag)}><InsertEmoticonIcon fontSize='large'/></IconButton>\r\n                    <input className='input_text' defaultValue={Description} onChange={(e)=>setDescription(e.target.value)} ></input>\r\n                  </div>\r\n                </div>:\r\n                <div className='group_description_edit'>\r\n                  <span style={{fontSize:'15px',marginRight:'5px'}}>\r\n                      {selectedConversation.description}\r\n                  </span>\r\n                  <IconButton onClick={()=>setEditGroupDescriptionGlag(true)}>\r\n                      <EditIcon style={{fontSize:'large'}}/>\r\n                  </IconButton>\r\n                </div>}\r\n             \r\n            </div>\r\n\r\n            <div className='group_details_container'>\r\n               <h2 className='group_title' style={{ padding:'10px' ,borderBottom:'1px solid #B0B0B0'}}>\r\n                   {selectedConversation.Participants.length +1} participants\r\n               </h2>\r\n               <Modal className='Modal' open={modalOpen} onClose={closeModal} >\r\n                  <AddGroupMember closeModal={closeModal}  /> \r\n               </Modal>\r\n\r\n               {selectedConversation.creatorId===sessionStorage['id']?\r\n                   <div className='participant' style={{cursor:'pointer',fontSize:'15px'}} onClick={()=>setModalOpen(true)} >\r\n                      <Avatar>\r\n                         <IconButton className={classes.root} style={{padding:'3px'}}>\r\n                            <PersonAdd fontSize='large'/>\r\n                         </IconButton>\r\n                      </Avatar>\r\n                      <h3 className='group_participant_name'>Add Member</h3>\r\n                   </div>:''}\r\n\r\n               {selectedConversation.Participants.map((participant,index)=>\r\n               {\r\n                  return(\r\n                   <div  key={index} className='participant' >\r\n                     <div onClick={()=>openConversation(participant)} style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center',cursor:'pointer'}}>\r\n                         <Avatar src={participant.imageName}/>\r\n                         <div  style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center'}}>\r\n                           <h3 className='group_participant_name'>{participant.name}</h3>\r\n                           {participant.id===selectedConversation.creatorId?\r\n                             <div className='group_admin'>\r\n                                <h3 style={{fontSize:'13px'}}>Group Manager</h3>\r\n                             </div>\r\n                           :''}\r\n                         </div >\r\n                     </div>\r\n                     {sessionStorage['id'] === selectedConversation.creatorId?\r\n                        <IconButton  onClick={()=>beforeDeleteUser(participant)} style={{padding:'3px'}}>\r\n                          <CloseIcon fontSize='medium'/>\r\n                        </IconButton>\r\n                     :''}\r\n                   </div>)\r\n                })}\r\n\r\n                <div  className='participant'>\r\n                   <div style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center'}}>\r\n                     <Avatar src={info.imageName}/>\r\n                     <div style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center'}}>\r\n                         <h3 className='group_participant_name'>{info.name}</h3>\r\n                         {sessionStorage['id']===selectedConversation.creatorId?\r\n                           <div className='group_admin'>\r\n                               <h3 style={{fontSize:'13px'}}>Group Manager</h3>\r\n                           </div>\r\n                          :''}\r\n                     </div >\r\n                   </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='group_details_container leave' onClick={()=>setDialogOpen(true)} >\r\n                <div className='leaveGroup'>\r\n                    <IconButton className={classes.root} style={{padding:'3px'}} >\r\n                      <ExitToAppIcon style={{color:'darkred'}}fontSize='large'/>\r\n                    </IconButton>\r\n                     <h3 className='group_participant_name' style={{color:'darkRed',fontSize:'17px'}}>leave Group</h3>\r\n                </div>\r\n            </div>\r\n\r\n            <Dialog className='exit_group_dialog' onClose={()=> setDialogOpen(false)}  open={dialogOpen}>\r\n               <div style={{padding:'10px'}}>\r\n                 <h2 className='dialog_title'> are you sure you want to leave this group?</h2>\r\n                 <div className='dialog_options_buttons'>\r\n                   <button className='dialog_button' onClick={()=>removeFromGroup()} >yes</button>\r\n                   <button className='dialog_button' onClick={()=>setDialogOpen(false)}>no</button>\r\n                 </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n\r\n            <Dialog className='exit_group_dialog' onClose={()=> setDeleteUserDialog(false)}  open={deleteUserDialog}>\r\n               <div style={{padding:'10px'}}>\r\n                 <h2 className='dialog_title'> are you sure you want to delete this user?</h2>\r\n                 <div className='dialog_options_buttons'>\r\n                   <button className='dialog_button' onClick={()=>removeUserFromGroup()} >yes</button>\r\n                   <button className='dialog_button' onClick={()=>setDeleteUserDialog(false)}>no</button>\r\n                 </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowGroupDetails\r\n","import React from 'react'\r\nimport {useState} from 'react'\r\nimport {useConversations } from '../contexts/conversationsprovider';\r\nimport {Avatar} from '@material-ui/core'\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nfunction ShowUserDetails({privateConversationHeader}) {\r\n\r\n    const {selectedConversation} = useConversations()\r\n    const [pictureDialogOpen,setPictureDialogOpen]=useState(false)\r\n\r\n\r\n    return (\r\n\r\n        <div className='user_info'>\r\n           <div onClick={()=>setPictureDialogOpen(true)}>\r\n               <Avatar  src={selectedConversation.ConversationImage} style={{margin:'20px',height:'150px',width:'150px'}}/>\r\n           </div>\r\n\r\n           <Dialog className='open_picture_dialog' onClose={()=> setPictureDialogOpen(false)}  open={pictureDialogOpen}>\r\n              <img src={selectedConversation.ConversationImage} alt=''/>\r\n           </Dialog>\r\n\r\n     \r\n           <span className='name_and_lastSeen' style={{paddingBottom:'0px'}}>\r\n              {console.log('here')}\r\n              <span className='group_title'>\r\n                 <h3>{selectedConversation.Name}</h3>\r\n              </span>\r\n     \r\n              <span className='lastSeen' style={{padding:'10px',paddingLeft:'0px'}}>\r\n                  {privateConversationHeader()}\r\n              </span>\r\n           </span>\r\n       \r\n      </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ShowUserDetails\r\n","import {useState} from 'react'\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nfunction Message({sender,message}) \r\n{\r\n  const [modalOpen,setModalOpen] = useState(false)\r\n  const [SelectedImageURL,setSelectedImageURL] =useState(null)\r\n\r\n  function openImage(URL)\r\n  {\r\n    setModalOpen(true)\r\n    setSelectedImageURL(URL)  \r\n  }\r\n\r\n  return (\r\n\r\n    <div className={sender}>  \r\n      <div className='message' >\r\n        <div className='image_and_sender'>\r\n          <div className='sender'>\r\n           {message.name}\r\n          </div>\r\n          {message.containsImage? \r\n          <img className='image_in_message' src={message.imageURL} alt='' onClick={()=>openImage(message.imageURL)} width='200px' height='200px' /> \r\n           : ''}\r\n        </div>\r\n        <div>\r\n          <div className='message_and_time'>\r\n            <div className='message_content'>{message.message}</div> \r\n            <div className='message_time_border'>\r\n              <div className='message_time'>\r\n                {(message.timeSent).substring(11,17)}\r\n              </div>\r\n            </div>\r\n          </div> \r\n        </div>\r\n\r\n        <Dialog onClose={()=> setModalOpen(false)}  open={modalOpen}>\r\n          <img src={SelectedImageURL} alt=''/>\r\n        </Dialog>\r\n      </div>\r\n    </div> \r\n  )}\r\n\r\nexport default Message\r\n\r\n","import React from 'react'\r\nimport { Avatar } from '@material-ui/core'\r\nimport '../css/audiomessage.css'\r\n\r\nfunction AudioMessage({message,sender,image})\r\n{\r\n\r\n  const messageColor = sender.includes('chat_reciever')?  'reciever':'sender' \r\n\r\n  return (\r\n    \r\n    <div className={sender}>  \r\n      <div className='message_with_audio'>\r\n        <div className={messageColor}>\r\n            {sender === \"message_out\"?\r\n            <div className='audio_and_avatar'> \r\n                <audio   controls controlsList=\"nodownload\" >\r\n                  <source src={message.recordURL} type=\"audio/mp3\"/>\r\n                </audio>\r\n                <Avatar src={image} style={{ height: '50px', width: '50px',margin:'5px' }}/>\r\n            </div>\r\n               :\r\n            <div className='audio_and_avatar'> \r\n                <Avatar src={image} style={{ height: '50px', width: '50px',margin:'5px' }}/>\r\n                <audio   controls controlsList=\"nodownload\" >\r\n                  <source src={message.recordURL} type=\"audio/mp3\"/>\r\n                </audio>\r\n            </div>}\r\n            <span className='message_time'>{(message.timeSent).substring(11,17)}</span> \r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default AudioMessage\r\n","import React from 'react'\r\nimport {useState ,useCallback,useEffect,useRef} from 'react'\r\nimport {useConversations} from '../contexts/conversationsprovider';\r\nimport {useSocket} from '../contexts/socketprovider';\r\nimport {useUser} from '../contexts/userprovider';\r\nimport {IconButton,Dialog } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Picker from 'emoji-picker-react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\nimport axios from 'axios'\r\nimport Message from './message';\r\nimport AudioMessage from './audiomessage';\r\n\r\n\r\nfunction ChatBody(props) {\r\n\r\n  const [Text,setText] = useState('')\r\n  const {socket} = useSocket()\r\n  const {info} = useUser()\r\n  const {sendMessage,selectedConversation,removedFromGroupFlag,setRemovedFromGroupFlag,setSelectedConversation} = useConversations()\r\n  const inputRef = useRef(null)\r\n  const [emojiFlag,setEmojiFlag] = useState(false)\r\n  const [recordFlag,setRecordFlag] =useState(false)\r\n  const {startRecording,stopRecording,mediaBlobUrl,clearBlobUrl} = useReactMediaRecorder({audio: true })\r\n  const [audioBlob,setAudioBlob] = useState(null)\r\n\r\n  //make messages scrolling down when message sent\r\n  const setRef = useCallback((node) => \r\n  {\r\n    if(node)\r\n      node.scrollIntoView({smooth:true})\r\n\r\n  },[])\r\n  \r\n  useEffect(()=>\r\n  {\r\n    setEmojiFlag(false)\r\n\r\n  },[selectedConversation])\r\n\r\n  \r\n\r\n  //when audio message sent, upload it to cloudinary and send it to conversation participants\r\n  useEffect( () => \r\n  {\r\n\r\n    async function fetchData() \r\n    {\r\n      if(audioBlob != null)\r\n      {\r\n        let audio= await fetch(mediaBlobUrl).then(res=> res.blob())\r\n        const data = new FormData();\r\n           \r\n        data.append('file', audio);\r\n        data.append('resource_type', 'video');\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n\r\n\r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/video/upload\",data)\r\n          let recordURL = response.data.url\r\n          recordURL=(recordURL.slice(0,-4))\r\n          recordURL+= 'mp3'\r\n          setRecordFlag(false)\r\n          clearBlobUrl()\r\n          sendMessage(Text,null,null,recordURL)\r\n          setRecordFlag(false)\r\n  \r\n        }catch(err){console.log(err)}\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n \r\n  },[audioBlob])\r\n\r\n\r\n  //when typing, let conversation participants know\r\n  function typing(e)\r\n  {\r\n\r\n    setText(e.target.value)\r\n    if (socket.current == null) return;\r\n      socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n\r\n  }\r\n\r\n\r\n  //send message to conversation participants\r\n  function handleSubmit(e)\r\n  {\r\n    e.preventDefault()\r\n    sendMessage(Text,false,null,null)\r\n    setText(' ')\r\n\r\n  }\r\n\r\n\r\n  //upload image to cloudinary\r\n  async function handleImage(e)\r\n  {\r\n\r\n    const data = new FormData()\r\n    data.append('file',e.target.files[0])\r\n    data.append(\"upload_preset\",\"whatsApp_clone\")\r\n    data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n    try\r\n    {\r\n\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n      props.imageCallback(response.data.url)\r\n      }catch(err){console.log(err)}\r\n\r\n    }\r\n\r\n\r\n  //when record start\r\n  function recordStart()\r\n  {\r\n\r\n    setRecordFlag(true)\r\n    startRecording()\r\n\r\n  }\r\n \r\n  //when record sent\r\n  async function handleRecord()\r\n  {\r\n    stopRecording()\r\n    let res = await fetch(mediaBlobUrl)\r\n    setAudioBlob(res.blob())     \r\n  }\r\n\r\n\r\n  //when record canceled\r\n  function cancelRecord()\r\n  {\r\n    stopRecording()\r\n    clearBlobUrl()\r\n    setRecordFlag(false)\r\n  }\r\n\r\n\r\n  //when recording, show recording div\r\n  function updateRecordingDiv()\r\n  {\r\n    let recordDiv = \r\n    <div>\r\n      <IconButton>\r\n        <CloseIcon fontSize='large' style={{color:'red'}} onClick={cancelRecord} />\r\n      </IconButton>\r\n      <IconButton>\r\n        <CheckIcon fontSize='large'style={{color:'green'}} onClick={handleRecord} />\r\n      </IconButton>\r\n    </div>\r\n\r\n    return recordDiv\r\n  \r\n  }\r\n\r\n  //if removed from group when group chat is on, dont show this group chat\r\n  function handleRemovedFromGroup()\r\n  {\r\n\r\n    setRemovedFromGroupFlag(false)\r\n    setSelectedConversation()\r\n\r\n  }\r\n    \r\n\r\n  //add emoji to message\r\n  const onEmojiClick = (event, emojiObject) => \r\n  {\r\n    setText(Text + emojiObject.emoji)\r\n  };\r\n\r\n\r\n\r\n  return(\r\n\r\n    <div className= 'body_and_footer'>\r\n        <div className='chat_body'>\r\n\r\n          {selectedConversation.Messages.map((message,index)=>\r\n          {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender= ''\r\n            sender= message.name==='manager'? 'manager':( message.id===sessionStorage['id']? 'message_out' : 'message_in')\r\n            let image=message.id===sessionStorage['id']? info.imageName :selectedConversation.ConversationImage\r\n            let choosenClass = sender==='message_in'? 'chat_message chat_sender': ' chat_message chat_reciever'\r\n\r\n            return (\r\n              <div key={index}>\r\n                {sender === 'manager'?\r\n                <div className='around_message'ref={lastMessage ? setRef : null}>\r\n                  <div className='manager_message'>\r\n                     <span className='message_content'>{message.message}</span>\r\n                  </div>\r\n                </div>\r\n                :\r\n                <div key={index} className={choosenClass} ref={lastMessage ? setRef : null}>\r\n                  {message.containsRecord ? \r\n                  <AudioMessage message={message} sender={sender} image={image}/> : <Message  sender={sender} message={message}/>}\r\n                </div> }\r\n              </div>\r\n            )}\r\n          )}\r\n\r\n        </div>\r\n\r\n        <div className='chat_footer_with_stickers'>\r\n           {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n            <div className='chat_footer'>\r\n              {emojiFlag? <IconButton  onClick={()=>setEmojiFlag(false)}><CloseIcon fontSize='large'/> </IconButton>:''}\r\n              <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n                 <InsertEmoticonIcon fontSize='large'/>\r\n              </IconButton>\r\n              <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n              <label htmlFor=\"icon-button-file\">\r\n                <IconButton component=\"span\">\r\n                  <ImageIcon  fontSize='large'/>\r\n                </IconButton>\r\n              </label> \r\n              <form onSubmit={handleSubmit} className='message_section'>\r\n                 <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n                 <button type='submit' > send </button>\r\n              </form>\r\n              {recordFlag? updateRecordingDiv() :   \r\n              <IconButton onClick={recordStart}>\r\n                <MicIcon fontSize='large'  />\r\n              </IconButton>}\r\n            </div>\r\n        </div>\r\n        <Dialog className='exit_group_dialog'  open={removedFromGroupFlag}>\r\n          <div style={{padding:'10px'}}>\r\n            <h2 className='dialog_title'> you where removed from this group</h2>\r\n              <div className='dialog_options_buttons'>\r\n                <button className='dialog_button' onClick={()=>handleRemovedFromGroup()} >ok</button>\r\n              </div>\r\n          </div>\r\n        </Dialog> \r\n\r\n    </div>    \r\n)}\r\n\r\nexport default ChatBody\r\n","import '../css/chat.css'\r\nimport '../css/sendimagebody.css'\r\nimport React, { useRef } from 'react'\r\nimport {useState} from 'react'\r\nimport {useConversations } from '../contexts/conversationsprovider';\r\nimport {useSocket} from '../contexts/socketprovider';\r\nimport {useUser} from '../contexts/userprovider';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {IconButton } from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nfunction SendImageBody(props) \r\n{\r\n\r\n  const inputRef = useRef(null)\r\n  const [Text,setText] = useState('')\r\n  const {socket} = useSocket()\r\n  const {info} = useUser()\r\n  const {sendMessage,selectedConversation} = useConversations()\r\n\r\n  function handleSubmit(imageFlag)\r\n  {\r\n\r\n    if(imageFlag===true)\r\n      sendMessage(Text,true,props.imageURL)\r\n\r\n    setText(' ')\r\n    props.backToChat()\r\n\r\n  }\r\n\r\n  function typing(e)\r\n  {\r\n\r\n    setText(e.target.value)\r\n\r\n    if (socket.current == null) return;\r\n      socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n\r\n  }\r\n\r\n    return (\r\n      <div className='SendImage'>\r\n        <div className='sendImageHeader'></div>\r\n          <IconButton type='submit' onClick={()=>handleSubmit(false)}>\r\n            <CloseIcon fontSize='large' /> \r\n          </IconButton>\r\n          <img src= {props.imageURL} alt='' height='300px' width='300px'/>\r\n          <div className='add_message'>\r\n            <form onSubmit={()=>handleSubmit(true)} className='message_section'>\r\n              <IconButton type='submit' style={{flex:'0.1'}}>\r\n                <SendIcon fontSize='large'/>\r\n              </IconButton>\r\n              <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n            </form>\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default SendImageBody\r\n","import '../css/chat.css'\r\nimport '../css/sidebar.css'\r\nimport React from 'react'\r\nimport ShowGroupDetails from './showgroupdetails'\r\nimport ShowUserDetails from './showuserdetails'\r\nimport { useState} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { Avatar ,IconButton} from '@material-ui/core'\r\nimport ChatBody from './chatbody';\r\nimport SendImageBody from './sendimagebody';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default function Chat() \r\n{\r\n\r\n  const {selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag,showDetails,setShowDetails} = useConversations()\r\n  const [imageFlag,setImageFlag] =useState(false)\r\n  const [imageURL,setImageURL] =useState(false)\r\n\r\n  //check if user is connected/disconnected/typing\r\n  const privateConversationHeader = () =>\r\n  {\r\n  \r\n    let returnValue = ''\r\n    if(currentConversationIsConnected === '')\r\n    {\r\n      if(typingFlag !== '')\r\n      {\r\n        returnValue = <div className='lastSeen'> typing...</div>\r\n        setTimeout(()=> setTypingFlag(''),1000)\r\n      }\r\n  \r\n      else returnValue = <div className='connected'><div className='circle'></div> online </div>\r\n              \r\n    }\r\n  \r\n    else returnValue = <div className='lastSeen'>{currentConversationIsConnected}</div>\r\n  \r\n  \r\n    return returnValue\r\n  \r\n  }\r\n\r\n  const groupheader = () =>\r\n  {\r\n\r\n    let returnValue = ''\r\n    if(typingFlag !== '')\r\n    {\r\n      returnValue = <div className='lastSeen'> {typingFlag} is typing...</div>\r\n      setTimeout(()=> setTypingFlag(''),1000)\r\n    }\r\n\r\n    else\r\n    {\r\n\r\n      let UsersInGroup = ''\r\n\r\n      selectedConversation.Participants.forEach((participant,index)=> \r\n      {\r\n        if(index ===  selectedConversation.Participants.length-1 )\r\n          UsersInGroup = UsersInGroup + participant.name\r\n        else\r\n          UsersInGroup= UsersInGroup + participant.name + ', '\r\n      })\r\n            \r\n      returnValue=  <div className='lastSeen'>{UsersInGroup} </div>\r\n\r\n    }\r\n\r\n    return returnValue\r\n  }\r\n\r\n  function chatBodyCallback(image)\r\n  {\r\n    setImageURL(image)\r\n    setImageFlag(true)\r\n  }\r\n\r\n  function backToChatCallback()\r\n  {\r\n    setImageURL(null)\r\n    setImageFlag(false)\r\n  }\r\n\r\n\r\n  const chatSide=\r\n    <div>\r\n      <div className='chat_header' onClick={()=>setShowDetails(true)}>\r\n        <Avatar src={selectedConversation.ConversationImage}/>\r\n        <div className='chat_header_info'>\r\n          <h2 style={{fontSize:'20px'}}> {selectedConversation.Name} </h2> \r\n          {selectedConversation.isGroup?  groupheader() : privateConversationHeader()}\r\n        </div>\r\n      </div>\r\n      {imageFlag? <SendImageBody imageURL={imageURL} backToChat={backToChatCallback}/>:<ChatBody imageCallback={chatBodyCallback}/>} \r\n    </div>\r\n\r\n\r\n  return (\r\n       \r\n    showDetails?\r\n      <div className='chat_with_details'>\r\n        <div className='chat narrow_chat'>\r\n          {chatSide}\r\n        </div>\r\n\r\n        <div className='chat_details'>\r\n          <div className='chat_details_top '>\r\n            <IconButton onClick={()=>setShowDetails(false)}>\r\n              <CloseIcon fontSize='large'  />\r\n            </IconButton>\r\n            <h2 style={{paddingLeft:'10px',fontSize:'22px'}}>{selectedConversation.isGroup? 'Group Details:' : 'Contact Details:' }</h2>\r\n          </div>\r\n\r\n          <span className='chat_details_body'>\r\n              {selectedConversation.isGroup? <ShowGroupDetails/>: <ShowUserDetails privateConversationHeader={privateConversationHeader}/>}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      :\r\n      <div className='chat'>\r\n        {chatSide}\r\n      </div>\r\n\r\n          \r\n    )\r\n}\r\n","import '../css/dashboard.css'\r\nimport React from 'react'\r\nimport SideBar from './sidebar'\r\nimport Chat from './chat'\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nexport default withRouter(function Dashboard({id}) {\r\n    const {selectedConversation} =useConversations()\r\n\r\n    return (\r\n        <div className='dashboard'>\r\n            <div className='dashboard_body'>\r\n              <SideBar/>\r\n              {selectedConversation!==undefined?  <Chat id={id}  />: ''}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import {useState} from 'react'\r\nimport '../css/login.css'\r\nimport axios from 'axios'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport {Avatar} from '@material-ui/core';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\n\r\n \r\n\r\nfunction Register(props)\r\n{\r\n\r\n  const[phone,setPhone] =useState('')\r\n  const[name,setName] =useState('')\r\n  const [Picture,setPicture] =useState(null)\r\n  const history=useHistory();\r\n  const [error,setError] =useState('')\r\n  const [previewImage,setPreviewImage]=useState()\r\n\r\n  //get user information and token from DB\r\n  async function handleSubmit(e)\r\n  {\r\n    e.preventDefault();\r\n        \r\n    let picturePath=''\r\n\r\n    if(Picture)\r\n    {\r\n      const data = new FormData()\r\n      data.append('file',Picture)\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n       \r\n      try\r\n      {\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n        picturePath =response.data.url\r\n\r\n      }catch(err){console.log(err)}\r\n\r\n    }\r\n        \r\n    let obj = {name:name,phone:phone,imageName:picturePath,contacts:[],LastSeen:'last seen at...',Status:\"hello,i'm using Message-App!\"}\r\n\r\n    try{\r\n         const response = await axios.post(\"https://messagesapp1.herokuapp.com/api/logIn/Register\",obj)\r\n         if(response.data.status === 'error')\r\n         {\r\n            setError(response.data.message)\r\n         }\r\n\r\n         else\r\n          {\r\n            sessionStorage['config']= response.data.token \r\n            sessionStorage['id'] = response.data.User._id\r\n            sessionStorage['name'] = response.data.User.name\r\n            props.CanLogIn(response.data.User._id)\r\n\r\n            history.push('/App')\r\n          }\r\n        }catch(err){console.log(err)}     \r\n  }\r\n        \r\n\r\n  function handleFileUpload(e) \r\n  {\r\n\r\n    setPicture(e.target.files[0])\r\n    setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"overlay\">\r\n      <form className='login_form' onSubmit={handleSubmit}>\r\n         <div className=\"con\">\r\n            <header className=\"head-form\"  style={{marginBottom:'0px', paddingBottom:'0px'}}>\r\n              <h2>Register</h2>\r\n              <p>welcome to  my whatsApp</p>\r\n            </header>\r\n            <div className=\"field-set\">\r\n             {previewImage?\r\n               <div className='change_group_image'> \r\n                    <Avatar  src={previewImage} style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}> </Avatar>\r\n                    <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white',curser:'pointer'}}>\r\n                      <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                      <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                      <span style={{fontSize:'10px'}}>Change Picture </span>\r\n                    </div>\r\n                </div>\r\n           \r\n              :\r\n              <div className='add_Profile_Picture'>\r\n                <Avatar   style={{height: '140px', width: '140px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}>\r\n                  <PeopleAltIcon style={{position:'absolute',zIndex:'0', opacity:'0.1',height: '80px', width: '80px' }}/>\r\n                  <div  style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white',curser:'pointer'}}>\r\n                    <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                    <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                    <span style={{fontSize:'10px'}}>Add Profile Picture</span>\r\n                  </div>\r\n                </Avatar>\r\n              </div> }\r\n              <span className=\"input-item\">\r\n                <i class=\"fa fa-user-circle\"></i>\r\n                <input className=\"form-input\" id=\"txt-input\" type=\"text\" placeholder=\"@UserName\" onChange={(e)=> setName(e.target.value)} required />\r\n              </span>\r\n              <span className=\"input-item\">\r\n                <i class=\"fa fa-key\"></i>\r\n                <input className=\"form-input\" type=\"password\" placeholder=\"Password\" id=\"pwd\"  name=\"password\" onChange={(e)=> setPhone(e.target.value)} required/>\r\n              </span>\r\n              <button className=\"log-in\" type='submit'> Register </button>\r\n            </div>\r\n            <div>\r\n              <Link  className=\"submits sign-up defaultLink\" to={`/`}>    <i style={{margin:'7px'}}class=\"fa fa-user-plus\" aria-hidden=\"true\"/>back to Log In</Link>\r\n            </div>\r\n            <span style={{fontSize:'15px'}}>{error}</span>\r\n          </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Register\r\n","import {useState} from 'react'\nimport LogIn from './login'\nimport Dashboard from './dashboard'\nimport {UserProvider} from '../contexts/userprovider'\nimport {ConversationsProvider} from '../contexts/conversationsprovider'\nimport { SocketProvider } from '../contexts/socketprovider'\nimport {BrowserRouter as Router,Switch, Route,Redirect} from 'react-router-dom'\nimport Register from './register'\nimport '../css/app.css'\n\n\nfunction App() \n{\n\n  const [id,setId] =useState()\n\n  const dashboard = (\n   <SocketProvider userId={id} >\n     <UserProvider id={id}>\n      <ConversationsProvider >\n        <Dashboard  id={id}/>\n      </ConversationsProvider>\n     </UserProvider>\n    </SocketProvider>\n  )\n\n  return (\n\n    <Router >\n      <div className=\"App\">\n         <Switch>\n           {sessionStorage['id']}\n            <Route exact path='/' > <LogIn CanLogIn={setId}/></Route> \n            <Route path='/Register' > <Register CanLogIn={setId}/></Route>\n            {sessionStorage['id']?  <Route exact path='/App' > {dashboard} </Route>:<Redirect to=\"/\" />}\n         </Switch>\n  \n      </div>\n\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}