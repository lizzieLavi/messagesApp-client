{"version":3,"sources":["components/login.js","contexts/userprovider.js","contexts/socketprovider.js","contexts/conversationsprovider.js","components/conversations.js","components/contacts.js","components/addnewcontact.js","components/createnewgroup.js","components/sidebar.js","components/message.js","components/audiomessage.js","components/chatbody.js","components/sendimagebody.js","components/chat.js","components/dashboard.js","components/register.js","components/App.js","index.js"],"names":["LogIn","props","useState","phone","setPhone","UserName","setUserName","Error","setError","history","useHistory","e","a","preventDefault","obj","name","axios","post","response","data","sessionStorage","token","User","_id","CanLogIn","push","class","className","onSubmit","id","type","placeholder","onChange","target","value","required","to","UserContext","React","createContext","useUser","useContext","UserProvider","children","contacts","setContacts","info","setInfo","config","getContacts","get","imageName","LastSeen","useEffect","then","res","fetchData","createContact","console","log","filter","contact","length","newContacts","UpdatedUser","put","Provider","getSearchContacts","str","SearchResult","includes","SocketContext","useSocket","SocketProvider","userId","socket","useRef","ConnectedUsers","setConnectedUsers","current","io","emit","on","users","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversation","setSelectedConversation","RefConversations","currentConversationRef","createGroupFlag","setCreateGroupFlag","typingFlag","setTypingFlag","currentConversationIsConnected","setCurrentConversationIsConnected","headers","audio","Audio","getConversations","ConversationsList","map","conversation","UpdatedConversation","Participants","Name","ConversationImage","image","ids","isGroup","ConversationExists","find","participants","FormData","append","secure","url","newConversation","creatorId","Messages","LastMessage","sender","message","Response","status","prevConversations","user","conversationId","some","addMessageToConversation","useCallback","UpdatedConv","play","newListOfConversations","newConv","off","sendMessage","text","imageFlag","imageURL","recordURL","parts","Intl","DateTimeFormat","hc","year","month","day","hour","minute","timeZone","formatToParts","Date","reduce","acc","part","Object","create","time","recordFlag","CurrentMessage","timeSent","containsImage","containsRecord","AddMessage","newListOfConcversations","updateSenderConversation","createConversation","getSearchConverastions","Conversations","index","onClick","handleSelectedConversation","Avatar","src","process","slice","Contacts","newConversationCallback","openModalCallback","Button","style","height","margin","fontSize","startConversation","AddNewContact","closeModal","phoneRef","IconButton","ref","CreateNewGroup","selectedContactsId","setSelectedContactsId","groupName","setGroupName","groupImage","setGroupImage","previewImage","setPreviewImage","goToParticipants","setGoToParticipants","handleFileUpload","files","window","URL","createObjectURL","width","backgroundColor","display","flexDirection","alignItems","position","zIndex","color","opacity","accept","padding","justifyContent","overflowY","marginRight","contactId","prevSelectedContactsId","fontWeight","SideBar","choosenAct","setChoosenAct","modalOpen","setModalOpen","searchFlag","setSearchFlag","choosenModal","setChoosenModal","openChoosenModal","modalType","Modal","open","onClose","Message","SelectedImageURL","setSelectedImageURL","alt","substring","Dialog","AudioMessage","messageColor","controls","controlsList","ChatBody","Text","setText","inputRef","emojiFlag","setEmojiFlag","setRecordFlag","useReactMediaRecorder","startRecording","stopRecording","mediaBlobUrl","clearBlobUrl","audioBlob","setAudioBlob","setRef","node","scrollIntoView","smooth","imageCallback","handleRecord","fetch","blob","cancelRecord","lastMessage","onEmojiClick","emojiObject","event","emoji","pickerStyle","visibility","htmlFor","component","Conversation","SendImageBody","handleSubmit","backToChat","Chat","setImageFlag","setImageURL","returnValue","setTimeout","UsersInGroup","forEach","participant","groupheader","privateConversationHeader","withRouter","undefined","Register","setName","Picture","setPicture","picturePath","rel","href","App","setId","dashboard","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wZAQe,SAASA,EAAMC,GAE1B,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA+BF,mBAAS,IAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAAyBJ,mBAAS,IAAlC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAQC,cANmB,4CAWjC,WAA4BC,GAA5B,iBAAAC,EAAA,6DAEIJ,EAAS,IACTG,EAAEE,iBACEC,EAAM,CAACC,KAAMV,EAASF,MAAOA,GAJrC,SAKyBa,IAAMC,KAAK,+CAA+CH,GALnF,OAOyB,eAFjBI,EALR,QAOgBC,MAETC,eAAc,OAAYF,EAASC,KAAKE,MACxCD,eAAc,GAASF,EAASC,KAAKG,KAAKC,IAC1CH,eAAc,KAAWF,EAASC,KAAKG,KAAKP,KAC5Cd,EAAMuB,SAASN,EAASC,KAAKG,KAAKC,KAElCd,EAAQgB,KAAK,SAIbjB,EAAS,4DAlBhB,4CAXiC,sBAkCjC,OAEI,qBAAKkB,MAAM,UAAX,SAEE,sBAAMC,UAAU,aAAaC,SAtCF,4CAsC3B,SACE,sBAAKF,MAAM,MAAX,UACE,yBAAQA,MAAM,YAAd,UACE,wCACA,2DAEJ,sBAAKA,MAAM,YAAX,UACE,uBAAMA,MAAM,aAAZ,UACE,mBAAGA,MAAM,sBAEX,uBAAOA,MAAM,aAAaG,GAAG,YAAYC,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACrB,GAAD,OAAML,EAAYK,EAAEsB,OAAOC,QAAQC,UAAQ,OAGlI,uBAAMT,MAAM,aAAZ,UACA,mBAAGA,MAAM,cAET,uBAAOA,MAAM,aAAaI,KAAK,WAAWC,YAAY,WAAWF,GAAG,MAAOd,KAAK,WAAWiB,SAAU,SAACrB,GAAD,OAAMP,EAASO,EAAEsB,OAAOC,QAAQC,UAAQ,OAE7I,wBAAQR,UAAU,SAASG,KAAK,SAAhC,yBAGD,8BAED,yBAAQH,UAAU,sBAAlB,UAAwC,cAAC,IAAD,CAAMA,UAAU,cAAcS,GAAE,YAAhC,qBACxC,mBAAGV,MAAM,kBAAkB,cAAY,cAGvCnB,S,8ICtEN8B,EAAcC,IAAMC,gBAEnB,SAASC,IACd,OAAOC,qBAAWJ,GAGZ,SAASK,EAAT,GACP,IAD+BC,EAChC,EADgCA,SAE9B,EAAgCzC,mBAAS,IAAzC,mBAAO0C,EAAP,KAAiBC,EAAjB,KACA,EAAsB3C,mBAAS,IAA/B,mBAAO4C,EAAP,KAAYC,EAAZ,KACMC,EAAQ,CAAC,QAAW,CAAC,iBAAiB5B,eAAc,SAH5D,SAiBkB6B,IAjBlB,2EAiBG,4BAAArC,EAAA,sEAEwBI,IAAMkC,IAAI,gDAAgD9B,eAAc,GAAO4B,GAFvG,cAEO9B,EAFP,OAGC6B,EAAQ,CAAClB,GAAGX,EAASC,KAAKI,IAAIR,KAAKG,EAASC,KAAKJ,KAAKZ,MAAMe,EAASC,KAAKhB,MAAMgD,UAAUjC,EAASC,KAAKgC,UAAUC,SAASlC,EAASC,KAAKiC,WAH1I,kBAIQlC,EAASC,KAAKyB,UAJtB,4CAjBH,sBAMGS,qBAAW,WACX,4CACC,sBAAAzC,EAAA,sDAEAqC,IAAcK,MAAK,SAAAC,GAAG,OAAGV,EAAYU,MAFrC,4CADD,uBAAC,WAAD,wBAMCC,KAEC,CAACT,IAqBJ,IAAMU,EAAa,uCAAG,WAAMtD,GAAN,qBAAAS,EAAA,yDAGjBT,IAAU2C,EAAK3C,MAHE,uBAKlBuD,QAAQC,IAAI,qBALM,6BAWQ,IAFRf,EAASgB,QAAO,SAAAC,GAAO,OAAGA,EAAQ1D,QAAUA,KAE/C2D,OAXG,uBAalBJ,QAAQC,IAAI,kBAbM,oDAmBI3C,IAAMkC,IAAI,2DAA6D/C,EAAM6C,GAnBjF,WAqBF,kBAFV9B,EAnBY,gCAuBX2C,EAAU,CAAChC,GAAGX,EAASC,KAAKI,IAAIpB,MAAMe,EAASC,KAAKhB,MAAMY,KAAKG,EAASC,KAAKJ,KAAKoC,UAAUjC,EAASC,KAAKgC,WAC5GY,EAxBa,sBAwBKnB,GAxBL,CAwBciB,IAC/BhB,EAAYkB,GACRC,EA1Ba,2BA0BGlB,GA1BH,IA0BQF,SAASmB,IA1BjB,oBA4BT/C,IAAMiD,IAAI,gDAAkD7C,eAAc,GAAO4C,EAAY,CAAC,QAAW,CAAC,iBAAiB5C,eAAc,UA5BhI,2DA6BJsC,QAAQC,IAAR,MA7BI,gCA+BbD,QAAQC,IAAI,qBA/BC,0DAiCPD,QAAQC,IAAR,MAjCO,kEAAH,sDAsCnB,OACE,cAACtB,EAAY6B,SAAb,CAAsBhC,MAAO,CAACW,cAAYE,UAAQD,OAAKE,SAAOJ,WAASa,gBAAcU,kBAjDvF,SAA2BC,GAEzBnB,IAAcK,MAAK,SAAAC,GAEf,IAAIc,EAAcd,EAAIK,QAAO,SAAAC,GAAO,OAAkC,IAA/BA,EAAQ9C,KAAKuD,SAASF,MAC7DvB,EAAYwB,QA4ChB,SACG1B,I,sBCnFD4B,EAAgBjC,IAAMC,gBAErB,SAASiC,IACd,OAAO/B,qBAAW8B,GAGb,SAASE,EAAT,GAA+C,IAArBC,EAAoB,EAApBA,OAAQ/B,EAAY,EAAZA,SACjCgC,EAASC,mBACf,EAA0C1E,mBAAS,IAAnD,mBAAO2E,EAAP,KAAsBC,EAAtB,KA2BA,OAxBAzB,qBAAU,WACV,4CAEE,sBAAAzC,EAAA,sDACA+D,EAAOI,QAAUC,IAAG,yCADpB,4CAFF,uBAAC,WAAD,wBAKExB,KAEA,IAEJH,qBAAU,WACV,4CACE,sBAAAzC,EAAA,sDACA+D,EAAOI,QAAQE,KAAK,UAAU7D,eAAc,IAC5CuD,EAAOI,QAAQG,GAAG,qBAAqB,SAAAC,GAErCL,EAAkBK,MAJpB,4CADF,uBAAC,WAAD,wBAQA3B,KAGE,CAACkB,IAGC,cAACH,EAAcL,SAAf,CAAwBhC,MAAO,CAACyC,SAAOE,kBAAvC,SACGlC,ICjCP,IAAMyC,EAAuB9C,IAAMC,gBAE5B,SAAS8C,IACd,OAAO5C,qBAAW2C,GAGb,SAASE,EAAT,GAAiD,EAAhBzD,GAAiB,IAAbc,EAAY,EAAZA,SAC1C,EAAyBH,IAAlBI,EAAP,EAAOA,SAAUE,EAAjB,EAAiBA,KACjB,EAA0C5C,mBAAS,IAAnD,mBAAOqF,EAAP,KAAsBC,EAAtB,KACA,EAAwDtF,qBAAxD,mBAAOuF,EAAP,KAA6BC,EAA7B,KACMC,EAAmBf,iBAAOW,GAC1BK,EAAyBhB,iBAAOa,GACtC,EAA8CvF,oBAAS,GAAvD,mBAAO2F,EAAP,KAAwBC,EAAxB,KACA,EAAmCtB,IAA3BG,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,eAChB,EAAkC3E,mBAAS,IAA3C,mBAAO6F,EAAP,KAAkBC,EAAlB,KACA,EAA2E9F,mBAAS,IAApF,mBAAO+F,EAAP,KAAsCC,EAAtC,KACMlD,EAAS,CAAEmD,QAAS,CAAE,iBAAkB/E,eAAc,SAEtDgF,EAAQ,IAAIC,MAAM,uFAZ8B,SAmEvCC,IAnEuC,2EAmEtD,8BAAA1F,EAAA,+EAG0BI,IAAMkC,IAAI,0EAA2E9B,eAAc,GAAO4B,GAHpI,cAGS9B,EAHT,OAKSqF,EAAoBrF,EAASC,KAAKqF,KAAI,SAACC,GAEzC,IAAIC,EAAqBD,EAWzB,OATyC,IAArCA,EAAaE,aAAa7C,QAAgB2C,EAAaG,OAASxF,eAAc,OAC/EsF,EAAmB,2BAAQA,GAAR,IAA4BE,KAAMH,EAAaE,aAAa,GAAG5F,KAAK8F,kBAAkBJ,EAAaE,aAAa,GAAGG,SAEtIrB,GAEEA,EAAqB5D,KAAO6E,EAAoB7E,IAChD6D,EAAwBgB,GAGtBA,KAlBd,kBAqBWH,GArBX,gCAsBiB7C,QAAQC,IAAR,MAtBjB,0DAnEsD,kEA+FtD,WAAsCS,GAAtC,SAAAxD,EAAA,sDAGM0F,IAAmBhD,MAAK,SAAAC,GAGvB,IAAIc,EAAed,EAAIK,QAAO,SAAA6C,GAAY,OACJ,IAAnCA,EAAaG,KAAKtC,SAASF,MAG7BoB,EAAiBnB,MAVzB,4CA/FsD,kEA+GtD,WAAkC0C,EAAKhG,EAAM+F,GAA7C,6BAAAlG,EAAA,yDACMiG,EAAoBC,EACpBE,GAAU,EAGK,IAAfD,EAAIjD,OALV,uBAMIJ,QAAQC,IAAI,2BANhB,6BAWMsD,EAAqB,KACN,IAAfF,EAAIjD,SACNmD,EAAqB1B,EAAc2B,MACjC,SAACT,GAAD,OAAkBA,EAAaG,OAAS7F,OAIxCkG,EAlBN,iBAkB0BvB,EAAwBuB,GAlBlD,4BAwBUE,EAAeJ,EAAIP,KAAI,SAAC3E,GAI5B,OAH+Be,EAASgB,QACtC,SAACC,GAAD,OAAahC,IAAOgC,EAAQhC,MAEE,OAKrBJ,KAAK,CAChBI,GAAIiB,EAAKjB,GACTd,KAAM+B,EAAK/B,KACXZ,MAAO2C,EAAK3C,MACZgD,UAAWL,EAAKK,UAChBC,SAAUN,EAAKM,aAIb2D,EAAIjD,OAAS,GA1CrB,wBA2CY3C,EAAO,IAAIiG,UACZC,OAAO,OAAOR,GACnB1F,EAAKkG,OAAO,gBAAgB,kBAC5BlG,EAAKkG,OAAO,aAAa,aACzBlG,EAAKkG,OAAO,CAACC,QAAO,IA/C1B,oBAiD2BtG,IAAMC,KAAK,yDAAyDE,GAjD/F,QAiDUD,EAjDV,OAkDM2F,EAAoB3F,EAASC,KAAKoG,IAlDxC,mDAoDkB7D,QAAQC,IAAR,MApDlB,QAwDMqD,GAAU,EAxDhB,eA2DQQ,EAAkB,CACpBZ,KAAM7F,EACN0G,UAAWrG,eAAc,GACzBuF,aAAcQ,EACdO,SAAU,GACVC,YAAa,CAAE9F,GAAI,GAAI+F,OAAQ,GAAIC,QAAS,IAC5ChB,kBAAmBA,EACnBG,WAlEN,oBAuE2BhG,IAAMC,KACzB,uDACAuG,EACAxE,GA1ER,QA4EmC,aALzB8E,EAvEV,QA4EmB3G,KAAK4G,SAChBrE,QAAQC,IAAImE,EAAS3G,KAAKsF,cAC1Bf,EAAwBoC,EAAS3G,KAAKsF,cAGlCqB,EAAS3G,KAAKsF,aAAaiB,SAAS5D,OAAS,GAC/C0B,GAAiB,SAACwC,GAChB,MAAM,GAAN,mBAAWA,GAAX,CAA8BF,EAAS3G,KAAKsF,mBAnFxD,mDAwFM/C,QAAQC,IAAR,MAxFN,oEA/GsD,sBAetDN,qBAAU,WAAI,4CAEZ,sBAAAzC,EAAA,yDAEoB,MAAjB+D,EAAOI,QAFV,iDAGAJ,EAAOI,QAAQG,GAAG,eAAc,YAC/B,IADiC+C,EAClC,EADkCA,KAAKC,EACvC,EADuCA,eAGhCzC,GAEEA,EAAqBlE,MAAQ2G,GAE7BlC,EAAciC,EAAKlH,SAV5B,4CAFY,uBAAC,WAAD,wBAiBdyC,KACE,CAACiC,IAEHpC,qBAAW,WACX,4CACE,4BAAAzC,EAAA,0DACG6E,EADH,oBAGIA,EAAqBuB,QAHzB,qBAKKnC,EAAesD,MAAK,SAAAF,GAAI,OAAGA,EAAKvD,SAAUe,EAAqBkB,aAAa,GAAG9E,MALpF,gBAOIqE,EAAkC,IAPtC,uCAWyBlF,IAAMkC,IAAI,gDAAiDuC,EAAqBkB,aAAa,GAAG9E,GAAGmB,GAX5H,OAWQ9B,EAXR,OAYIgF,EAAkChF,EAASC,KAAKiC,UAZpD,6CADF,uBAAC,WAAD,wBAkBAI,KAEE,CAACqB,EAAeY,IAElBpC,qBAAU,WACV,4CACE,sBAAAzC,EAAA,sDACC0F,IAAmBhD,MAAK,SAAAC,GAAG,OAAGiC,EAAiBjC,MADhD,4CADF,uBAAC,WAAD,wBAIEC,KAEC,IA6IH,IAAM4E,EAA2BC,sBAAW,uCAAC,mCAAAzH,EAAA,sDAAS0H,EAAT,EAASA,YAGlDlC,EAAMmC,OAEFtB,GAAqB,EACrBuB,EAAyB7C,EAAiBZ,QAAQyB,KAAI,SAACC,GACvD,GAAIA,EAAalF,MAAQ+G,EAAY/G,IAAK,CACxC0F,GAAqB,EACrB,IAAIwB,EAAO,2BAAQhC,GAAR,IACTiB,SAAUY,EAAYZ,SACtBC,YAAaW,EAAYX,cAM3B,OALI/B,EAAuBb,SACrBa,EAAuBb,QAAQxD,MAAQ+G,EAAY/G,KACrDmE,EAAwB+C,GAGrBA,EACF,OAAOhC,KAKbQ,EAUEzB,EAAiBgD,GATjBF,EAAYtB,QAQfxB,GAAiB,SAACwC,GAAD,4BAA2BA,GAA3B,CAA6CM,QANzDd,EADN,2BAC6Bc,GAD7B,IAEG1B,KAAM0B,EAAY3B,aAAa,GAAG5F,KAClC8F,kBAAmByB,EAAY3B,aAAa,GAAGxD,YAEjDqC,GAAiB,SAACwC,GAAD,4BAA2BA,GAA3B,CAA8CR,QA9B1B,2CAAD,sDAkCxC,CAAChC,IAELnC,qBAAU,WACR,GAAsB,MAAlBsB,EAAOI,QAMX,OAJAY,EAAiBZ,QAAUQ,EAC3BK,EAAuBb,QAAUU,EACjCd,EAAOI,QAAQG,GAAG,kBAAmBkD,GAE9B,kBACLzD,EAAOI,QAAQ2D,IAAI,kBAAmBN,MACvC,CAAC7C,EAAeE,IAwEnB,OACE,cAACL,EAAqBlB,SAAtB,CACEhC,MAAO,CACL2D,kBACAC,qBACA6C,YArDN,SAAqBC,EAAKC,EAAUC,EAASC,GAGzC,IAAIC,EAAQ,IAAIC,KAAKC,eAAe,KAAM,CAC1CC,GAAI,MACJC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,SAAS,mBACVC,cAAc,IAAIC,MAClBC,QAAO,SAACC,EAAKC,GAEZ,OADAD,EAAIC,EAAKhI,MAAQgI,EAAK5H,MACf2H,IACNE,OAAOC,OAAO,OAEbC,EAAI,UAAMjB,EAAMM,IAAZ,YAAmBN,EAAMK,MAAzB,YAAkCL,EAAMI,KAAxC,aAAiDJ,EAAMO,KAAvD,YAA+DP,EAAMQ,QAEzEU,GAAY,EAEF,MAAXnB,IACAmB,GAAW,GAEd,IAAIC,EAAiB,CAAEtI,GAAIiB,EAAKjB,GAAId,KAAM+B,EAAK/B,KAAM8G,QAASe,EAAOwB,SAAUH,EAAMI,cAAexB,EAAUyB,eAAeJ,EAAWnB,UAAUA,IAClI,IAAbF,IACAsB,EAAe,2BAAKA,GAAN,IAAqBrB,SAASA,KAE/C,IAAIlB,EAAS,CACX/F,GAAIiB,EAAKjB,GACT1B,MAAO2C,EAAK3C,MACZY,KAAM+B,EAAK/B,KACX+F,MAAOhE,EAAKK,WAEVoH,EAAU,2BACT9E,GADS,IAEZiC,SAAS,GAAD,mBAAMjC,EAAqBiC,UAA3B,CAAqCyC,IAC7CxC,YAAawC,IAEfxF,EAAOI,QAAQE,KAAK,eAAgB,CAClC2C,OAAQA,EACRlB,oBAAqB6D,EACrBrC,eAAgBzC,EAAqBlE,MA/DR,SAACgJ,GAChC,IAAItD,GAAqB,EACzBvB,EAAwB6E,GAExB,IAAIC,EAA0BjF,EAAciB,KAAI,SAACC,GAC/C,OAAIA,EAAalF,MAAQgJ,EAAWhJ,KAClC0F,GAAqB,EACdsD,GACK9D,KAIdjB,EADEyB,EACeuD,EAEA,SAACxC,GAAD,4BACZA,GADY,CAEfuC,MAkDJE,CAAyBF,IASrBhF,gBACAmF,mBA1UgD,gDA2UhDlF,mBACAE,0BACAD,uBACAQ,iCACAF,aACAC,gBACA2E,uBAjVgD,6CAoUpD,SAiBGhI,I,OC3VQ,SAASiI,IACpB,MAAoEvF,IAA7DK,EAAP,EAAOA,wBAA6CH,GAApD,EAA+BE,qBAA/B,EAAoDF,eACtC/C,IAAPM,KAF6B,4CAIxC,WAA0C2D,GAA1C,SAAA7F,EAAA,sDAEI8E,EAAwBe,GAF5B,4CAJwC,sBAQtC,OACQ,qBAAK9E,UAAU,QAAf,SACI,qBAAKA,UAAU,gBAAf,SACC4D,EAAciB,KAAI,SAACC,EAAaoE,GAE9B,OAAU,sBAAkBC,QAAS,kBAbd,2CAakBC,CAA2BtE,IAAgB9E,UAAU,gBAApF,UACN,cAACqJ,EAAA,EAAD,CAAQC,IAAKC,GAAyBzE,EAAaI,oBACnD,sBAAKlF,UAAU,WAAf,UACA,uBAAQA,UAAU,WAAlB,UAA8B,6BAAK8E,EAAaG,OAAhD,OACA,qCAASH,EAAakB,YAAYE,QAASsD,MAAM,EAAE,IAAnD,eAJgBN,UCdtB,SAASO,EAAT,GAAgE,IAA7CC,EAA4C,EAA5CA,wBAAwBC,EAAoB,EAApBA,kBAChD1I,EAAaJ,IAAbI,SACR,EAAiDyC,IAAzCqF,EAAR,EAAQA,mBAAR,EAA2B5E,mBAS3B,OAEE,sBAAKnE,UAAU,QAAf,UACE,oBAAIA,UAAU,iBAAd,6BACF,cAAC4J,EAAA,EAAD,CAASC,MAAO,CAACC,OAAO,OAAQC,OAAO,UAAUC,SAAS,QAASb,QAAS,kBAAIQ,KAC5E3J,UAAU,iBADd,0BAIE,qBAAKA,UAAU,gBAAf,SACCiB,EAAS4D,KAAI,SAAA3C,GAEV,OAEA,sBAAKlC,UAAU,gBAAgBmJ,QAAS,kBApBhD,YACC,IAD2BjJ,EAC5B,EAD4BA,GAAGd,EAC/B,EAD+BA,KAAK+F,EACpC,EADoCA,MAGlC4D,EADQ,CAAC7I,GACcd,EAAK+F,GAC5BuE,IAgBkDO,CAAkB,CAAC/J,GAAGgC,EAAQhC,GAAGd,KAAK8C,EAAQ9C,KAAK+F,MAAMjD,EAAQV,aAA7G,UACE,cAAC6H,EAAA,EAAD,CAAQC,IAAKpH,EAAQV,YACtB,sBAAKxB,UAAU,WAAf,cAA2B,+BAAKkC,EAAQ9C,KAAb,OAA3B,kB,4BCzBI,SAAS8K,EAAT,GAAsC,IAAdC,EAAa,EAAbA,WAE9BC,EAAWnH,mBACVnB,EAAiBjB,IAAjBiB,cAH0C,4CAMlD,sBAAA7C,EAAA,sDAEE6C,EAAcsI,EAAShH,QAAQ7C,OAE/B4J,IAJF,4CANkD,sBAalD,OAEC,qBAAKnK,UAAU,UAAf,SACS,qBAAKA,UAAU,yBAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,oBAAd,iCACA,cAACqK,EAAA,EAAD,CAAYrK,UAAU,gBAAiBmJ,QAAS,kBAAIgB,KAApD,SACE,cAAC,IAAD,CAAWH,SAAS,eAI1B,sBAAKhK,UAAU,kBAAf,UAEE,oBAAIA,UAAU,cAAd,qBACA,uBAAOA,UAAU,gBAAgBG,KAAK,OAAOmK,IAAKF,EAAU5J,UAAQ,IACpE,wBAAQR,UAAU,iBAAiBmJ,QA7BC,2CA6BpC,oC,uDC+FDoB,MA3Hf,YAA0C,IAAfJ,EAAc,EAAdA,WAEvB,EAAoD5L,mBAAS,IAA7D,mBAAOiM,EAAP,KAA2BC,EAA3B,KACQxJ,EAAaJ,IAAbI,SACR,EAAkDyC,IAA1CqF,EAAR,EAAQA,mBAAmB5E,EAA3B,EAA2BA,mBAC3B,EAAgC5F,mBAAS,IAAzC,mBAAOmM,EAAP,KAAiBC,EAAjB,KACA,EAAkCpM,qBAAlC,mBAAOqM,EAAP,KAAkBC,EAAlB,KACA,EAAqCtM,qBAArC,mBAAOuM,EAAP,KAAoBC,EAApB,KACA,EAA+CxM,oBAAS,GAAxD,mBAAOyM,EAAP,KAAwBC,EAAxB,KA4BA,SAASC,EAAiBlM,GACtB6L,EAAc7L,EAAEsB,OAAO6K,MAAM,IAC7BJ,EAAgBK,OAAOC,IAAIC,gBAAgBtM,EAAEsB,OAAO6K,MAAM,KAI9D,OACI,qBAAKnL,UAAU,UAAf,SACA,qBAAKA,UAAU,uBAAf,SACA,qBAAKA,UAAU,6BAAf,UAEmB,IAApBgL,EACE,sBAAKhL,UAAU,gBAAf,UAEE8K,EAEE,sBAAK9K,UAAU,qBAAf,UACD,cAACqJ,EAAA,EAAD,CAASC,IAAKwB,EAAcjB,MAAO,CAACC,OAAQ,QAASyB,MAAO,QAASC,gBAAgB,OAAQzB,OAAO,QAApG,eACA,sBAAK/J,UAAU,wBAAwB6J,MAAO,CAAC4B,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAASC,SAAS,WAAWC,OAAO,IAAIC,MAAM,SAA9I,UACA,cAAC,IAAD,CAAejC,MAAO,CAAC+B,SAAS,WAAWC,OAAO,IAAKE,QAAQ,MAAMjC,OAAQ,OAAQyB,MAAO,UAE3F,cAAC,IAAD,CAAgB1B,MAAO,CAACC,OAAQ,OAAQyB,MAAO,OAAQO,MAAM,WAC7D,uBAAOE,OAAO,UAAU9L,GAAG,OAAOC,KAAK,OAAOf,KAAK,OAAOiB,SAAU6K,IACrE,sBAAMrB,MAAO,CAACG,SAAS,QAAvB,iCAMF,qBAAKhK,UAAU,kBAAf,SACA,eAACqJ,EAAA,EAAD,CAAUQ,MAAO,CAACC,OAAQ,QAASyB,MAAO,QAASC,gBAAgB,OAAQzB,OAAO,QAAlF,UACC,cAAE,IAAF,CAAgBF,MAAO,CAAC+B,SAAS,WAAWC,OAAO,IAAKE,QAAQ,MAAMjC,OAAQ,OAAQyB,MAAO,UAC5F,sBAAM1B,MAAO,CAAC4B,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAASC,SAAS,WAAWC,OAAO,IAAIC,MAAM,SAA7G,UACC,cAAC,IAAD,CAAgBjC,MAAO,CAACC,OAAQ,OAAQyB,MAAO,OAAQO,MAAM,WAC7D,uBAAOE,OAAO,UAAU9L,GAAG,OAAOC,KAAK,OAAOf,KAAK,OAAOiB,SAAU6K,IACrE,sBAAMrB,MAAO,CAACG,SAAS,QAAvB,qCAKF,sBAAKhK,UAAU,aAAf,UACA,sBAAM6J,MAAO,CAACoC,QAAQ,MAAOlC,OAAO,MAAQC,SAAS,OAAQ8B,MAAM,WAAnE,0BACA,uBAAOzL,SAAU,SAACrB,GAAD,OAAK2L,EAAa3L,EAAEsB,OAAOC,aAE5C,yBAAQsJ,MAAO,CAAC4B,QAAQ,OAAOE,WAAW,SAASJ,MAAM,QAAQW,eAAe,UAAWlM,UAAU,iBAAkBmJ,QAAS,kBAAI8B,GAAoB,IAAxJ,UAA+J,cAAC,IAAD,CAAepB,MAAO,CAACE,OAAO,SAA7L,qBAGA,gCACA,oBAAI/J,UAAU,oBAAd,+BACA,qBAAK6J,MAAO,CAACsC,UAAU,UAAUrC,OAAO,SAAxC,SACC7I,EAAS4D,KAAI,SAAA3C,GAEZ,OAEI,sBAAKlC,UAAU,cAAf,UACC,uBACDG,KAAK,WACLI,MAAOiK,EAAmB7H,SAAST,EAAQhC,IAC3CA,GAAIgC,EAAQ9C,KACZyK,MAAO,CAACuC,YAAY,QACpB/L,SAAU,kBA/EQgM,EA+EmBnK,EAAQhC,QA7ElDsK,EAAmB7H,SAAS0J,GAE3B5B,GAAsB,SAAA6B,GAElB,OAAQA,EAAuBrK,QAAO,SAAA/B,GAAE,OAAGA,IAAKmM,QAMrD5B,GAAsB,SAAA6B,GAEnB,MAAM,GAAN,mBAAWA,GAAX,CAAkCD,QAd5C,IAA8BA,KAgFf,cAAChD,EAAA,EAAD,CAASC,IAAKC,GAAyBrH,EAAQV,UAAawI,SAAS,UACrE,sBAAKhK,UAAU,cAAf,cAA8B,qBAAI6J,MAAO,CAAC0C,WAAW,OAAvB,UAAgCrK,EAAQ9C,KAAxC,OAA9B,eAIP,qBAAKyK,MAAO,CAAC4B,QAAQ,OAASS,eAAe,UAA7C,SACC,wBAAQlM,UAAU,iBAAkBG,KAAK,SAASgJ,QAAS,kBA3FhEhF,GAAmB,GACnB4E,EAAmByB,EAAmBE,EAAUE,QAChDT,KAyFK,gCC5FE,SAASqC,GAAT,GAAuB,EAALtM,GAAM,IACnC,EAAiC3B,mBAAS,iBAA1C,mBAAOkO,EAAP,KAAkBC,EAAlB,KACA,EAAkCnO,oBAAS,GAA3C,mBAAOoO,EAAP,KAAkBC,EAAlB,KACA,EAAgC/L,IAAzBM,EAAP,EAAOA,KAAKqB,EAAZ,EAAYA,kBACZ,EAAkCjE,oBAAS,GAA3C,mBAAOsO,EAAP,KAAkBC,EAAlB,KACO9D,EAA0BtF,IAA1BsF,uBACP,EAAsCzK,mBAAS,IAA/C,mBAAOwO,EAAP,KAAoBC,EAApB,KAUA,SAAS7C,IACLyC,GAAa,GAGjB,SAASK,EAAiBC,GAExBN,GAAa,GACbI,EAAgBE,GAGlB,OAEI,sBAAKlN,UAAU,UAAf,UACI,sBAAKA,UAAU,cAAf,UACI,cAACqJ,EAAA,EAAD,CAAQC,IAAKnI,EAAKK,UAAawI,SAAS,UACxC,sBAAKhK,UAAU,oBAAf,UACI,cAACqK,EAAA,EAAD,CAAYlB,QAAS,kBAAIuD,EAAc,kBAAvC,SACE,cAAC,IAAD,CAAU1C,SAAS,YAErB,cAACK,EAAA,EAAD,CAAYL,SAAS,QAAQb,QAAS,kBAAIuD,EAAc,aAAxD,SACE,cAAC,IAAD,CAAa1C,SAAS,YAExB,cAACK,EAAA,EAAD,UACE,cAAC,IAAD,YAKPwC,EACD,sBAAK7M,UAAU,eAAf,UACC,qBAAKA,UAAU,cAAf,SACA,cAACqK,EAAA,EAAD,CAAYlB,QAAS,kBAAI2D,GAAc,IAAvC,SACO,cAAC,IAAD,CAAe9C,SAAS,cAGhC,uBAAOhK,UAAU,cAAcG,KAAK,OAAOE,SA1CrD,SAAsBrB,GAEF,kBAAfyN,EACFzD,EAAuBhK,EAAEsB,OAAOC,OAC5BiC,EAAkBxD,EAAEsB,OAAOC,UAgCxB,OAOA,qBAAKP,UAAU,YAAf,SACC,sBAAKA,UAAU,kBAAf,UACC,cAAC,IAAD,IACA,uBAAOI,YAAY,SAASD,KAAK,OAAOgJ,QAAS,kBAAI2D,GAAc,WAIzD,aAAbL,EACD,gCACO,qBAAKzM,UAAU,iBAAf,SACC,cAAC4J,EAAA,EAAD,CACAC,MAAO,CAACG,SAAS,QACjBb,QAAS,kBAAI8D,EAAiB,gBAC9BjN,UAAU,iBAHV,+BAQJ,qBAAKA,UAAU,iBAAf,SACA,cAACyJ,EAAD,CAAUC,wBAAyB,kBAAKgD,EAAc,kBAAmB/C,kBAAmB,kBAAIsD,EAAiB,qBAI7G,qBAAKjN,UAAU,iBAAf,SAAgC,cAACiJ,EAAD,MAK9C,cAACkE,EAAA,EAAD,CAAOnN,UAAU,QAAQoN,KAAMT,EAAWU,QAASlD,EAAnD,SACkB,cAAjB4C,EAA+B,cAAC,EAAD,CAAgB5C,WAAYA,IAAkB,cAACD,EAAD,CAAeC,WAAYA,S,wICrEhGmD,OA5Bf,YACC,IADiBpH,EAClB,EADkBA,QAEhB,EAAkC3H,oBAAS,GAA3C,mBAAOoO,EAAP,KAAkBC,EAAlB,KACA,EAA8CrO,mBAAS,MAAvD,mBAAOgP,EAAP,KAAwBC,EAAxB,KAQA,OAEE,gCACE,sBAAMxN,UAAU,cAAhB,SAA+BkG,EAAQ9G,OACtC8G,EAAQwC,cACT,qBAAK1I,UAAU,mBAAmBsJ,IAAKpD,EAAQiB,SAAUsG,IAAI,GAAGtE,QAAS,kBAX1DkC,EAWwEnF,EAAQiB,SATjGyF,GAAa,QACbY,EAAoBnC,GAHtB,IAAmBA,GAW2FE,MAAM,QAAQzB,OAAO,UAC7H,GACF,oBAAG9J,UAAU,2BAAb,UAAwC,sBAAMA,UAAU,kBAAhB,SAAmCkG,EAAQA,UACnF,sBAAMlG,UAAU,eAAhB,SAAiCkG,EAAQuC,SAAUiF,UAAU,GAAG,MADhE,OAGA,cAACC,GAAA,EAAD,CAAQN,QAAS,kBAAKT,GAAa,IAASQ,KAAMT,EAAlD,SACE,qBAAKrD,IAAKiE,EAAkBE,IAAI,GAAI3D,OAAO,QAAQyB,MAAM,gB,OCDlDqC,OApBf,YACC,IADsB1H,EACvB,EADuBA,QAAQD,EAC/B,EAD+BA,OAAOd,EACtC,EADsCA,MAE5B0I,EAAe5H,EAAOtD,SAAS,iBAAmB,WAAW,SAEnE,OAEG,sBAAK3C,UAAU,qBAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAW6N,EAAhB,SACI,uBAASC,UAAQ,EAACC,aAAa,aAA/B,SACE,wBAAQzE,IAAKpD,EAAQkB,UAAWjH,KAAK,kBAG3C,sBAAMH,UAAU,eAAhB,SAAiCkG,EAAQuC,SAAUiF,UAAU,GAAG,SAEpE,cAACrE,EAAA,EAAD,CAAQC,IAAKnE,EAAO0E,MAAO,CAAEC,OAAQ,OAAQyB,MAAO,cCgLhDyC,OA/Kf,SAAkB1P,GAEd,MAAuBC,mBAAS,IAAhC,mBAAO0P,EAAP,KAAYC,EAAZ,KACOlL,EAAUH,IAAVG,OACA7B,EAAQN,IAARM,KACP,EAA2CuC,IAApCsD,EAAP,EAAOA,YAAYlD,EAAnB,EAAmBA,qBACbqK,EAAWlL,iBAAO,MAExB,EAAiC1E,oBAAS,GAA1C,mBAAO6P,EAAP,KAAiBC,EAAjB,KACA,EAAkC9P,oBAAS,GAA3C,mBAAOgK,EAAP,KAAkB+F,EAAlB,KACA,EAAwEC,iCAAsB,CAAC9J,OAAO,IAAxF+J,GAAd,EAAOpI,OAAP,EAAcoI,gBAAeC,EAA7B,EAA6BA,cAAcC,EAA3C,EAA2CA,aAAaC,EAAxD,EAAwDA,aACxD,EAAiCpQ,mBAAS,MAA1C,mBAAOqQ,EAAP,KAAiBC,EAAjB,KAGMC,EAASpI,uBAAY,SAACqI,GAGvBA,GACAA,EAAKC,eAAe,CAACC,QAAO,MAC/B,IAnBmB,4CAoErB,WAA2BjQ,GAA3B,iBAAAC,EAAA,6DAEQO,EAAO,IAAIiG,UACZC,OAAO,OAAO1G,EAAEsB,OAAO6K,MAAM,IAClC3L,EAAKkG,OAAO,gBAAgB,kBAC5BlG,EAAKkG,OAAO,aAAa,aAL3B,kBAOuBrG,IAAMC,KAAK,yDAAyDE,GAP3F,OAOMD,EAPN,OASEjB,EAAM4Q,cAAc3P,EAASC,KAAKoG,KATpC,kDAUc7D,QAAQC,IAAR,MAVd,2DApEqB,+BAuFNmN,IAvFM,2EAuFrB,4BAAAlQ,EAAA,6DAEKwP,IAFL,SAGqBW,MAAMV,GAH3B,OAGS9M,EAHT,OAIKiN,EAAajN,EAAIyN,QAJtB,4CAvFqB,sBA8FvB,SAASC,IAEPb,IACAE,IACAL,GAAc,GAyBd,OArGF5M,qBAAW,WAAM,4CACf,kCAAAzC,EAAA,yDACgB,MAAb2P,EADH,iCAGmBQ,MAAMV,GAAc/M,MAAK,SAAAC,GAAG,OAAGA,EAAIyN,UAHtD,cAGM5K,EAHN,QAIQjF,EAAO,IAAIiG,UAEZC,OAAO,OAAQjB,GACpBjF,EAAKkG,OAAO,gBAAiB,SAC7BlG,EAAKkG,OAAO,gBAAgB,kBAC5BlG,EAAKkG,OAAO,aAAa,aAT3B,mBAWyBrG,IAAMC,KAAK,yDAAyDE,GAX7F,QAWQD,EAXR,OAaI6H,GADIA,EAAY7H,EAASC,KAAKoG,KACT4D,MAAM,GAAG,GAC9BpC,GAAY,MACZkH,GAAc,GACdK,IACA3H,EAAYiH,EAAK,KAAK,KAAK7G,GAC3BkH,GAAc,GAlBlB,kDAoBcvM,QAAQC,IAAR,MApBd,2DADe,uBAAC,WAAD,wBAyBfH,KAEC,CAAC+M,IA4EA,sBAAK5O,UAAW,kBAAhB,UACE,qBAAKA,UAAU,YAAf,SACC8D,EAAqBiC,SAASlB,KAAI,SAACqB,EAAQgD,GAExC,IAAMqG,EAAczL,EAAqBiC,SAAS5D,OAAQ,IAAM+G,EAC5DjD,EAASC,EAAQhG,KAAKT,eAAc,GAAQ,eAAiB,8BAC7D0F,EAAMe,EAAQhG,KAAKT,eAAc,GAAQ0B,EAAKK,UAAWsC,EAAqBoB,kBAElF,OACI,qBAAiBlF,UAAWiG,EAAQqE,IAAKiF,EAAcT,EAAS,KAAhE,SACK5I,EAAQyC,eACT,cAAC,GAAD,CAAczC,QAASA,EAASD,OAAQA,EAAQd,MAAOA,IAAW,cAAC,GAAD,CAASe,QAASA,KAF9EgD,QAUpB,sBAAKlJ,UAAU,4BAAf,UACIoO,EAAY,cAAC,KAAD,CAAQoB,aAAc,SAACxQ,EAAEyQ,GAAH,OA5BnB,SAACC,EAAOD,GACzBvB,EAAQD,EAAOwB,EAAYE,OA2B0BH,CAAaxQ,EAAEyQ,IAAcG,YAAa,CAAErE,MAAO,UAAa,GACpH,sBAAKvL,UAAU,cAAf,UACGoO,EAAW,eAAC/D,EAAA,EAAD,CAAalB,QAAS,kBAAIkF,GAAa,IAAvC,UAA+C,cAAC,IAAD,CAAWrE,SAAS,UAAnE,OAA2F,GACvG,cAACK,EAAA,EAAD,CAAalB,QAAS,kBAAIkF,GAAa,IAAvC,SACE,cAAC,KAAD,CAAoBrE,SAAS,YAE/B,uBAAOgC,OAAO,UAAUhM,UAAU,iBAAiBE,GAAG,mBAAmBC,KAAK,OAAQ0J,MAAO,CAAEgG,WAAY,UAAWxP,SAvJxG,8CAwJd,uBAAOyP,QAAQ,mBAAf,SACE,cAACzF,EAAA,EAAD,CAAY0F,UAAU,OAAtB,SACE,cAAC,KAAD,CAAY/F,SAAS,cAIzB,uBAAM/J,SAlGb,SAAsBjB,GAEpBA,EAAEE,iBACF8H,EAAYiH,GAAK,EAAM,KAAK,MAE5BC,EAAQ,MA6F2BlO,UAAU,kBAAxC,UACE,uBAAOA,UAAU,gBAAgBsK,IAAK6D,EAAW5N,MAAO0N,EAAM5N,SA1GvE,SAAgBrB,GAEZkP,EAAQlP,EAAEsB,OAAOC,OACK,MAAlByC,EAAOI,SACXJ,EAAOI,QAAQE,KAAK,SAAU,CAACgD,KAAKnF,EAAK6O,aAAalM,KAsG+B3D,KAAK,OAAOC,YAAY,mBACxG,wBAAQD,KAAK,SAAb,uBAEDoI,EA3DU,gCAChB,cAAC8B,EAAA,EAAD,UACE,cAAC,IAAD,CAAWL,SAAS,QAAQH,MAAO,CAACiC,MAAM,OAAQ3C,QAASmG,MAE7D,cAACjF,EAAA,EAAD,UACG,cAAC,KAAD,CAAWL,SAAS,QAAOH,MAAO,CAACiC,MAAM,SAAU3C,QAASgG,SAuD1D,cAAC9E,EAAA,EAAD,CAAYlB,QAlFpB,WAECmF,GAAc,GACdE,KA+EO,SACE,cAAC,KAAD,CAASxE,SAAS,sB,8BCtHhBiG,OArDf,SAAuB3R,GAGnB,IAAM6P,EAAWlL,iBAAO,MACxB,EAAuB1E,mBAAS,IAAhC,mBAAO0P,EAAP,KAAYC,EAAZ,KACOlL,EAAUH,IAAVG,OACA7B,EAAQN,IAARM,KACP,EAA2CuC,IAApCsD,EAAP,EAAOA,YAAYlD,EAAnB,EAAmBA,qBAEnB,SAASoM,EAAahJ,IAEH,IAAZA,GACAF,EAAYiH,GAAK,EAAK3P,EAAM6I,UACjC+G,EAAQ,KACR5P,EAAM6R,aAWR,OACI,sBAAKnQ,UAAU,YAAf,UAGA,qBAAKA,UAAU,oBACZ,cAACqK,EAAA,EAAD,CAAYlK,KAAK,SAASgJ,QAAS,kBAAI+G,GAAa,IAApD,SACE,cAAC,IAAD,CAAWlG,SAAS,YAIrB,qBAAKV,IAAMhL,EAAM6I,SAAUsG,IAAI,GAAG3D,OAAO,QAAQyB,MAAM,UAGzD,qBAAKvL,UAAU,cAAf,SACA,uBAAMC,SAAU,kBAAIiQ,GAAa,IAAOlQ,UAAU,kBAAlD,UACA,cAACqK,EAAA,EAAD,CAAYlK,KAAK,SAAjB,SACE,cAAC,KAAD,CAAU6J,SAAS,YAEtB,uBAAOhK,UAAU,gBAAgBsK,IAAK6D,EAAW5N,MAAO0N,EAAM5N,SAzBnE,SAAgBrB,GAEZkP,EAAQlP,EAAEsB,OAAOC,OACK,MAAlByC,EAAOI,SACXJ,EAAOI,QAAQE,KAAK,SAAU,CAACgD,KAAKnF,EAAK6O,aAAalM,KAqB2B3D,KAAK,OAAOC,YAAY,4BChDlG,SAASgQ,KAEpB,MAAuF1M,IAAhFI,EAAP,EAAOA,qBAAqBQ,EAA5B,EAA4BA,+BAA+BF,EAA3D,EAA2DA,WAAWC,EAAtE,EAAsEA,cACtE,EAAgC9F,oBAAS,GAAzC,mBAAO2I,EAAP,KAAiBmJ,EAAjB,KACA,EAA8B9R,oBAAS,GAAvC,mBAAO4I,EAAP,KAAgBmJ,EAAhB,KA+DA,OACI,sBAAKtQ,UAAU,OAAf,UACI,sBAAKA,UAAU,cAAf,UACI,cAACqJ,EAAA,EAAD,CAAQC,IAAKxF,EAAqBoB,oBAClC,sBAAKlF,UAAU,mBAAf,UACG,mCAAM8D,EAAqBmB,KAA3B,OACCnB,EAAqBuB,QAnEjB,WAElB,IAAIkL,EAAc,GAClB,GAAkB,KAAfnM,EAEDmM,EAAc,sBAAKvQ,UAAU,WAAf,cAA4BoE,EAA5B,mBACdoM,YAAW,kBAAKnM,EAAc,MAAI,SAIpC,CACE,IAAIoM,EAAe,GACnB3M,EAAqBkB,aAAa0L,SAAQ,SAACC,EAAYzH,GAEhDA,IAAWpF,EAAqBkB,aAAa7C,OAAO,EACnDsO,GAA8BE,EAAYvR,KAE1CqR,EAAcA,EAAeE,EAAYvR,KAAO,QAGxDmR,EAAc,sBAAKvQ,UAAU,WAAf,UAA2ByQ,EAA3B,OAIhB,OAAOF,EA2CsCK,GA5Bb,WAE/B,IAAIL,EAAc,GAgBnB,MAfuC,KAAnCjM,EAEgB,KAAfF,GAECmM,EAAc,qBAAKvQ,UAAU,WAAf,wBACdwQ,YAAW,kBAAKnM,EAAc,MAAI,MAIjCkM,EAAc,sBAAKvQ,UAAU,YAAf,UAA2B,qBAAKA,UAAU,WAA1C,cAGfuQ,EAAc,qBAAKvQ,UAAU,WAAf,SAA2BsE,IAGxCiM,EAUsDM,SAItD3J,EAAa,cAAC,GAAD,CAAeC,SAAUA,EAAUgJ,WAtCzD,WAEEG,EAAY,MACZD,GAAa,MAmC4E,cAAC,GAAD,CAAUnB,cA5CrG,SAA0B/J,GAExBmL,EAAYnL,GACZkL,GAAa,SCrCJS,oBAAW,YAA0B,IAAN5Q,EAAK,EAALA,GACnC4D,EAAuBJ,IAAvBI,qBAEP,OACI,qBAAK9D,UAAU,YAAf,SAEG,sBAAKA,UAAU,iBAAf,UACG,cAACwM,GAAD,CAAStM,GAAIA,SACW6Q,IAAvBjN,EAAmC,cAAC,GAAD,CAAM5D,GAAIA,IAAS,WC6GtD8Q,OArHf,SAAkB1S,GAEd,MAAuBC,mBAAS,IAAhC,mBAAMC,EAAN,KAAYC,EAAZ,KACA,EAAqBF,mBAAS,IAA9B,mBAAMa,EAAN,KAAW6R,EAAX,KACA,EAA4B1S,qBAA5B,mBAAO2S,EAAP,KAAeC,EAAf,KACMrS,EAAQC,cALO,4CASrB,WAA4BC,GAA5B,uBAAAC,EAAA,6DAGID,EAAEE,iBAEEkS,EAAY,IACV5R,EAAO,IAAIiG,UACZC,OAAO,OAAOwL,GACnB1R,EAAKkG,OAAO,gBAAgB,kBAC5BlG,EAAKkG,OAAO,aAAa,aACzBlG,EAAKkG,OAAO,CAACC,QAAO,IAVxB,mBAYyBtG,IAAMC,KAAK,yDAAyDE,GAZ7F,QAYQD,EAZR,OAaI6R,EAAa7R,EAASC,KAAKoG,IAb/B,kDAcgB7D,QAAQC,IAAR,MAdhB,eAoBQ7C,EAAM,CAACC,KAAMA,EAAKZ,MAAOA,EAAMgD,UAAU4P,EAAYnQ,SAAS,GAAGQ,SAAS,mBApBlF,oBAwB+BpC,IAAMC,KAAK,wDAAwDH,GAxBlG,QAwBcI,EAxBd,OA0BQE,eAAc,OAAYF,EAASC,KAAKE,MACxCD,eAAc,GAASF,EAASC,KAAKG,KAAKC,IAC1CH,eAAc,KAAWF,EAASC,KAAKG,KAAKP,KAC5Cd,EAAMuB,SAASN,EAASC,KAAKG,KAAKC,KAElCd,EAAQgB,KAAK,QA/BrB,mDAiCciC,QAAQC,IAAR,MAjCd,mEATqB,sBAoDrB,OAEI,sBAAKhC,UAAU,UAAf,UACA,sBAAMqR,IAAI,aAAaC,KAAK,+EAC/B,sBAAMtR,UAAU,aAAaC,SAxDT,4CAwDpB,SACE,sBAAKD,UAAU,MAAf,UACE,yBAAQA,UAAU,YAAlB,UACE,0CACA,2DAEJ,sBAAKA,UAAU,YAAf,UACE,uBAAMA,UAAU,aAAhB,UACE,mBAAGD,MAAM,sBAEX,uBAAOC,UAAU,aAAaE,GAAG,YAAYC,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACrB,GAAD,OAAMiS,EAAQjS,EAAEsB,OAAOC,QAAQC,UAAQ,OAGlI,uBAAMR,UAAU,aAAhB,UACA,mBAAGD,MAAM,cAET,uBAAOC,UAAU,aAAaG,KAAK,WAAWC,YAAY,WAAWF,GAAG,MAAOd,KAAK,WAAWiB,SAAU,SAACrB,GAAD,OAAMP,EAASO,EAAEsB,OAAOC,QAAQC,UAAQ,OAIjJ,qBAAKN,GAAG,aAAR,SACD,qBAAKF,UAAU,0BAAf,SACI,wBAAOA,UAAU,cAAjB,UACA,mBAAGD,MAAM,eAAe,cAAY,SAChC,sBAAMC,UAAU,OAAhB,yBACA,uBAAOE,GAAG,OAAOC,KAAK,OAAOf,KAAK,OAAOiB,SAjCrD,SAA0BrB,GACtBmS,EAAWnS,EAAEsB,OAAO6K,MAAM,cAqCzB,wBAAQnL,UAAU,SAASG,KAAK,SAAhC,2BAGD,8BAED,yBAAQH,UAAU,sBAAlB,UAAwC,cAAC,IAAD,CAAMA,UAAU,cAAcS,GAAE,IAAhC,4BACxC,mBAAGV,MAAM,kBAAkB,cAAY,uBCrD/BwR,OAjCf,WAEE,MAAkBhT,qBAAlB,mBAAO2B,EAAP,KAAUsR,EAAV,KAEMC,EACL,cAAC3O,EAAD,CAAgBC,OAAQ7C,EAAxB,SACE,cAACa,EAAD,CAAcb,GAAIA,EAAlB,SACC,cAACyD,EAAD,UACE,cAAC,GAAD,CAAYzD,GAAIA,UAQtB,OAEE,cAAC,IAAD,UACE,qBAAKF,UAAU,MAAf,SACG,eAAC,IAAD,WACGP,eAAc,GACd,eAAC,IAAD,CAAOiS,OAAK,EAACC,KAAK,IAAlB,cAAwB,cAACtT,EAAD,CAAOwB,SAAU2R,OACzC,eAAC,IAAD,CAAOG,KAAK,YAAZ,cAA0B,cAAC,GAAD,CAAU9R,SAAU2R,OAC7C/R,eAAc,GAAS,eAAC,IAAD,CAAOiS,OAAK,EAACC,KAAK,OAAlB,cAA4BF,EAA5B,OAAgD,cAAC,IAAD,CAAUhR,GAAG,cCjCjGmR,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ca98e19d.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport '../css/login.css'\r\nimport axios from 'axios'\r\nimport {Link,useHistory} from 'react-router-dom'\r\n\r\n\r\n\r\n\r\nexport default function LogIn(props) {\r\n\r\n    const [phone,setPhone] = useState('');\r\n    const [UserName,setUserName] = useState('');\r\n\r\n    const [Error,setError] = useState('')\r\n    const history=useHistory();\r\n\r\n\r\n\r\n    /*get user information and token from DB*/\r\n    async function handleSubmit(e)\r\n    {\r\n        setError('')\r\n        e.preventDefault()\r\n        let obj = {name: UserName,phone: phone}\r\n        let response = await axios.post(\"https://messagesapp1.herokuapp.com/api/logIn\",obj)\r\n\r\n        if(response.data !== \"not found\")\r\n        {\r\n           sessionStorage['config']= response.data.token \r\n           sessionStorage['id'] = response.data.User._id\r\n           sessionStorage['name'] = response.data.User.name\r\n           props.CanLogIn(response.data.User._id)\r\n\r\n           history.push('/App')\r\n        }\r\n        \r\n        else\r\n           setError(\"One or more of your identification details is incorrect.\")\r\n    }\r\n\r\n \r\n\r\n    return (\r\n       \r\n        <div class=\"overlay\">\r\n        \r\n          <form className='login_form' onSubmit={handleSubmit}>\r\n            <div class=\"con\">\r\n              <header class=\"head-form\">\r\n                <h2>Log In</h2>\r\n                <p>welcome to  my whatsApp</p>\r\n              </header>\r\n            <div class=\"field-set\">\r\n              <span class=\"input-item\">\r\n                <i class=\"fa fa-user-circle\"></i>\r\n              \r\n              <input class=\"form-input\" id=\"txt-input\" type=\"text\" placeholder=\"@UserName\" onChange={(e)=> setUserName(e.target.value)} required />\r\n\r\n              </span>\r\n              <span class=\"input-item\">\r\n              <i class=\"fa fa-key\"></i>\r\n            \r\n              <input class=\"form-input\" type=\"password\" placeholder=\"Password\" id=\"pwd\"  name=\"password\" onChange={(e)=> setPhone(e.target.value)} required/>\r\n              </span>\r\n              <button className=\"log-in\" type='submit'> Log In </button>\r\n             </div>\r\n\r\n             <div>\r\n  \r\n            <button className=\"btn submits sign-up\"><Link className='defaultLink' to={`/Register`}>Sign Up</Link>\r\n            <i class=\"fa fa-user-plus\" aria-hidden=\"true\"></i>\r\n            </button>\r\n            </div>\r\n           {Error}\r\n          </div>\r\n  \r\n</form>\r\n</div>\r\n\r\n        \r\n      \r\n    )\r\n\r\n    /*</div>\r\n      <div className='LogInPage'>\r\n            <form onSubmit={handleSubmit} className='logInBorder'>\r\n              <input className='phone_and_name' type='text' placeholder=\"Username\" onChange={(e)=> setUserName(e.target.value)}/> \r\n              <input placeholder=\"phone/password\" className='phone_and_name' type='text' onChange={(e)=> setPhone(e.target.value)}/>  \r\n              <button className='submit_button' type='submit'> Login</button> \r\n              <button  className='submit_button'> <Link className='defaultLink' to={`/Register`}>Register</Link></button>\r\n              {Error}\r\n               \r\n            </form>  \r\n            </div>*/\r\n}\r\n","\r\nimport React, { useState ,useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n\r\n  \r\n   useEffect( () =>\r\n   {\r\n    async function fetchData() {\r\n\r\n    getContacts().then(res=> setContacts(res))\r\n    }\r\n\r\n    fetchData();\r\n\r\n   },[setInfo])\r\n\r\n   async function getContacts()\r\n   {\r\n    const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+sessionStorage['id'],config);\r\n    setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen})\r\n    return(response.data.contacts)\r\n\r\n   }\r\n   \r\n\r\n  function getSearchContacts(str)\r\n  {\r\n    getContacts().then(res=>\r\n      {\r\n        let SearchResult =res.filter(contact=> contact.name.includes(str) === true)\r\n        setContacts(SearchResult)\r\n      })\r\n  }\r\n\r\n\r\n  const createContact = async(phone) =>\r\n  {\r\n\r\n    if(phone === info.phone)\r\n    {\r\n      console.log('cant Add yourself')\r\n       return;\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.phone === phone)\r\n\r\n    if(checkIfExists.length !== 0)\r\n    {\r\n      console.log('already exists')\r\n      return;\r\n    }\r\n\r\n    try{ \r\n\r\n      const response= await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByPhone/\" + phone,config)\r\n\r\n      if(response !== 'no such user')\r\n      {\r\n       const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName}\r\n       let newContacts = [...contacts,contact]\r\n       setContacts(newContacts)\r\n       let UpdatedUser={...info,contacts:newContacts}\r\n       try{\r\n         await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n       } catch(err){console.log(err)}\r\n      }\r\n      else console.log('user dosent exist')\r\n     \r\n    } catch(err){console.log(err)}\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact,getSearchContacts }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}","import React, { useState,useContext,useRef,useEffect} from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nconst SocketContext = React.createContext()\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext)\r\n}\r\n\r\nexport function SocketProvider({ userId, children }) {\r\n  const socket = useRef()\r\n  const [ConnectedUsers,setConnectedUsers] =useState([])\r\n\r\n\r\n  useEffect(()=>\r\n  {\r\n\r\n    async function fetchData() {\r\n    socket.current = io(\"wss://messagesapp1.herokuapp.com:443/\");\r\n    }\r\n    fetchData()\r\n\r\n  },[])\r\n\r\nuseEffect(()=>\r\n{\r\n  async function fetchData() {\r\n  socket.current.emit(\"AddUser\",sessionStorage['id'])\r\n  socket.current.on(\"getConnectedUsers\", users =>\r\n  {\r\n    setConnectedUsers(users)\r\n  })\r\n  }\r\nfetchData();\r\n\r\n\r\n},[userId])\r\n\r\n  return (\r\n    <SocketContext.Provider value={{socket,ConnectedUsers}}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  )\r\n}","import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const [createGroupFlag, setCreateGroupFlag] = useState(false);\r\n  const { socket, ConnectedUsers } = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n    async function fetchData() {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === conversationId)\r\n          {\r\n             setTypingFlag(user.name)\r\n          }\r\n        }\r\n    } )\r\n  }\r\n  fetchData();\r\n  },[selectedConversation])\r\n\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() {\r\n    if(selectedConversation)\r\n    {\r\n    if(!selectedConversation.isGroup)\r\n     {\r\n      if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n      {\r\n        setCurrentConversationIsConnected('')\r\n      }\r\n      else\r\n      {\r\n        let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n        setCurrentConversationIsConnected(response.data.LastSeen)\r\n      }\r\n     }\r\n    }\r\n  }\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,selectedConversation])\r\n\r\n  useEffect(() =>\r\n  {\r\n    async function fetchData() {\r\n     getConversations().then(res=> setConversations(res))\r\n    }\r\n    fetchData();\r\n    \r\n  }, []);\r\n\r\n  async function getConversations()\r\n  {\r\n    try{\r\n       let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n\r\n       let ConversationsList = response.data.map((conversation) =>\r\n       {\r\n         let UpdatedConversation= conversation\r\n\r\n         if (conversation.Participants.length === 1 && conversation.Name === sessionStorage[\"name\"])\r\n            UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n\r\n         if(selectedConversation)\r\n         {\r\n           if(selectedConversation.id === UpdatedConversation.id)\r\n              setSelectedConversation(UpdatedConversation)\r\n         }\r\n          \r\n         return UpdatedConversation;\r\n       })\r\n\r\n      return ConversationsList \r\n    } catch (err) {console.log(err);}\r\n  }\r\n\r\n\r\n\r\n\r\n  async function getSearchConverastions(str)\r\n  {\r\n\r\n        getConversations().then(res=>\r\n        {\r\n\r\n         let SearchResult = res.filter(conversation=> \r\n            conversation.Name.includes(str) ===true\r\n          )\r\n    \r\n          setConversations(SearchResult)\r\n        })\r\n  }\r\n        \r\n\r\n\r\n  async function createConversation(ids, name, image) {\r\n    let ConversationImage = image;\r\n    let isGroup = false;\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      console.log(\"no participants choosen\");\r\n      return;\r\n    }\r\n\r\n    //check if conversation already exists\r\n    let ConversationExists = null;\r\n    if (ids.length === 1) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      //if group\r\n      if (ids.length > 1) {\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        data.append({secure:true})\r\n        try{\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n        ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      \r\n    \r\n        isGroup = true;\r\n      }\r\n\r\n      let newConversation = {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: [],\r\n        LastMessage: { id: \"\", sender: \"\", message: \"\" },\r\n        ConversationImage: ConversationImage,\r\n        isGroup,\r\n      };\r\n\r\n      //updateDB\r\n      try {\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n        if (Response.data.status === \"created\") {\r\n          console.log(Response.data.conversation);\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent\r\n          if (Response.data.conversation.Messages.length > 0)\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n          // }\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n \r\n\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n   {\r\n\r\n      audio.play()\r\n\r\n      let ConversationExists = false;\r\n      let newListOfConversations = RefConversations.current.map((conversation) =>{\r\n          if (conversation._id === UpdatedConv._id) {\r\n            ConversationExists = true;\r\n            let newConv = { ...conversation,\r\n              Messages: UpdatedConv.Messages,\r\n              LastMessage: UpdatedConv.LastMessage,};\r\n            if (currentConversationRef.current) {\r\n              if (currentConversationRef.current._id === UpdatedConv._id)\r\n                setSelectedConversation(newConv);\r\n            }\r\n\r\n            return newConv;\r\n          } else return conversation;\r\n        }\r\n      );\r\n\r\n\r\n      if (!ConversationExists) {\r\n        if (!UpdatedConv.isGroup)\r\n         {\r\n           let newConversation = { ...UpdatedConv,\r\n            Name: UpdatedConv.Participants[0].name,\r\n            ConversationImage: UpdatedConv.Participants[0].imageName,\r\n          };\r\n          setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n        } else\r\n          setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n      } else setConversations(newListOfConversations);\r\n    },[setConversations]);\r\n\r\n  useEffect(() => {\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  }, [conversations, selectedConversation]);\r\n\r\n\r\n  const updateSenderConversation = (AddMessage) => {\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => {\r\n      if (conversation._id === AddMessage._id) {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } else return conversation;\r\n    });\r\n\r\n    if (ConversationExists) {\r\n      setConversations(newListOfConcversations);\r\n    } else\r\n      setConversations((prevConversations) => [\r\n        ...prevConversations,\r\n        AddMessage,\r\n      ]);\r\n  };\r\n\r\n\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n      let parts = new Intl.DateTimeFormat('en', {\r\n      hc: 'h12',\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      image: info.imageName,\r\n    };\r\n    let AddMessage = {\r\n      ...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n    socket.current.emit(\"send-message\", {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        createGroupFlag,\r\n        setCreateGroupFlag,\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n","import { Avatar} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport React from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useUser } from '../contexts/userprovider';\r\nimport '../css/conversations.css'\r\n\r\nexport default function Conversations() {\r\n    const {setSelectedConversation,selectedConversation,conversations} =useConversations()\r\n    const {info} =useUser()\r\n  \r\nasync function handleSelectedConversation(conversation) \r\n{\r\n    setSelectedConversation(conversation)\r\n}\r\n  return (\r\n          <div className='Chats' >\r\n              <div className='contacts_list'>\r\n              {conversations.map((conversation,index)=>\r\n              {\r\n                 return  ( <div key={index}  onClick={()=>handleSelectedConversation(conversation)}  className='ChatsListItem'>\r\n                     <Avatar src={process.env.PUBLIC_URL + conversation.ConversationImage}/>\r\n                     <div className='chatInfo'>\r\n                     <span   className='chatName' ><h2>{conversation.Name}</h2> </span>\r\n                     <span> {(conversation.LastMessage.message).slice(0,25)}... </span>\r\n                     </div>\r\n            \r\n                  </div>)\r\n                    \r\n                })}\r\n                </div>\r\n\r\n                </div>\r\n          \r\n\r\n  )\r\n}","  import { Avatar,Button } from '@material-ui/core';\r\nimport React from 'react'\r\nimport { useUser } from '../contexts/userprovider';\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport '../css/conversations.css'\r\n\r\nexport default function Contacts({newConversationCallback,openModalCallback}) {\r\n  const { contacts } = useUser()\r\n  const { createConversation,setCreateGroupFlag} = useConversations()\r\n\r\n  function startConversation({id,name,image}) \r\n  {\r\n    let ids=[id]\r\n    createConversation(ids,name,image)\r\n    newConversationCallback()\r\n  }\r\n\r\n  return (\r\n\r\n    <div className='Chats' >\r\n      <h4 className='new_chat_title'>Start New Chat:</h4>            \r\n    <Button  style={{height:'30px' ,margin:'5px 0px',fontSize:'10px'}} onClick={()=>openModalCallback()}\r\n        className='add_new_Button' >\r\n                      Create Group\r\n                    </Button>\r\n      <div className='contacts_list'>\r\n      {contacts.map(contact =>\r\n       {\r\n          return(\r\n         \r\n          <div className='ChatsListItem' onClick={()=>startConversation({id:contact.id,name:contact.name,image:contact.imageName})}>\r\n            <Avatar src={contact.imageName}/>\r\n           <div className='chatInfo'> <h2>{contact.name} </h2> </div>\r\n          </div> \r\n           )\r\n        })}\r\n        </div>\r\n\r\n  </div>)\r\n  \r\n};","import { useRef } from 'react'\r\nimport '../css/addnew.css'\r\nimport { useUser } from '../contexts/userprovider';\r\nimport {IconButton } from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nexport default function AddNewContact({closeModal}) {\r\n\r\n   const phoneRef = useRef()\r\n   const {createContact} = useUser()\r\n   \r\n\r\n  async function handleSubmit()\r\n  {\r\n    createContact(phoneRef.current.value)\r\n\r\n    closeModal();\r\n  }\r\n\r\n  return (\r\n   \r\n   <div className='add_new'>\r\n            <div className='add_new_contact_border'>\r\n              <div className='add_contact_model'>\r\n                <div className='title_and_close'>\r\n                  <h2 className='add_contact_title'>Enter contact phone</h2> \r\n                  <IconButton className='close_add_new'  onClick={()=>closeModal()}>\r\n                    <CloseIcon fontSize='large' /> \r\n                  </IconButton>\r\n               </div>\r\n        \r\n              <div className='add_new_contact'>\r\n               \r\n                <h3 className='enter_phone'>Phone :</h3>\r\n                <input className='add_new_input' type='text' ref={phoneRef} required/>\r\n                <button className='add_new_button' onClick={handleSubmit}> Add Contact</button>\r\n              </div>\r\n                \r\n              </div>\r\n\r\n            </div>\r\n          \r\n               \r\n \r\n        </div>\r\n\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport { useUser } from '../contexts/userprovider'\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport {Button,Avatar,IconButton} from '@material-ui/core';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\nfunction CreateNewGroup( { closeModal }) {\r\n\r\n    const [selectedContactsId, setSelectedContactsId] = useState([])\r\n    const { contacts } = useUser()\r\n    const { createConversation,setCreateGroupFlag } = useConversations()\r\n    const [groupName,setGroupName] =useState('')\r\n    const [groupImage,setGroupImage] =useState()\r\n    const [previewImage,setPreviewImage]=useState()\r\n    const [goToParticipants,setGoToParticipants] = useState(false)\r\n\r\n    function createGroup()\r\n    {\r\n        setCreateGroupFlag(false)\r\n        createConversation(selectedContactsId,groupName,groupImage)\r\n        closeModal()\r\n    }\r\n\r\n    function handleCheckboxChange(contactId) \r\n    {\r\n        if(selectedContactsId.includes(contactId))\r\n        {\r\n            setSelectedContactsId(prevSelectedContactsId =>\r\n            {\r\n                return (prevSelectedContactsId.filter(id=> id!==contactId))\r\n            } )\r\n        }\r\n  \r\n        else\r\n        {\r\n           setSelectedContactsId(prevSelectedContactsId=>\r\n            {\r\n              return [...prevSelectedContactsId,contactId]\r\n            })\r\n        }   \r\n    }\r\n\r\n    function handleFileUpload(e) {\r\n        setGroupImage(e.target.files[0])\r\n        setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n      }\r\n\r\n\r\n    return (\r\n        <div className='add_new'>\r\n        <div className='add_new_group_border'>\r\n        <div className='new_conversation new_group'>\r\n\r\n      {goToParticipants !==true ?\r\n         <div className='top_new_group'>\r\n\r\n          {previewImage?  \r\n\r\n             <div className='change_group_image'> \r\n            <Avatar  src={previewImage} style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px'}}> </Avatar>\r\n            <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white'}}>\r\n            <PeopleAltIcon style={{position:'absolute',zIndex:'0', opacity:'0.1',height: '80px', width: '80px' }}/>\r\n          \r\n             <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n             <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n            <span style={{fontSize:'10px'}}>Change Image </span>\r\n         \r\n            </div>\r\n            </div>\r\n           \r\n            :\r\n          <div className='add_group_image'>\r\n          <Avatar   style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px'}}>\r\n           < PeopleAltIcon style={{position:'absolute',zIndex:'0', opacity:'0.1',height: '80px', width: '80px' }}/>\r\n            <div  style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white'}}>\r\n             <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n             <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n            <span style={{fontSize:'10px'}}>add group image</span>\r\n         \r\n            </div>\r\n            </Avatar>\r\n            </div> }\r\n          <div className='group_name'>\r\n          <span style={{padding:'5px', margin:'5px' , fontSize:'13px', color:'#fcfcfc'}}> Group Name:</span>\r\n          <input onChange={(e)=>setGroupName(e.target.value)}/>\r\n          </div>\r\n          <button style={{display:'flex',alignItems:'center',width:'180px',justifyContent:'center'}} className='add_new_button'  onClick={()=>setGoToParticipants(true)}><ArrowBackIcon style={{margin:'5px'}} /> Add Members</button>\r\n          </div>\r\n          :\r\n          <div >\r\n          <h3 className='add_contact_title'> choose Members :</h3>\r\n          <div style={{overflowY:'overlay',height:'200px'}}>\r\n          {contacts.map(contact =>\r\n            {\r\n            return(\r\n\r\n                <div className='contactItem' >\r\n                 <input\r\n                type=\"checkbox\"\r\n                value={selectedContactsId.includes(contact.id)}\r\n                id={contact.name}\r\n                style={{marginRight:'10px'}}\r\n                onChange={() => handleCheckboxChange(contact.id)}/>\r\n                   <Avatar  src={process.env.PUBLIC_URL + contact.imageName}   fontSize='large'/>\r\n                   <div className='contactInfo'> <h2 style={{fontWeight:'400'}}>{contact.name} </h2> </div>\r\n                </div>\r\n            )}) }  \r\n            </div>\r\n            <div style={{display:'flex' , justifyContent:'center'}}>\r\n             <button className='add_new_button'  type=\"submit\" onClick={()=>createGroup()}>Create</button>\r\n             </div>\r\n\r\n             </div>}\r\n\r\n         \r\n\r\n        \r\n\r\n\r\n          \r\n\r\n            \r\n            \r\n        </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateNewGroup\r\n","import '../css/sidebar.css'\r\nimport React from 'react'\r\nimport { useState} from 'react';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\r\nimport { Avatar, IconButton,Button, Modal } from '@material-ui/core';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Conversations from './conversations';\r\nimport Contacts from './contacts';\r\nimport AddNewContact from './addnewcontact'\r\nimport { useUser } from '../contexts/userprovider';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {useConversations } from '../contexts/conversationsprovider';\r\nimport CreateNewGroup from './createnewgroup';\r\n\r\n\r\n\r\n\r\nexport default function SideBar({id}) {\r\n    const [choosenAct,setChoosenAct]=useState('conversations')\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const {info,getSearchContacts} =useUser()\r\n    const [searchFlag,setSearchFlag] =useState(false)\r\n    const {getSearchConverastions} = useConversations()\r\n    const [choosenModal,setChoosenModal] =useState('')\r\n\r\n    \r\n    function handleChange(e)\r\n    {\r\n      if(choosenAct === 'conversations')\r\n       getSearchConverastions(e.target.value)\r\n      else getSearchContacts(e.target.value)\r\n    }\r\n\r\n    function closeModal() {\r\n        setModalOpen(false)\r\n      }\r\n\r\n    function openChoosenModal(modalType)\r\n    {\r\n      setModalOpen(true)\r\n      setChoosenModal(modalType)\r\n    }\r\n\r\n    return (\r\n    \r\n        <div className='sideBar'>\r\n            <div className='sidebar_top'>\r\n                <Avatar src={info.imageName}   fontSize='large'/>\r\n                <div className='sidebar_top_right'>\r\n                    <IconButton onClick={()=>setChoosenAct('conversations')}>\r\n                      <ChatIcon fontSize='large' />\r\n                    </IconButton>\r\n                    <IconButton fontSize='large' onClick={()=>setChoosenAct('contacts')}>\r\n                      <PeopleIcon  fontSize='large'  />\r\n                    </IconButton>\r\n                    <IconButton >\r\n                      <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n         \r\n              {searchFlag?  \r\n              <div className='activeSearch' >\r\n               <div className='arrowButton'>\r\n               <IconButton onClick={()=>setSearchFlag(false)} >\r\n                      <ArrowBackIcon fontSize='large' />\r\n                    </IconButton>\r\n                    </div>\r\n              <input className='searchBlock' type='text' onChange={handleChange}/> </div>:\r\n              <div className='searchBar'>\r\n               <div className='searchContainer' >\r\n                <SearchOutlined/>\r\n                <input placeholder='search' type='text' onClick={()=>setSearchFlag(true)}/>\r\n              </div>\r\n            </div>}\r\n           \r\n            {choosenAct==='contacts'?\r\n            <div>\r\n                   <div className='sidebar_middle'>\r\n                    <Button \r\n                    style={{fontSize:'10px'}}  \r\n                    onClick={()=>openChoosenModal('NEW_CONTACT')}\r\n                    className='add_new_Button' >\r\n                      Add New Contact\r\n                    </Button>\r\n\r\n                    </div>\r\n                <div className='sidebar_bottom'>\r\n                <Contacts newConversationCallback={()=> setChoosenAct('conversations')}  openModalCallback={()=>openChoosenModal('NEW_GROUP')}/>\r\n                </div>\r\n                </div>\r\n              \r\n                :   <div className='sidebar_bottom'><Conversations/></div>}\r\n           \r\n\r\n\r\n         \r\n      <Modal className='Modal' open={modalOpen} onClose={closeModal} >\r\n      {choosenModal === 'NEW_GROUP' ? <CreateNewGroup closeModal={closeModal}  /> : <AddNewContact closeModal={closeModal} /> }\r\n      </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {useState} from 'react'\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nfunction Message({message}) \r\n{\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n  const [SelectedImageURL,setSelectedImageURL] =useState(null)\r\n\r\n  function openImage(URL)\r\n  {\r\n    setModalOpen(true)\r\n    setSelectedImageURL(URL)  \r\n  }\r\n\r\n  return (\r\n\r\n    <div>      \r\n      <span className='sender_name'>{message.name}</span>\r\n      {message.containsImage? \r\n      <img className='image_in_message' src={message.imageURL} alt='' onClick={()=>openImage(message.imageURL)} width='200px' height='200px' /> \r\n      : ''}\r\n      <p className='message_time_and_content'><span className='message_content'>{message.message}</span> \r\n      <span className='message_time'>{(message.timeSent).substring(11,17)}</span> </p>\r\n\r\n      <Dialog onClose={()=> setModalOpen(false)}  open={modalOpen}>\r\n        <img src={SelectedImageURL} alt=''  height='500px' width='500px'/>\r\n      </Dialog>\r\n    </div>\r\n    \r\n  )}\r\n\r\nexport default Message\r\n\r\n","import React from 'react'\r\nimport '../css/audiomessage.css'\r\nimport { Avatar } from '@material-ui/core'\r\n\r\nfunction AudioMessage({message,sender,image})\r\n{\r\n    const messageColor = sender.includes('chat_reciever')?  'reciever':'sender' \r\n\r\n    return (\r\n    \r\n       <div className='message_with_audio'>\r\n           <div className='audio_and_time'> \r\n               <div className={messageColor}>\r\n                   <audio   controls controlsList=\"nodownload\" >\r\n                     <source src={message.recordURL} type=\"audio/mp3\"/>\r\n                   </audio>\r\n               </div>\r\n               <span className='message_time'>{(message.timeSent).substring(11,17)}</span> \r\n           </div>\r\n           <Avatar src={image} style={{ height: '50px', width: '50px' }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AudioMessage\r\n","import React, { useRef } from 'react'\r\nimport { useState ,useCallback,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\nimport {IconButton } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Picker from 'emoji-picker-react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\nimport axios from 'axios'\r\nimport Message from './message';\r\nimport AudioMessage from './audiomessage';\r\n\r\n\r\n\r\n\r\nfunction ChatBody(props) {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation} = useConversations()\r\n    const inputRef = useRef(null)\r\n  \r\n    const [emojiFlag,setEmojiFlag] = useState(false)\r\n    const [recordFlag,setRecordFlag] =useState(false)\r\n    const {status,startRecording,stopRecording,mediaBlobUrl,clearBlobUrl} = useReactMediaRecorder({audio: true })\r\n    const [audioBlob,setAudioBlob] = useState(null)\r\n\r\n\r\n    const setRef = useCallback((node) => \r\n    {\r\n\r\n      if(node)\r\n         node.scrollIntoView({smooth:true})\r\n    },[])\r\n\r\n\r\n  useEffect( () => {\r\n    async function fetchData() {\r\n    if(audioBlob != null)\r\n    {\r\n      let audio= await fetch(mediaBlobUrl).then(res=> res.blob())\r\n      const data = new FormData();\r\n           \r\n      data.append('file', audio);\r\n      data.append('resource_type', 'video');\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n      try{\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/video/upload\",data)\r\n        let recordURL = response.data.url\r\n        recordURL=(recordURL.slice(0,-4))\r\n        recordURL+= 'mp3'\r\n        setRecordFlag(false)\r\n        clearBlobUrl()\r\n        sendMessage(Text,null,null,recordURL)\r\n        setRecordFlag(false)\r\n  \r\n      }catch(err){console.log(err)}\r\n    }\r\n    }\r\n\r\n    fetchData();\r\n \r\n  }, [audioBlob])\r\n\r\n\r\n\r\n    function typing(e)\r\n    {\r\n        setText(e.target.value)\r\n        if (socket.current == null) return;\r\n        socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n    }\r\n\r\n    function handleSubmit(e)\r\n    {\r\n      e.preventDefault()\r\n      sendMessage(Text,false,null,null)\r\n\r\n      setText(' ')\r\n    }\r\n\r\n    async function handleImage(e)\r\n    {\r\n      const data = new FormData()\r\n      data.append('file',e.target.files[0])\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n      try{\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n\r\n      props.imageCallback(response.data.url)\r\n      }catch(err){console.log(err)}\r\n    }\r\n\r\n   function recordStart()\r\n   {\r\n    setRecordFlag(true)\r\n    startRecording()\r\n   }\r\n \r\n    async function handleRecord()\r\n    {\r\n         stopRecording()\r\n         let res = await fetch(mediaBlobUrl)\r\n         setAudioBlob(res.blob())            \r\n    }\r\n\r\n  function cancelRecord()\r\n  {\r\n    stopRecording()\r\n    clearBlobUrl()\r\n    setRecordFlag(false)\r\n  }\r\n\r\n    function updateRecordingDiv()\r\n    {\r\n      let recordDiv = <div>\r\n      <IconButton>\r\n        <CloseIcon fontSize='large' style={{color:'red'}} onClick={cancelRecord} />\r\n      </IconButton>\r\n      <IconButton>\r\n         <CheckIcon fontSize='large'style={{color:'green'}} onClick={handleRecord} />\r\n      </IconButton>\r\n      </div>\r\n\r\n      return recordDiv\r\n  \r\n    }\r\n    \r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setText(Text + emojiObject.emoji)\r\n      };\r\n\r\n\r\n\r\n    return(\r\n\r\n      <div className= 'body_and_footer'>\r\n        <div className='chat_body'>\r\n        {selectedConversation.Messages.map((message,index)=>\r\n         {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender = message.id===sessionStorage['id']? 'chat_message' : ' chat_message chat_reciever'\r\n            let image=message.id===sessionStorage['id']? info.imageName :selectedConversation.ConversationImage\r\n\r\n            return (\r\n                <div key={index} className={sender} ref={lastMessage ? setRef : null}>\r\n                    {message.containsRecord ? \r\n                    <AudioMessage message={message} sender={sender} image={image}/> : <Message message={message}/> }\r\n\r\n                </div> \r\n          )}\r\n        )}\r\n\r\n      </div>\r\n\r\n      <div className='chat_footer_with_stickers'>\r\n         {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n         <div className='chat_footer'>\r\n           {emojiFlag? <IconButton  onClick={()=>setEmojiFlag(false)}><CloseIcon fontSize='large'/> </IconButton>:''}\r\n           <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n             <InsertEmoticonIcon fontSize='large'/>\r\n           </IconButton>\r\n           <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n           <label htmlFor=\"icon-button-file\">\r\n             <IconButton component=\"span\">\r\n               <ImageIcon  fontSize='large'/>\r\n             </IconButton>\r\n           </label> \r\n\r\n           <form onSubmit={handleSubmit} className='message_section'>\r\n             <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n             <button type='submit' > send </button>\r\n           </form>\r\n           {recordFlag? updateRecordingDiv() :   \r\n           <IconButton onClick={recordStart}>\r\n             <MicIcon fontSize='large'  />\r\n           </IconButton>}\r\n         </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n    \r\n)}\r\n\r\nexport default ChatBody\r\n","import React, { useRef } from 'react'\r\nimport '../css/chat.css'\r\nimport '../css/sendimagebody.css'\r\nimport { useState} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {IconButton } from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\n\r\nfunction SendImageBody(props) {\r\n\r\n\r\n    const inputRef = useRef(null)\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation} = useConversations()\r\n\r\n    function handleSubmit(imageFlag)\r\n    {\r\n        if(imageFlag===true)\r\n           sendMessage(Text,true,props.imageURL)\r\n      setText(' ')\r\n      props.backToChat()\r\n\r\n    }\r\n\r\n    function typing(e)\r\n    {\r\n        setText(e.target.value)\r\n        if (socket.current == null) return;\r\n        socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n    }\r\n\r\n    return (\r\n        <div className='SendImage'>\r\n\r\n\r\n        <div className='sendImageHeader'></div>\r\n           <IconButton type='submit' onClick={()=>handleSubmit(false)}>\r\n             <CloseIcon fontSize='large' /> \r\n           </IconButton>\r\n\r\n            \r\n            <img src= {props.imageURL} alt='' height='300px' width='300px'/>\r\n\r\n\r\n          <div className='add_message'>\r\n          <form onSubmit={()=>handleSubmit(true)} className='message_section'>\r\n          <IconButton type='submit'>\r\n            <SendIcon fontSize='large'/>\r\n         </IconButton>\r\n         <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n      </form>\r\n\r\n\r\n          </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SendImageBody\r\n","import '../css/chat.css'\r\nimport React from 'react'\r\nimport { useState} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { Avatar } from '@material-ui/core'\r\nimport ChatBody from './chatbody';\r\nimport SendImageBody from './sendimagebody';\r\n\r\nexport default function Chat() {\r\n\r\n    const {selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag} = useConversations()\r\n    const [imageFlag,setImageFlag] =useState(false)\r\n    const [imageURL,setImageURL] =useState(false)\r\n\r\n    const groupheader = () =>\r\n    {\r\n      let returnValue = ''\r\n      if(typingFlag !== '')\r\n      {\r\n        returnValue = <div className='lastSeen'> {typingFlag} is typing...</div>\r\n        setTimeout(()=> setTypingFlag(''),1000)\r\n      }\r\n\r\n      else\r\n      {\r\n        let UsersInGroup = ''\r\n        selectedConversation.Participants.forEach((participant,index)=> \r\n        {\r\n            if(index ===  selectedConversation.Participants.length-1 )\r\n                UsersInGroup = UsersInGroup + participant.name\r\n            else\r\n                UsersInGroup= UsersInGroup + participant.name + ', '\r\n        })\r\n            \r\n        returnValue=  <div className='lastSeen'>{UsersInGroup} </div>\r\n\r\n      }\r\n\r\n      return returnValue\r\n    }\r\n\r\n    function chatBodyCallback(image)\r\n    {\r\n      setImageURL(image)\r\n      setImageFlag(true)\r\n    }\r\n\r\n    function backToChatCallback()\r\n    {\r\n      setImageURL(null)\r\n      setImageFlag(false)\r\n    }\r\n\r\n    const privateConversationHeader = () =>\r\n    {\r\n       let returnValue = ''\r\n       if(currentConversationIsConnected === '')\r\n       {\r\n        if(typingFlag !== '')\r\n        {\r\n            returnValue = <div className='lastSeen'> typing...</div>\r\n            setTimeout(()=> setTypingFlag(''),1000)\r\n\r\n        }\r\n\r\n        else returnValue = <div className='connected'><div className='circle'></div> online </div>\r\n            \r\n       }\r\n       else returnValue = <div className='lastSeen'>{currentConversationIsConnected}</div>\r\n\r\n\r\n      return returnValue\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='chat'>\r\n            <div className='chat_header'>\r\n                <Avatar src={selectedConversation.ConversationImage}/>\r\n                <div className='chat_header_info'>\r\n                   <h2> {selectedConversation.Name} </h2> \r\n                   {selectedConversation.isGroup?  groupheader() : privateConversationHeader()}\r\n               </div>\r\n            </div>\r\n\r\n            {imageFlag?   <SendImageBody imageURL={imageURL} backToChat={backToChatCallback}/>:<ChatBody imageCallback={chatBodyCallback}/>}  \r\n\r\n        </div>\r\n    )\r\n}\r\n","import '../css/dashboard.css'\r\nimport React from 'react'\r\nimport SideBar from './sidebar'\r\nimport Chat from './chat'\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nexport default withRouter(function Dashboard({id}) {\r\n    const {selectedConversation} =useConversations()\r\n\r\n    return (\r\n        <div className='dashboard'>\r\n       \r\n           <div className='dashboard_body'>\r\n              <SideBar id={id}/>\r\n              {selectedConversation!==undefined?  <Chat id={id}  />: ''}\r\n           </div>\r\n        </div>\r\n    )\r\n})\r\n","import {useState} from 'react'\r\nimport '../css/login.css'\r\nimport axios from 'axios'\r\nimport {Link,useHistory} from 'react-router-dom'\r\n\r\n \r\n\r\nfunction Register(props) {\r\n   \r\n    const[phone,setPhone] =useState('')\r\n    const[name,setName] =useState('')\r\n    const [Picture,setPicture] =useState()\r\n    const history=useHistory();\r\n\r\n\r\n    /*get user information and token from DB*/\r\n    async function handleSubmit(e)\r\n    {\r\n\r\n        e.preventDefault();\r\n\r\n        let picturePath=''\r\n        const data = new FormData()\r\n        data.append('file',Picture)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        data.append({secure:true})\r\n        try{\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n        picturePath =response.data.url\r\n        }catch(err){console.log(err)}\r\n\r\n\r\n\r\n        \r\n        \r\n        let obj = {name: name,phone: phone,imageName:picturePath,contacts:[],LastSeen:'last seen at...'}\r\n\r\n\r\n       try{\r\n            const response = await axios.post(\"https://messagesapp1.herokuapp.com/api/logIn/Register\",obj)\r\n   \r\n            sessionStorage['config']= response.data.token \r\n            sessionStorage['id'] = response.data.User._id\r\n            sessionStorage['name'] = response.data.User.name\r\n            props.CanLogIn(response.data.User._id)\r\n\r\n            history.push('/App')\r\n        }\r\n       catch(err){console.log(err)}\r\n\r\n          \r\n    }\r\n        \r\n\r\n    function handleFileUpload(e) {\r\n        setPicture(e.target.files[0])\r\n      }\r\n\r\n    return (\r\n\r\n        <div className=\"overlay\">\r\n        <link rel=\"stylesheet\" href=\"http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css\"></link>\r\n     <form className='login_form' onSubmit={handleSubmit}>\r\n       <div className=\"con\">\r\n         <header className=\"head-form\">\r\n           <h2>Register</h2>\r\n           <p>welcome to  my whatsApp</p>\r\n         </header>\r\n       <div className=\"field-set\">\r\n         <span className=\"input-item\">\r\n           <i class=\"fa fa-user-circle\"></i>\r\n         \r\n         <input className=\"form-input\" id=\"txt-input\" type=\"text\" placeholder=\"@UserName\" onChange={(e)=> setName(e.target.value)} required />\r\n\r\n         </span>\r\n         <span className=\"input-item\">\r\n         <i class=\"fa fa-key\"></i>\r\n       \r\n         <input className=\"form-input\" type=\"password\" placeholder=\"Password\" id=\"pwd\"  name=\"password\" onChange={(e)=> setPhone(e.target.value)} required/>\r\n         </span>\r\n        \r\n           \r\n         <div id=\"fileupload\" >\r\n        <div className=\"myfileupload-buttonbar \">\r\n            <label className=\"myui-button\">\r\n            <i class=\"fa fa-upload\" aria-hidden=\"true\"></i>\r\n                <span className='text' >Add Picture</span>\r\n                <input id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n            </label>\r\n        </div>\r\n    </div>\r\n   \r\n         <button className=\"log-in\" type='submit'> Register </button>\r\n        </div>\r\n\r\n        <div>\r\n\r\n       <button className=\"btn submits sign-up\"><Link className='defaultLink' to={`/`}>back to Log In</Link>\r\n       <i class=\"fa fa-user-plus\" aria-hidden=\"true\"></i>\r\n       </button>\r\n       </div>\r\n     </div>\r\n\r\n</form>\r\n</div>\r\n  \r\n    )\r\n\r\n    /*      <div className=\"LogInPage\">\r\n             <form onSubmit={handleSubmit} className='logInBorder'>\r\n             enter your phone:  \r\n              <input type='text' onChange={(e)=> setPhone(e.target.value)}/> \r\n              enter your name: \r\n              <input type='text' onChange={(e)=> setName(e.target.value)}/>  \r\n              \r\n              <input type=\"file\" onChange={handleFileUpload} />\r\n                <button type='submit'> Sign Up</button>\r\n            </form>     \r\n        </div>*/\r\n\r\n}\r\n\r\n\r\nexport default Register\r\n","import '../css/app.css'\nimport {useState} from 'react'\nimport LogIn from './login'\nimport Dashboard from './dashboard'\nimport  {UserProvider} from '../contexts/userprovider'\nimport {ConversationsProvider} from '../contexts/conversationsprovider'\nimport { SocketProvider } from '../contexts/socketprovider'\nimport {BrowserRouter as Router,Switch, Route,Redirect} from 'react-router-dom'\nimport Register from './register'\n\n\n\n\nfunction App() {\n\n  const [id,setId] =useState()\n\n  const dashboard = (\n   <SocketProvider userId={id} >\n     <UserProvider id={id}>\n      <ConversationsProvider >\n        <Dashboard  id={id}/>\n      </ConversationsProvider>\n     </UserProvider>\n    </SocketProvider>\n  )\n  \n\n\n  return (\n\n    <Router >\n      <div className=\"App\">\n         <Switch>\n           {sessionStorage['id']}\n            <Route exact path='/' > <LogIn CanLogIn={setId}/></Route> \n            <Route path='/Register' > <Register CanLogIn={setId}/></Route>\n            {sessionStorage['id']?  <Route exact path='/App' > {dashboard} </Route>:<Redirect to=\"/\" />}\n         </Switch>\n  \n      </div>\n\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}