{"version":3,"sources":["components/login.js","contexts/userprovider.js","contexts/socketprovider.js","contexts/conversationsprovider.js","components/conversations.js","components/contacts.js","components/addnewcontact.js","components/createnewgroup.js","components/sidebar.js","components/message.js","components/audiomessage.js","components/chatbody.js","components/sendimagebody.js","components/addgroupmember.js","components/chat.js","components/dashboard.js","components/register.js","components/App.js","index.js"],"names":["LogIn","props","useState","phone","setPhone","UserName","setUserName","Error","setError","history","useHistory","e","a","preventDefault","obj","name","axios","post","response","data","sessionStorage","token","User","_id","CanLogIn","push","class","className","onSubmit","id","type","placeholder","onChange","target","value","required","to","style","margin","UserContext","React","createContext","useUser","useContext","UserProvider","children","contacts","setContacts","info","setInfo","config","getContacts","get","imageName","LastSeen","useEffect","then","res","fetchData","createContact","status","message","filter","contact","length","newContacts","UpdatedUser","put","console","log","Provider","getSearchContacts","str","SearchResult","includes","SocketContext","useSocket","SocketProvider","userId","socket","useRef","ConnectedUsers","setConnectedUsers","current","io","emit","on","users","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversation","setSelectedConversation","RefConversations","currentConversationRef","typingFlag","setTypingFlag","currentConversationIsConnected","setCurrentConversationIsConnected","headers","showDetails","setShowDetails","removedFromGroupFlag","setRemovedFromGroupFlag","audio","Audio","getConversations","ConversationsList","map","conversation","UpdatedConversation","Participants","isGroup","Name","ConversationImage","image","ids","groupFlag","ConversationExists","find","participants","createdDate","parts","Intl","DateTimeFormat","hc","year","month","day","hour","minute","timeZone","formatToParts","Date","reduce","acc","part","Object","create","FormData","append","url","newConversation","creatorId","Messages","LastMessage","sender","description","Response","prevConversations","updatedConversation","updateDBConv","addCurrentParticipant","UpdatedConversations","forEach","user","conversationId","some","addMessageToConversation","useCallback","UpdatedConv","play","newListOfConversations","newConv","off","sendMessage","text","imageFlag","imageURL","recordURL","time","recordFlag","CurrentMessage","timeSent","containsImage","containsRecord","AddMessage","newListOfConcversations","updateSenderConversation","createConversation","getSearchConverastions","UpdateConversation","Conversations","index","onClick","handleSelectedConversation","Avatar","src","process","slice","Contacts","newConversationCallback","openModalCallback","Button","height","fontSize","startConversation","AddNewContact","closeModal","userNameRef","error","responseStatus","IconButton","ref","CreateNewGroup","selectedContactsId","setSelectedContactsId","groupName","setGroupName","groupImage","setGroupImage","previewImage","setPreviewImage","goToParticipants","setGoToParticipants","handleFileUpload","files","window","URL","createObjectURL","flex","marginLeft","paddingRight","width","backgroundColor","marginTop","display","flexDirection","alignItems","position","zIndex","color","opacity","accept","padding","borderRadius","border","outline","justifyContent","overflowY","contactId","prevSelectedContactsId","for","fontWeight","SideBar","choosenAct","setChoosenAct","modalOpen","setModalOpen","searchFlag","setSearchFlag","choosenModal","setChoosenModal","openChoosenModal","modalType","Modal","open","onClose","Message","SelectedImageURL","setSelectedImageURL","alt","substring","Dialog","AudioMessage","messageColor","controls","controlsList","ChatBody","Text","setText","inputRef","emojiFlag","setEmojiFlag","setRecordFlag","useReactMediaRecorder","startRecording","stopRecording","mediaBlobUrl","clearBlobUrl","audioBlob","setAudioBlob","setRef","node","scrollIntoView","smooth","imageCallback","handleRecord","fetch","blob","cancelRecord","lastMessage","choosenClass","onEmojiClick","emojiObject","event","emoji","pickerStyle","visibility","htmlFor","component","Conversation","SendImageBody","handleSubmit","backToChat","AddGroupMember","conversationContacts","setConversationContacts","participant","newParticipants","messages","AddMember","useStyles","makeStyles","root","options","Chat","setImageFlag","setImageURL","EditGroupNameGlag","setEditGroupNameGlag","EditGroupDescriptionGlag","setEditGroupDescriptionGlag","Description","setDescription","classes","dialogOpen","setDialogOpen","deleteUserDialog","setDeleteUserDialog","userToDelete","setUserToDelete","privateConversationHeader","returnValue","setTimeout","chatSide","UsersInGroup","groupheader","paddingLeft","LastMasage","changeGroupName","defaultValue","onDescriptionEmojiClick","changeGroupDescription","marginRight","borderBottom","cursor","existsFlag","participantId","openConversation","flexGrow","beforeDeleteUser","removeFromGroup","removeUserFromGroup","withRouter","undefined","Register","setName","Picture","setPicture","picturePath","App","setId","dashboard","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7c9a26d.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport '../css/login.css'\r\nimport axios from 'axios'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\n\r\n\r\n\r\nexport default function LogIn(props) {\r\n\r\n    const [phone,setPhone] = useState('');\r\n    const [UserName,setUserName] = useState('');\r\n\r\n    const [Error,setError] = useState('')\r\n    const history=useHistory();\r\n\r\n\r\n\r\n    /*get user information and token from DB*/\r\n    async function handleSubmit(e)\r\n    {\r\n        setError('')\r\n        e.preventDefault()\r\n        let obj = {name: UserName,phone: phone}\r\n        let response = await axios.post(\"https://messagesapp1.herokuapp.com/api/logIn\",obj)\r\n\r\n        if(response.data !== \"not found\")\r\n        {\r\n           sessionStorage['config']= response.data.token \r\n           sessionStorage['id'] = response.data.User._id\r\n           sessionStorage['name'] = response.data.User.name\r\n           props.CanLogIn(response.data.User._id)\r\n\r\n           history.push('/App')\r\n        }\r\n        \r\n        else\r\n           setError(\"One or more of your identification details is incorrect.\")\r\n    }\r\n\r\n \r\n\r\n    return (\r\n       \r\n        <div class=\"overlay\">\r\n        \r\n          <form className='login_form' onSubmit={handleSubmit}>\r\n            <div class=\"con\">\r\n              <header class=\"head-form\">\r\n                <h2>Log In</h2>\r\n                <p>welcome to  my whatsApp</p>\r\n              </header>\r\n            <div class=\"field-set\">\r\n              <span class=\"input-item\">\r\n                <i class=\"fa fa-user-circle\"></i>\r\n              \r\n              <input class=\"form-input\" id=\"txt-input\" type=\"text\" placeholder=\"@UserName\" onChange={(e)=> setUserName(e.target.value)} required />\r\n\r\n              </span>\r\n              <span class=\"input-item\">\r\n              <i class=\"fa fa-key\"></i>\r\n            \r\n              <input class=\"form-input\" type=\"password\" placeholder=\"Password\" id=\"pwd\"  name=\"password\" onChange={(e)=> setPhone(e.target.value)} required/>\r\n              </span>\r\n              <button className=\"log-in\" type='submit'> Log In </button>\r\n             </div>\r\n\r\n             <div>\r\n  \r\n    \r\n           \r\n               <Link  className=\"submits sign-up defaultLink\" to={`/Register`}>     Sign Up<i style={{margin:'7px'}}class=\"fa fa-user-plus\" aria-hidden=\"true\"/></Link>\r\n      \r\n            </div>\r\n           {Error}\r\n          </div>\r\n  \r\n</form>\r\n</div>\r\n\r\n        \r\n      \r\n    )\r\n\r\n    /*</div>\r\n      <div className='LogInPage'>\r\n            <form onSubmit={handleSubmit} className='logInBorder'>\r\n              <input className='phone_and_name' type='text' placeholder=\"Username\" onChange={(e)=> setUserName(e.target.value)}/> \r\n              <input placeholder=\"phone/password\" className='phone_and_name' type='text' onChange={(e)=> setPhone(e.target.value)}/>  \r\n              <button className='submit_button' type='submit'> Login</button> \r\n              <button  className='submit_button'> <Link className='defaultLink' to={`/Register`}>Register</Link></button>\r\n              {Error}\r\n               \r\n            </form>  \r\n            </div>*/\r\n}\r\n","\r\nimport React, { useState ,useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n\r\n\r\n  \r\n   useEffect( () =>\r\n   {\r\n    async function fetchData() {\r\n\r\n    getContacts().then(res=> setContacts(res))\r\n    }\r\n\r\n    fetchData();\r\n\r\n   },[setInfo])\r\n\r\n   async function getContacts()\r\n   {\r\n    const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+sessionStorage['id'],config);\r\n    setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen})\r\n    return(response.data.contacts)\r\n\r\n   }\r\n   \r\n\r\n  function getSearchContacts(str)\r\n  {\r\n    getContacts().then(res=>\r\n      {\r\n        let SearchResult =res.filter(contact=> contact.name.includes(str) === true)\r\n        setContacts(SearchResult)\r\n      })\r\n  }\r\n\r\n\r\n  const createContact = async(name) =>\r\n  {\r\n    \r\n    if(name === info.name)\r\n    {\r\n       return {status:'error',message:'cant Add yourself'};\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.name === name)\r\n\r\n    if(checkIfExists.length !== 0)\r\n    {\r\n      return {status:'error',message:'already exists'};\r\n    }\r\n\r\n    try{ \r\n\r\n      const response= await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByName/\" + name,config)\r\n      if(response.data !== 'no such user')\r\n      {\r\n       const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName}\r\n       let newContacts = [...contacts,contact]\r\n       setContacts(newContacts)\r\n       let UpdatedUser={...info,contacts:newContacts}\r\n       try{\r\n         await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n       } catch(err){console.log(err)}\r\n      }\r\n      else return {status:'error',message:'user doesnt exist'};\r\n     \r\n    } catch(err){console.log(err)}\r\n\r\n    return {status:'ok'}\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact,getSearchContacts }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}","import React, { useState,useContext,useRef,useEffect} from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nconst SocketContext = React.createContext()\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext)\r\n}\r\n\r\nexport function SocketProvider({ userId, children }) {\r\n  const socket = useRef()\r\n  const [ConnectedUsers,setConnectedUsers] =useState([])\r\n\r\n\r\n  useEffect(()=>\r\n  {\r\n\r\n    async function fetchData() {\r\n    socket.current = io(\"wss://messagesapp1.herokuapp.com:443/\");\r\n    }\r\n    fetchData()\r\n\r\n  },[])\r\n\r\nuseEffect(()=>\r\n{\r\n  async function fetchData() {\r\n  socket.current.emit(\"AddUser\",sessionStorage['id'])\r\n  socket.current.on(\"getConnectedUsers\", users =>\r\n  {\r\n    setConnectedUsers(users)\r\n  })\r\n  }\r\nfetchData();\r\n\r\n\r\n},[userId])\r\n\r\n  return (\r\n    <SocketContext.Provider value={{socket,ConnectedUsers}}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  )\r\n}","import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const { socket, ConnectedUsers } = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n  const [showDetails,setShowDetails] =useState(false)\r\n  const [removedFromGroupFlag,setRemovedFromGroupFlag] = useState(false)\r\n\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n    async function fetchData() {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === conversationId)\r\n          {\r\n             setTypingFlag(user.name)\r\n          }\r\n        }\r\n    } )\r\n\r\n    socket.current.on('update-conversation',async ()=>\r\n    {\r\n    \r\n      getConversations().then(res=> setConversations(res))\r\n    \r\n    })\r\n\r\n    socket.current.on('removed-user',async ()=>\r\n    {\r\n    \r\n      getConversations().then(res=> \r\n        {\r\n          setConversations(res)\r\n          if(selectedConversation)\r\n          {\r\n            let checkIfDeleted=res.filter(conversation=> conversation._id === selectedConversation._id)\r\n            if(checkIfDeleted.length ==0 ) \r\n               setRemovedFromGroupFlag(true)\r\n          }\r\n      })\r\n    \r\n    })\r\n  }\r\n  fetchData();\r\n  },[selectedConversation])\r\n\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() {\r\n    if(selectedConversation)\r\n    {\r\n    if(!selectedConversation.isGroup)\r\n     {\r\n      if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n      {\r\n        setCurrentConversationIsConnected('')\r\n      }\r\n      else\r\n      {\r\n        let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n        setCurrentConversationIsConnected(response.data.LastSeen)\r\n      }\r\n     }\r\n    }\r\n  }\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,selectedConversation])\r\n\r\n  useEffect(() =>\r\n  {\r\n    async function fetchData() {\r\n     getConversations().then(res=> setConversations(res))\r\n    }\r\n    fetchData();\r\n    \r\n  }, []);\r\n\r\n  async function getConversations()\r\n  {\r\n    try{\r\n       let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n       let ConversationsList = response.data.map((conversation) =>\r\n       {\r\n         let UpdatedConversation= conversation\r\n         if (!conversation.Participants.isGroup && conversation.Name === sessionStorage[\"name\"])\r\n            UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].image}\r\n\r\n         if(selectedConversation)\r\n         {\r\n           if(selectedConversation._id === UpdatedConversation._id)\r\n              setSelectedConversation(UpdatedConversation)\r\n         }\r\n          \r\n         return UpdatedConversation;\r\n       })\r\n\r\n      return ConversationsList \r\n    } catch (err) {console.log(err);}\r\n  }\r\n\r\n\r\n\r\n\r\n  async function getSearchConverastions(str)\r\n  {\r\n\r\n        getConversations().then(res=>\r\n        {\r\n\r\n         let SearchResult = res.filter(conversation=> \r\n            conversation.Name.includes(str) ===true\r\n          )\r\n    \r\n          setConversations(SearchResult)\r\n        })\r\n  }\r\n        \r\n\r\n\r\n  async function createConversation(ids, name, image,groupFlag) {\r\n    let ConversationImage = image;\r\n    let isGroup = groupFlag;\r\n\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      return {status:'error',message:'no participants choosen'};\r\n    }\r\n\r\n    //check if conversation already exists and it's not a group\r\n    let ConversationExists = null;\r\n    if (ids.length === 1 && !isGroup) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      let createdDate=''\r\n\r\n      //if group\r\n      \r\n      if (isGroup) {\r\n\r\n\r\n        let parts = new Intl.DateTimeFormat('en', {\r\n          hc: 'h12',\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          timeZone:'Asia/Jerusalem'})\r\n        .formatToParts(new Date())\r\n        .reduce((acc, part) => {\r\n          acc[part.type] = part.value;\r\n          return acc;\r\n        }, Object.create(null));\r\n\r\n       \r\n    \r\n        createdDate= `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}`;\r\n\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        try{\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n        ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      }\r\n \r\n    \r\n      let newConversation = {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: [],\r\n        LastMessage: { id: \"\", sender: \"\", message: \"\" },\r\n        ConversationImage: ConversationImage,\r\n        isGroup:isGroup,\r\n        createdDate:createdDate,\r\n        description: \"Add Description\",\r\n      };\r\n\r\n      //updateDB\r\n      try {\r\n        console.log(newConversation)\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n\r\n        if (Response.data.status === \"created\") {\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent\r\n          if (Response.data.conversation.Messages.length > 0)\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n          // }\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  async function UpdateConversation(updatedConversation)\r\n  {\r\n\r\n    let updateDBConv={...updatedConversation}\r\n    if(!(updatedConversation.LastMessage.message.includes('left')))\r\n    {\r\n      let addCurrentParticipant= {id: info.id,phone: info.phone,name: info.name,image: info.imageName,}\r\n      let participants=[...updatedConversation.Participants,addCurrentParticipant]\r\n      updateDBConv={...updateDBConv,Participants:participants}\r\n    }\r\n    delete updateDBConv._id\r\n\r\n\r\n      try{\r\n        let response=await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+ selectedConversation._id,updateDBConv,config)\r\n        if(response.data.status==='Updated')\r\n        {\r\n\r\n          let UpdatedConversations=[]\r\n         if(!(updatedConversation.LastMessage.message.includes('left')))\r\n         {\r\n\r\n          setSelectedConversation(updatedConversation)\r\n        \r\n           conversations.forEach(conversation=>\r\n            {\r\n              \r\n              if(conversation._id===updatedConversation._id)\r\n              {\r\n                   \r\n                  UpdatedConversations.push(updatedConversation)\r\n              }\r\n              else UpdatedConversations.push(conversation)\r\n            })\r\n          }\r\n          else\r\n          {\r\n            console.log(conversations)\r\n             UpdatedConversations=conversations.filter(conversation=> conversation._id != selectedConversation._id)\r\n             setSelectedConversation()\r\n          }\r\n\r\n          if(updatedConversation.LastMessage.message.includes('removed'))\r\n              socket.current.emit('user-deleted',selectedConversation)\r\n          else\r\n              socket.current.emit('conversation-changed',selectedConversation)\r\n\r\n\r\n\r\n\r\n            setConversations(UpdatedConversations)\r\n          \r\n            \r\n        }\r\n      }catch(err){console.log(err)}\r\n  }\r\n\r\n \r\n\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n   {\r\n\r\n      audio.play()\r\n\r\n      let ConversationExists = false;\r\n      let newListOfConversations = RefConversations.current.map((conversation) =>{\r\n          if (conversation._id === UpdatedConv._id) {\r\n            ConversationExists = true;\r\n            let newConv = { ...conversation,\r\n              Messages: UpdatedConv.Messages,\r\n              LastMessage: UpdatedConv.LastMessage,};\r\n            if (currentConversationRef.current) {\r\n              if (currentConversationRef.current._id === UpdatedConv._id)\r\n                setSelectedConversation(newConv);\r\n            }\r\n\r\n            return newConv;\r\n          } else return conversation;\r\n        }\r\n      );\r\n\r\n\r\n      if (!ConversationExists) {\r\n        if (!UpdatedConv.isGroup)\r\n         {\r\n           let newConversation = { ...UpdatedConv,\r\n            Name: UpdatedConv.Participants[0].name,\r\n            ConversationImage: UpdatedConv.Participants[0].imageName,\r\n          };\r\n          setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n        } else\r\n          setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n      } else setConversations(newListOfConversations);\r\n    },[setConversations]);\r\n\r\n  useEffect(() => {\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  }, [conversations, selectedConversation]);\r\n\r\n\r\n  const updateSenderConversation = (AddMessage) => {\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => {\r\n      if (conversation._id === AddMessage._id) {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } else return conversation;\r\n    });\r\n\r\n    if (ConversationExists) {\r\n      setConversations(newListOfConcversations);\r\n    } else\r\n      setConversations((prevConversations) => [\r\n        ...prevConversations,\r\n        AddMessage,\r\n      ]);\r\n  };\r\n\r\n\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n      let parts = new Intl.DateTimeFormat('en', {\r\n      hc: 'h12',\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      image: info.imageName,\r\n    };\r\n    let AddMessage = {\r\n      ...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n    socket.current.emit(\"send-message\", {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n        showDetails,\r\n        setShowDetails,\r\n        UpdateConversation,\r\n        removedFromGroupFlag,\r\n        setRemovedFromGroupFlag\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n","import { Avatar} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport React from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useEffect } from 'react';\r\nimport { useUser } from '../contexts/userprovider';\r\nimport '../css/conversations.css'\r\n\r\nexport default function Conversations() {\r\n    const {setSelectedConversation,selectedConversation,conversations,setShowDetails} =useConversations()\r\n    const {info} =useUser()\r\n\r\n  \r\nasync function handleSelectedConversation(conversation) \r\n{\r\n    setShowDetails(false)\r\n    setSelectedConversation(conversation)\r\n}\r\n  return (\r\n          <div className='Chats' >\r\n              <div className='contacts_list'>\r\n              {conversations.map((conversation,index)=>\r\n              {\r\n                 return  (   \r\n                 <div key={index}  onClick={()=>handleSelectedConversation(conversation)}  className='ChatsListItem'>\r\n                     <Avatar src={process.env.PUBLIC_URL + conversation.ConversationImage}/>\r\n                     <div className='chatInfo'>\r\n                     <span   className='chatName' ><h2>{conversation.Name}</h2> </span>\r\n                     <span> {(conversation.LastMessage.message).slice(0,25)}... </span>\r\n                     </div>\r\n            \r\n                  </div>)\r\n                    \r\n                })}\r\n                </div>\r\n\r\n                </div>\r\n          \r\n\r\n  )\r\n}","  import { Avatar,Button } from '@material-ui/core';\r\nimport React from 'react'\r\nimport { useUser } from '../contexts/userprovider';\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport '../css/conversations.css'\r\n\r\nexport default function Contacts({newConversationCallback,openModalCallback}) {\r\n  const { contacts } = useUser()\r\n  const { createConversation} = useConversations()\r\n\r\n  function startConversation({id,name,image}) \r\n  {\r\n    let ids=[id]\r\n    createConversation(ids,name,image,false)\r\n    newConversationCallback()\r\n  }\r\n\r\n  return (\r\n\r\n    <div className='Chats' >\r\n      <h4 className='new_chat_title'>Start New Chat:</h4>            \r\n    <Button  style={{height:'30px' ,margin:'5px 0px',fontSize:'10px'}} onClick={()=>openModalCallback()}\r\n        className='add_new_Button' >\r\n                      Create Group\r\n                    </Button>\r\n      <div className='contacts_list'>\r\n      {contacts.map(contact =>\r\n       {\r\n          return(\r\n         \r\n          <div className='ChatsListItem' onClick={()=>startConversation({id:contact.id,name:contact.name,image:contact.imageName})}>\r\n            <Avatar src={contact.imageName}/>\r\n           <div className='chatInfo'> <h2>{contact.name} </h2> </div>\r\n          </div> \r\n           )\r\n        })}\r\n        </div>\r\n\r\n  </div>)\r\n  \r\n};","import { useRef,useState } from 'react'\r\nimport '../css/addnew.css'\r\nimport { useUser } from '../contexts/userprovider';\r\nimport {IconButton } from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nexport default function AddNewContact({closeModal}) {\r\n\r\n   const userNameRef = useRef()\r\n   const {createContact} = useUser()\r\n   const [error,setError]=useState('')\r\n   \r\n\r\n  async function handleSubmit()\r\n  {\r\n    let responseStatus = await createContact(userNameRef.current.value)\r\n\r\n    if(responseStatus.status === 'ok')\r\n    {\r\n       closeModal();\r\n       setError('')\r\n    }\r\n    \r\n    else\r\n    {\r\n      setError(responseStatus.message)\r\n    }\r\n\r\n   \r\n  }\r\n\r\n  return (\r\n   \r\n   <div className='add_new'>\r\n            <div className='add_new_contact_border'>\r\n              <div className='add_contact_model'>\r\n                <div className='title_and_close'>\r\n                  <h2 className='add_contact_title'>Add New Contact</h2> \r\n                  <IconButton className='close_add_new'  onClick={()=>closeModal()}>\r\n                    <CloseIcon fontSize='large' /> \r\n                  </IconButton>\r\n               </div>\r\n        \r\n              <div className='add_new_contact'>\r\n               \r\n                <h3 className='enter_phone'>userName:</h3>\r\n                <input className='add_new_input' type='text' ref={userNameRef} required/>\r\n                <button className='add_new_button' onClick={handleSubmit}> Add Contact</button>\r\n              </div>\r\n                <span className='show_error'>{error}</span>\r\n              </div>\r\n\r\n            </div>\r\n          \r\n               \r\n \r\n        </div>\r\n\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport { useUser } from '../contexts/userprovider'\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport {Button,Avatar,IconButton} from '@material-ui/core';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nfunction CreateNewGroup( { closeModal }) {\r\n\r\n    const [selectedContactsId, setSelectedContactsId] = useState([])\r\n    const { contacts } = useUser()\r\n    const { createConversation} = useConversations()\r\n    const [groupName,setGroupName] =useState('')\r\n    const [groupImage,setGroupImage] =useState()\r\n    const [previewImage,setPreviewImage]=useState()\r\n    const [goToParticipants,setGoToParticipants] = useState(false)\r\n\r\n    function createGroup()\r\n    {\r\n        createConversation(selectedContactsId,groupName,groupImage,true)\r\n        closeModal()\r\n    }\r\n\r\n    function handleCheckboxChange(contactId) \r\n    {\r\n        if(selectedContactsId.includes(contactId))\r\n        {\r\n            setSelectedContactsId(prevSelectedContactsId =>\r\n            {\r\n                return (prevSelectedContactsId.filter(id=> id!==contactId))\r\n            } )\r\n        }\r\n  \r\n        else\r\n        {\r\n           setSelectedContactsId(prevSelectedContactsId=>\r\n            {\r\n              return [...prevSelectedContactsId,contactId]\r\n            })\r\n        }   \r\n    }\r\n\r\n    function handleFileUpload(e) {\r\n        setGroupImage(e.target.files[0])\r\n        setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n      }\r\n\r\n\r\n    return (\r\n        <div className='add_new'>\r\n        <div className='add_new_group_border'>\r\n        <div className='new_conversation new_group'>\r\n\r\n      {goToParticipants !==true ?\r\n         <div className='top_new_group'>\r\n                     <div style={{flex:'1'}}className='title_and_close'>\r\n                  <h2 className='add_contact_title' style={{marginLeft:'85px',paddingRight:'0px'}}>Create New Group:</h2> \r\n                  <IconButton style={{marginLeft:'45px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                    <CloseIcon fontSize='large' /> \r\n                  </IconButton>\r\n              </div>\r\n\r\n          {previewImage?  \r\n\r\n             <div className='change_group_image'> \r\n            <Avatar  src={previewImage} style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}> </Avatar>\r\n            <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white'}}>\r\n            <PeopleAltIcon style={{position:'absolute',zIndex:'0', opacity:'0.1',height: '80px', width: '80px' }}/>\r\n          \r\n             <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n             <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n            <span style={{fontSize:'10px'}}>Change Image </span>\r\n         \r\n            </div>\r\n            </div>\r\n           \r\n            :\r\n          <div className='add_group_image'>\r\n          <Avatar   style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}>\r\n           < PeopleAltIcon style={{position:'absolute',zIndex:'0', opacity:'0.1',height: '80px', width: '80px' }}/>\r\n            <div  style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white'}}>\r\n             <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n             <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n            <span style={{fontSize:'10px'}}>add group image</span>\r\n         \r\n            </div>\r\n            </Avatar>\r\n            </div> }\r\n          <div className='group_name'>\r\n          <span style={{padding:'5px', margin:'5px' , fontSize:'13px', color:'#fcfcfc'}}> Group Name:</span>\r\n          <input style={{borderRadius:'10px', border:'none',outline:'none'}} onChange={(e)=>setGroupName(e.target.value)}/>\r\n          </div>\r\n          <button style={{display:'flex',alignItems:'center',width:'180px',justifyContent:'center'}} className='add_new_button'  onClick={()=>setGoToParticipants(true)}><ArrowBackIcon style={{margin:'5px'}} /> Add Members</button>\r\n          </div>\r\n          :\r\n          <div >\r\n              <div style={{flex:'1'}}className='title_and_close'>\r\n                  <h2 className='add_contact_title' style={{marginLeft:'80px',paddingRight:'0px'}}>Select Members:</h2> \r\n                  <IconButton style={{marginLeft:'40px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                    <CloseIcon fontSize='large' /> \r\n                  </IconButton>\r\n              </div>\r\n          <div style={{overflowY:'overlay',height:'200px'}}>\r\n          {contacts.map(contact =>\r\n            {\r\n            return(\r\n\r\n                <div className='contact_item' >\r\n                 <input\r\n                type=\"checkbox\"\r\n                value={selectedContactsId.includes(contact.id)}\r\n                id={contact.id}\r\n                onChange={() => handleCheckboxChange(contact.id)}/>\r\n                <label style={{display:'flex',flexDirection:'row',alignItems:'center',width:'100%'}}for={contact.id} >\r\n                   <Avatar  style={{margin:'5px'}} src={process.env.PUBLIC_URL + contact.imageName}   fontSize='large'/>\r\n                    <h3 className='enter_phone' style={{marginLeft:'10px' ,fontWeight:'400'}}>{contact.name} </h3>\r\n                   </label>\r\n                 \r\n                </div>\r\n            )}) }  \r\n            </div>\r\n            <div style={{display:'flex' , justifyContent:'center'}}>\r\n             <button className='add_new_button'  type=\"submit\" onClick={()=>createGroup()}>Create</button>\r\n             </div>\r\n\r\n             </div>}\r\n\r\n         \r\n\r\n        \r\n\r\n\r\n          \r\n\r\n            \r\n            \r\n        </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateNewGroup\r\n","import '../css/sidebar.css'\r\nimport React from 'react'\r\nimport { useState} from 'react';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\r\nimport { Avatar, IconButton,Button, Modal } from '@material-ui/core';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Conversations from './conversations';\r\nimport Contacts from './contacts';\r\nimport AddNewContact from './addnewcontact'\r\nimport { useUser } from '../contexts/userprovider';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {useConversations } from '../contexts/conversationsprovider';\r\nimport CreateNewGroup from './createnewgroup';\r\n\r\n\r\n\r\n\r\nexport default function SideBar({id}) {\r\n    const [choosenAct,setChoosenAct]=useState('conversations')\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const {info,getSearchContacts} =useUser()\r\n    const [searchFlag,setSearchFlag] =useState(false)\r\n    const {getSearchConverastions} = useConversations()\r\n    const [choosenModal,setChoosenModal] =useState('')\r\n    \r\n\r\n    \r\n    function handleChange(e)\r\n    {\r\n      if(choosenAct === 'conversations')\r\n       getSearchConverastions(e.target.value)\r\n      else getSearchContacts(e.target.value)\r\n    }\r\n\r\n    function closeModal() {\r\n        setModalOpen(false)\r\n      }\r\n\r\n    function openChoosenModal(modalType)\r\n    {\r\n      setModalOpen(true)\r\n      setChoosenModal(modalType)\r\n    }\r\n\r\n    return (\r\n    \r\n        <div className='sideBar'>\r\n            <div className='sidebar_top'>\r\n                <Avatar src={info.imageName}   fontSize='large'/>\r\n                <div className='sidebar_top_right'>\r\n                    <IconButton onClick={()=>setChoosenAct('conversations')}>\r\n                      <ChatIcon fontSize='large' />\r\n                    </IconButton>\r\n                    <IconButton fontSize='large' onClick={()=>setChoosenAct('contacts')}>\r\n                      <PeopleIcon  fontSize='large'  />\r\n                    </IconButton>\r\n                    <IconButton >\r\n                      <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n         \r\n              {searchFlag?  \r\n              <div className='activeSearch' >\r\n               <div className='arrowButton'>\r\n               <IconButton onClick={()=>setSearchFlag(false)} >\r\n                      <ArrowBackIcon fontSize='large' />\r\n                    </IconButton>\r\n                    </div>\r\n              <input className='searchBlock' type='text' onChange={handleChange}/> </div>:\r\n              <div className='searchBar'>\r\n               <div className='searchContainer' >\r\n                <SearchOutlined/>\r\n                <input placeholder='search' type='text' onClick={()=>setSearchFlag(true)}/>\r\n              </div>\r\n            </div>}\r\n           \r\n            {choosenAct==='contacts'?\r\n            <div>\r\n                   <div className='sidebar_middle'>\r\n                    <Button \r\n                    style={{fontSize:'10px'}}  \r\n                    onClick={()=>openChoosenModal('NEW_CONTACT')}\r\n                    className='add_new_Button' >\r\n                      Add New Contact\r\n                    </Button>\r\n\r\n                    </div>\r\n                <div className='sidebar_bottom'>\r\n                <Contacts newConversationCallback={()=> setChoosenAct('conversations')}  openModalCallback={()=>openChoosenModal('NEW_GROUP')}/>\r\n                </div>\r\n                </div>\r\n              \r\n                :   <div className='sidebar_bottom'><Conversations/></div>}\r\n           \r\n\r\n\r\n         \r\n      <Modal className='Modal' open={modalOpen} onClose={closeModal} >\r\n      {choosenModal === 'NEW_GROUP' ? <CreateNewGroup closeModal={closeModal}  /> : <AddNewContact closeModal={closeModal} /> }\r\n      </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {useState} from 'react'\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nfunction Message({sender,message}) \r\n{\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n  const [SelectedImageURL,setSelectedImageURL] =useState(null)\r\n\r\n  function openImage(URL)\r\n  {\r\n    setModalOpen(true)\r\n    setSelectedImageURL(URL)  \r\n  }\r\n\r\n  return (\r\n\r\n     \r\n\r\n    <div className={sender}>  \r\n      <div className='message' >\r\n      <div className='image_and_sender'>\r\n        <div className='sender'>\r\n          {message.name}\r\n      </div>\r\n      {message.containsImage? \r\n      <img className='image_in_message' src={message.imageURL} alt='' onClick={()=>openImage(message.imageURL)} width='200px' height='200px' /> \r\n      : ''}\r\n      </div>\r\n      <div>\r\n    <div className='message_and_time'>\r\n      <div className='message_content'>{message.message}</div> \r\n      \r\n      <div className='message_time_border'>\r\n        <div className='message_time'>\r\n         {(message.timeSent).substring(11,17)}\r\n        </div>\r\n        </div>\r\n      </div> \r\n      </div>\r\n\r\n      <Dialog onClose={()=> setModalOpen(false)}  open={modalOpen}>\r\n        <img src={SelectedImageURL} alt=''  height='500px' width='500px'/>\r\n      </Dialog>\r\n      </div>\r\n    </div>\r\n    \r\n  )}\r\n\r\nexport default Message\r\n\r\n","import React from 'react'\r\nimport '../css/audiomessage.css'\r\nimport { Avatar } from '@material-ui/core'\r\n\r\nfunction AudioMessage({message,sender,image})\r\n{\r\n    const messageColor = sender.includes('chat_reciever')?  'reciever':'sender' \r\n\r\n    return (\r\n    \r\n        <div className={sender}>  \r\n       <div className='message_with_audio'>\r\n           <div className='audio_and_time'> \r\n               <div className={messageColor}>\r\n                   <audio   controls controlsList=\"nodownload\" >\r\n                     <source src={message.recordURL} type=\"audio/mp3\"/>\r\n                   </audio>\r\n               </div>\r\n               <span className='message_time'>{(message.timeSent).substring(11,17)}</span> \r\n           </div>\r\n           <Avatar src={image} style={{ height: '50px', width: '50px' }}/>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AudioMessage\r\n","import React, { useRef } from 'react'\r\nimport { useState ,useCallback,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\nimport {IconButton,Dialog } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Picker from 'emoji-picker-react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\nimport axios from 'axios'\r\nimport Message from './message';\r\nimport AudioMessage from './audiomessage';\r\n\r\n\r\n\r\n\r\nfunction ChatBody(props) {\r\n\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation,removedFromGroupFlag,setRemovedFromGroupFlag,setSelectedConversation} = useConversations()\r\n    const inputRef = useRef(null)\r\n  \r\n    const [emojiFlag,setEmojiFlag] = useState(false)\r\n    const [recordFlag,setRecordFlag] =useState(false)\r\n    const {startRecording,stopRecording,mediaBlobUrl,clearBlobUrl} = useReactMediaRecorder({audio: true })\r\n    const [audioBlob,setAudioBlob] = useState(null)\r\n  \r\n\r\n    useEffect(()=>{\r\n      setEmojiFlag(false)\r\n    },[selectedConversation])\r\n\r\n\r\n    const setRef = useCallback((node) => \r\n    {\r\n\r\n      if(node)\r\n         node.scrollIntoView({smooth:true})\r\n    },[])\r\n\r\n\r\n  useEffect( () => {\r\n    async function fetchData() {\r\n    if(audioBlob != null)\r\n    {\r\n      let audio= await fetch(mediaBlobUrl).then(res=> res.blob())\r\n      const data = new FormData();\r\n           \r\n      data.append('file', audio);\r\n      data.append('resource_type', 'video');\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n      try{\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/video/upload\",data)\r\n        let recordURL = response.data.url\r\n        recordURL=(recordURL.slice(0,-4))\r\n        recordURL+= 'mp3'\r\n        setRecordFlag(false)\r\n        clearBlobUrl()\r\n        sendMessage(Text,null,null,recordURL)\r\n        setRecordFlag(false)\r\n  \r\n      }catch(err){console.log(err)}\r\n    }\r\n    }\r\n\r\n    fetchData();\r\n \r\n  }, [audioBlob])\r\n\r\n\r\n\r\n    function typing(e)\r\n    {\r\n        setText(e.target.value)\r\n        if (socket.current == null) return;\r\n        socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n    }\r\n\r\n    function handleSubmit(e)\r\n    {\r\n      e.preventDefault()\r\n      sendMessage(Text,false,null,null)\r\n\r\n      setText(' ')\r\n    }\r\n\r\n    async function handleImage(e)\r\n    {\r\n      const data = new FormData()\r\n      data.append('file',e.target.files[0])\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n      try{\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n\r\n      props.imageCallback(response.data.url)\r\n      }catch(err){console.log(err)}\r\n    }\r\n\r\n   function recordStart()\r\n   {\r\n    setRecordFlag(true)\r\n    startRecording()\r\n   }\r\n \r\n    async function handleRecord()\r\n    {\r\n         stopRecording()\r\n         let res = await fetch(mediaBlobUrl)\r\n         setAudioBlob(res.blob())            \r\n    }\r\n\r\n  function cancelRecord()\r\n  {\r\n    stopRecording()\r\n    clearBlobUrl()\r\n    setRecordFlag(false)\r\n  }\r\n\r\n    function updateRecordingDiv()\r\n    {\r\n      let recordDiv = <div>\r\n      <IconButton>\r\n        <CloseIcon fontSize='large' style={{color:'red'}} onClick={cancelRecord} />\r\n      </IconButton>\r\n      <IconButton>\r\n         <CheckIcon fontSize='large'style={{color:'green'}} onClick={handleRecord} />\r\n      </IconButton>\r\n      </div>\r\n\r\n      return recordDiv\r\n  \r\n    }\r\n\r\n    function handleRemovedFromGroup()\r\n    {\r\n      setRemovedFromGroupFlag(false)\r\n      setSelectedConversation()\r\n    }\r\n    \r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setText(Text + emojiObject.emoji)\r\n      };\r\n\r\n\r\n\r\n    return(\r\n\r\n      <div className= 'body_and_footer'>\r\n     \r\n <div className='chat_body'>\r\n      \r\n      {console.log(selectedConversation)}\r\n        {selectedConversation.Messages.map((message,index)=>\r\n         {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender= ''\r\n            sender= message.name==='manager'? 'manager':( message.id===sessionStorage['id']? 'message_out' : 'message_in')\r\n            let image=message.id===sessionStorage['id']? info.imageName :selectedConversation.ConversationImage\r\n            let choosenClass = sender==='message_in'? 'chat_message chat_sender': ' chat_message chat_reciever'\r\n\r\n            return (\r\n             \r\n                     <div>\r\n                      {sender == 'manager'?\r\n                      <div className='around_message'ref={lastMessage ? setRef : null}>\r\n                        <div className='manager_message'>\r\n                      \r\n                     <span className='message_content'>{message.message}</span>\r\n                     </div>\r\n                     </div>:\r\n\r\n                     <div key={index} className={choosenClass} ref={lastMessage ? setRef : null}>\r\n                    {message.containsRecord ? \r\n                    <AudioMessage message={message} sender={sender} image={image}/> : <Message  sender={sender} message={message}/>}\r\n                    </div> }\r\n                </div>\r\n          )}\r\n        )}\r\n\r\n      </div>\r\n\r\n      <div className='chat_footer_with_stickers'>\r\n         {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n         <div className='chat_footer'>\r\n           {emojiFlag? <IconButton  onClick={()=>setEmojiFlag(false)}><CloseIcon fontSize='large'/> </IconButton>:''}\r\n           <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n             <InsertEmoticonIcon fontSize='large'/>\r\n           </IconButton>\r\n           <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n           <label htmlFor=\"icon-button-file\">\r\n             <IconButton component=\"span\">\r\n               <ImageIcon  fontSize='large'/>\r\n             </IconButton>\r\n           </label> \r\n\r\n           <form onSubmit={handleSubmit} className='message_section'>\r\n             <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n             <button type='submit' > send </button>\r\n           </form>\r\n           {recordFlag? updateRecordingDiv() :   \r\n           <IconButton onClick={recordStart}>\r\n             <MicIcon fontSize='large'  />\r\n           </IconButton>}\r\n         </div>\r\n\r\n      </div>\r\n      <Dialog className='exit_group_dialog'  open={removedFromGroupFlag}>\r\n                <div style={{padding:'10px'}}>\r\n                    <h2 className='dialog_title'> you where removed from this group</h2>\r\n                    <div className='dialog_options_buttons'>\r\n                      <button className='dialog_button' onClick={()=>handleRemovedFromGroup()} >ok</button>\r\n                    </div>\r\n                </div>\r\n      </Dialog> \r\n\r\n    </div>\r\n\r\n    \r\n)}\r\n\r\nexport default ChatBody\r\n","import React, { useRef } from 'react'\r\nimport '../css/chat.css'\r\nimport '../css/sendimagebody.css'\r\nimport { useState} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useSocket} from '../contexts/socketprovider';\r\nimport { useUser} from '../contexts/userprovider';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {IconButton } from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\n\r\nfunction SendImageBody(props) {\r\n\r\n\r\n    const inputRef = useRef(null)\r\n    const [Text,setText] = useState('')\r\n    const {socket} = useSocket()\r\n    const {info} = useUser()\r\n    const {sendMessage,selectedConversation} = useConversations()\r\n\r\n    function handleSubmit(imageFlag)\r\n    {\r\n        if(imageFlag===true)\r\n           sendMessage(Text,true,props.imageURL)\r\n      setText(' ')\r\n      props.backToChat()\r\n\r\n    }\r\n\r\n    function typing(e)\r\n    {\r\n        setText(e.target.value)\r\n        if (socket.current == null) return;\r\n        socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n    }\r\n\r\n    return (\r\n        <div className='SendImage'>\r\n\r\n\r\n        <div className='sendImageHeader'></div>\r\n           <IconButton type='submit' onClick={()=>handleSubmit(false)}>\r\n             <CloseIcon fontSize='large' /> \r\n           </IconButton>\r\n\r\n            \r\n            <img src= {props.imageURL} alt='' height='300px' width='300px'/>\r\n\r\n\r\n          <div className='add_message'>\r\n          <form onSubmit={()=>handleSubmit(true)} className='message_section'>\r\n          <IconButton type='submit' style={{flex:'0.1'}}>\r\n            <SendIcon fontSize='large'/>\r\n         </IconButton>\r\n         <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n      </form>\r\n\r\n\r\n          </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SendImageBody\r\n","import React, { useState ,useEffect} from 'react'\r\nimport { useUser } from '../contexts/userprovider'\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport {Button,Avatar,IconButton} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport '../css/addnew.css'\r\nimport { instanceOf } from 'prop-types';\r\n\r\nfunction AddGroupMember({closeModal}) {\r\n\r\n    const [selectedContactsId, setSelectedContactsId] = useState([])\r\n    const { contacts,info } = useUser()\r\n    const {UpdateConversation,selectedConversation} = useConversations()\r\n    const [conversationContacts,setConversationContacts]=useState([])\r\n\r\n\r\n    useEffect(() =>\r\n    { \r\n        let ids=[]\r\n        console.log(selectedConversation)\r\n        selectedConversation.Participants.forEach((participant)=>\r\n        {\r\n           ids.push(participant.id)\r\n        }) \r\n        console.log(ids)\r\n        setConversationContacts(ids)\r\n    },[])\r\n\r\n    function AddMember()\r\n    {\r\n        let newParticipants= []\r\n        newParticipants=selectedConversation.Participants\r\n        let messages=selectedConversation.Messages\r\n        console.log(messages)\r\n        let message=''\r\n        contacts.forEach(contact=>\r\n        {\r\n            if(selectedContactsId.includes(contact.id))\r\n            {\r\n                console.log(contact)\r\n                newParticipants.push(contact)\r\n                message={name:\"manager\",message: info.name +\" added \" + contact.name + \" to the group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n                messages.push(message)\r\n                console.log(newParticipants)\r\n            }\r\n\r\n        })\r\n\r\n\r\n\r\n        let updatedConversation={...selectedConversation,Participants:newParticipants,Messages:messages,LastMessage:message}\r\n        UpdateConversation(updatedConversation)\r\n        closeModal()\r\n    }\r\n\r\n\r\n    function handleCheckboxChange(contactId) \r\n    {\r\n        if(selectedContactsId.includes(contactId))\r\n        {\r\n            setSelectedContactsId(prevSelectedContactsId =>\r\n            {\r\n                return (prevSelectedContactsId.filter(id=> id!==contactId))\r\n            } )\r\n        }\r\n  \r\n        else\r\n        {\r\n           setSelectedContactsId(prevSelectedContactsId=>\r\n            {\r\n              return [...prevSelectedContactsId,contactId]\r\n            })\r\n        }   \r\n    }\r\n\r\n    return (\r\n        <div className='add_new'>\r\n        <div className='add_new_group_border'>\r\n        <div className='new_conversation new_group'>\r\n              <div style={{flex:'1'}} className='title_and_close'>\r\n                  <h2 className='add_contact_title' style={{marginLeft:'80px',paddingRight:'0px'}}>Select Members:</h2> \r\n                  <IconButton style={{marginLeft:'40px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                    <CloseIcon fontSize='large' /> \r\n                  </IconButton>\r\n              </div>\r\n          <div style={{overflowY:'overlay',height:'200px'}}>\r\n          {contacts.map(contact =>\r\n            {\r\n             if(!(conversationContacts.includes(contact.id)))\r\n            {\r\n            return(\r\n                <div className='contact_item' >\r\n                 <input\r\n                type=\"checkbox\"\r\n                value={selectedContactsId.includes(contact.id)}\r\n                id={contact.id}\r\n                onChange={() => handleCheckboxChange(contact.id)}/>\r\n                <label style={{display:'flex',flexDirection:'row',alignItems:'center',width:'100%'}}for={contact.id} >\r\n                   <Avatar  style={{margin:'5px'}} src={process.env.PUBLIC_URL + contact.imageName}   fontSize='large'/>\r\n                    <h3 className='enter_phone' style={{marginLeft:'10px' ,fontWeight:'400'}}>{contact.name} </h3>\r\n                   </label>\r\n                 \r\n                </div>\r\n            )}}) }  \r\n            </div>\r\n            <div style={{display:'flex' , justifyContent:'center'}}>\r\n             <button className='add_new_button'  type=\"submit\" onClick={()=>AddMember()}>Add</button>\r\n             </div>\r\n\r\n             </div>\r\n             </div>\r\n             </div>\r\n    )\r\n}\r\n\r\nexport default AddGroupMember\r\n","import '../css/chat.css'\r\nimport '../css/sidebar.css'\r\nimport React from 'react'\r\nimport { useState,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useUser } from '../contexts/userprovider';\r\nimport { Avatar ,IconButton,makeStyles,Modal} from '@material-ui/core'\r\nimport ChatBody from './chatbody';\r\nimport SendImageBody from './sendimagebody';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport Picker from 'emoji-picker-react';\r\nimport PersonAdd from '@material-ui/icons/PersonAdd';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport AddGroupMember from './addgroupmember';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\"\r\n\r\n    }},\r\n    \r\n    options:\r\n    {\r\n      \"&\":{\r\n      color:\"transparent\"\r\n      },\r\n      \"&:hover\": {\r\n        color: \"gray\",\r\n        backgroundColor:\"transparent\",\r\n        fontSize:'15px',\r\n        position:'relative',\r\n        zIndex:'2'\r\n      }\r\n    }\r\n  });\r\n\r\n\r\nexport default function Chat() {\r\n\r\n    const {selectedConversation,currentConversationIsConnected,typingFlag,createConversation,conversations,setSelectedConversation,\r\n     setTypingFlag,showDetails,setShowDetails,UpdateConversation} = useConversations()\r\n    const [imageFlag,setImageFlag] =useState(false)\r\n    const [imageURL,setImageURL] =useState(false)\r\n    const [EditGroupNameGlag,setEditGroupNameGlag]=useState(false)\r\n    const [EditGroupDescriptionGlag,setEditGroupDescriptionGlag]=useState(false)\r\n    const [emojiFlag,setEmojiFlag]=useState(false)\r\n    const [Text,setText] = useState(selectedConversation.Name)\r\n    const [Description,setDescription] = useState(selectedConversation.description)\r\n    const {info} = useUser()\r\n    const classes = useStyles();\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const [dialogOpen, setDialogOpen] = useState(false)\r\n    const [deleteUserDialog,setDeleteUserDialog]= useState(false)\r\n    const [userToDelete,setUserToDelete] = useState()\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n      setEditGroupNameGlag(false)\r\n      setEditGroupDescriptionGlag(false)\r\n      setEmojiFlag(false)\r\n\r\n    },[selectedConversation])\r\n\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n      setText(Text + emojiObject.emoji)\r\n    };\r\n\r\n    const onDescriptionEmojiClick = (event, emojiObject) => {\r\n      setDescription(Description + emojiObject.emoji)\r\n    };\r\n\r\n    \r\n\r\n    const groupheader = () =>\r\n    {\r\n      let returnValue = ''\r\n      if(typingFlag !== '')\r\n      {\r\n        returnValue = <div className='lastSeen'> {typingFlag} is typing...</div>\r\n        setTimeout(()=> setTypingFlag(''),1000)\r\n      }\r\n\r\n      else\r\n      {\r\n        let UsersInGroup = ''\r\n        selectedConversation.Participants.forEach((participant,index)=> \r\n        {\r\n            if(index ===  selectedConversation.Participants.length-1 )\r\n                UsersInGroup = UsersInGroup + participant.name\r\n            else\r\n                UsersInGroup= UsersInGroup + participant.name + ', '\r\n        })\r\n            \r\n        returnValue=  <div className='lastSeen'>{UsersInGroup} </div>\r\n\r\n      }\r\n\r\n      return returnValue\r\n    }\r\n\r\n    function chatBodyCallback(image)\r\n    {\r\n      setImageURL(image)\r\n      setImageFlag(true)\r\n    }\r\n\r\n    function backToChatCallback()\r\n    {\r\n      setImageURL(null)\r\n      setImageFlag(false)\r\n    }\r\n\r\n    const privateConversationHeader = () =>\r\n    {\r\n       let returnValue = ''\r\n       if(currentConversationIsConnected === '')\r\n       {\r\n        if(typingFlag !== '')\r\n        {\r\n            returnValue = <div className='lastSeen'> typing...</div>\r\n            setTimeout(()=> setTypingFlag(''),1000)\r\n\r\n        }\r\n\r\n        else returnValue = <div className='connected'><div className='circle'></div> online </div>\r\n            \r\n       }\r\n       else returnValue = <div className='lastSeen'>{currentConversationIsConnected}</div>\r\n\r\n\r\n      return returnValue\r\n\r\n    }\r\n\r\n    function changeGroupName()\r\n    {\r\n      let message={name:\"manager\",message: sessionStorage['name'] +\" changed group name to \" + Text,timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n      let messages=selectedConversation.Messages\r\n      messages.push(message)\r\n      let updatedConversation={...selectedConversation,Name:Text,Messages:messages,LastMasage:message}\r\n      UpdateConversation(updatedConversation)\r\n      setEditGroupNameGlag(false)\r\n\r\n    }\r\n\r\n    function openConversation(participant)\r\n    {\r\n        let existsFlag=false\r\n        conversations.forEach(conversation=>\r\n        {\r\n            if(conversation.isGroup==false && conversation.Participants[0].id==participant.id)\r\n            {\r\n              existsFlag=true\r\n               setSelectedConversation(conversation)\r\n            }\r\n            \r\n        })\r\n        if(!existsFlag)\r\n        {\r\n          let participantId=[]\r\n          participantId.push(participant.id)\r\n          createConversation(participantId, participant.name, participant.imageName,false)\r\n        }\r\n      \r\n    }\r\n\r\n    function changeGroupDescription()\r\n    {\r\n      let message={name:\"manager\",message: sessionStorage['name'] +\" changed group Description\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n      let messages=selectedConversation.Messages\r\n      messages.push(message)\r\n      let updatedConversation={...selectedConversation,description:Description,Messages:messages,LastMessage:message}\r\n      UpdateConversation(updatedConversation)\r\n      setEditGroupDescriptionGlag(false)\r\n\r\n    }\r\n\r\n  function removeFromGroup()\r\n  {\r\n    let message={name:\"manager\",message: sessionStorage['name'] +\" left the group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n    let messages=selectedConversation.Messages\r\n    messages.push(message)\r\n    let updatedConversation={...selectedConversation,Messages:messages,LastMessage:message}\r\n    UpdateConversation(updatedConversation)\r\n    setDialogOpen(false)\r\n  }\r\n\r\n  function beforeDeleteUser(participant)\r\n  {\r\n    setUserToDelete(participant)\r\n    setDeleteUserDialog(true)\r\n  }\r\n\r\n  function removeUserFromGroup()\r\n  {\r\n    let messages=selectedConversation.Messages\r\n    let message={name:\"manager\",message: sessionStorage['name'] +\" removed \" + userToDelete.name + \" from the group \",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n    messages.push(message)\r\n    let participants= selectedConversation.Participants.filter(participant=> participant.id != userToDelete.id)\r\n    let updatedConversation={...selectedConversation,Participants:participants,Messages:messages,LastMessage:message}\r\n    UpdateConversation(updatedConversation)\r\n    setUserToDelete()\r\n    setDeleteUserDialog(false)\r\n\r\n  }\r\n\r\n\r\n  function closeModal() {\r\n     setModalOpen(false)\r\n  }\r\n\r\n\r\n\r\n    const chatSide=\r\n    <div>\r\n       <div className='chat_header' onClick={()=>setShowDetails(true)}>\r\n         <Avatar src={selectedConversation.ConversationImage}/>\r\n         <div className='chat_header_info'>\r\n            <h2> {selectedConversation.Name} </h2> \r\n            {selectedConversation.isGroup?  groupheader() : privateConversationHeader()}\r\n\r\n         </div>\r\n       </div>\r\n\r\n       {imageFlag?   <SendImageBody imageURL={imageURL} backToChat={backToChatCallback}/>:<ChatBody imageCallback={chatBodyCallback}/>} \r\n   </div>\r\n\r\n    return (\r\n       \r\n          showDetails?\r\n           <div className='chat_with_details'>\r\n            <div className='chat narrow_chat'>\r\n            {chatSide}\r\n            </div>\r\n\r\n            <div className='chat_details'>\r\n            <div className='chat_details_top'>\r\n              <IconButton onClick={()=>setShowDetails(false)}>\r\n                 <CloseIcon fontSize='large'  />\r\n              </IconButton>\r\n              <h2 style={{paddingLeft:'10px'}}>{selectedConversation.isGroup? 'Group Details:' : 'Contact Details:' }</h2>\r\n            </div>\r\n\r\n\r\n            <span className='chat_details_body'>\r\n\r\n            <div className='user_info'>\r\n              <Avatar src={selectedConversation.ConversationImage} style={{margin:'20px',height:'140px',width:'140px'}}/>\r\n           \r\n              <span className='name_and_lastSeen'>\r\n                {selectedConversation.isGroup && EditGroupNameGlag?\r\n                   <div style={{display:'flex',flexDirection:'column'}}>\r\n                      {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' ,height:'200px'}}/> : ''}\r\n                     <div className='edit_group_name'>\r\n                \r\n                     <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeGroupName()}><CheckIcon fontSize='large'/></IconButton>\r\n                     <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setEmojiFlag(!emojiFlag)}><InsertEmoticonIcon fontSize='large'/></IconButton>\r\n                    \r\n                     <input defaultValue={Text} onChange={(e)=>setText(e.target.value)} style={{border:'none',outline:'none',width:'100%',backgroundColor:'transparent',padding:'5px'}}></input>\r\n                  </div>\r\n                  </div>:\r\n                <span className='group_title'>\r\n                   <h3>{selectedConversation.Name}</h3>\r\n                   {!selectedConversation.isGroup? '':<IconButton onClick={()=>setEditGroupNameGlag(true)}><EditIcon style={{fontSize:'large',marginLeft:'10px'}}/></IconButton>}\r\n                </span>\r\n           }\r\n                \r\n                 <span className='lastSeen' style={{padding:'10px',paddingLeft:'0px'}}> {!selectedConversation.isGroup? privateConversationHeader() :<span> created at:  {selectedConversation.createdDate} </span>}</span>\r\n              </span>\r\n             \r\n            </div>\r\n\r\n            \r\n\r\n            {selectedConversation.isGroup ?\r\n             <div>\r\n            <div className='group_details_container'>\r\n               <h2 className='group_title' style={{padding:'5px'}}> Description </h2>\r\n              {EditGroupDescriptionGlag?\r\n                \r\n                 <div style={{display:'flex',flexDirection:'column'}}>\r\n                 {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onDescriptionEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' ,height:'200px'}}/> : ''}\r\n                <div className='edit_group_name' style={{padding:'5px'}}>\r\n            \r\n                <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeGroupDescription()}><CheckIcon fontSize='large'/></IconButton>\r\n                <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setEmojiFlag(!emojiFlag)}><InsertEmoticonIcon fontSize='large'/></IconButton>\r\n               \r\n                <input defaultValue={Description} onChange={(e)=>setDescription(e.target.value)} style={{border:'none',outline:'none',width:'100%',backgroundColor:'transparent',padding:'5px'}}></input>\r\n                </div>\r\n                </div>:\r\n              <div className='group_description_edit'>\r\n                \r\n                <span style={{fontSize:'15px',marginRight:'5px'}}>{selectedConversation.description}</span><IconButton onClick={()=>setEditGroupDescriptionGlag(true)}><EditIcon style={{fontSize:'large'}}/></IconButton>\r\n                </div>}\r\n             \r\n            </div>\r\n            \r\n            <div className='group_details_container'>\r\n            <h2 className='group_title' style={{ padding:'10px' ,borderBottom:'1px solid #B0B0B0'}}>{selectedConversation.Participants.length +1} participants</h2>\r\n            <Modal className='Modal' open={modalOpen} onClose={closeModal} >\r\n               <AddGroupMember closeModal={closeModal}  /> \r\n            </Modal>\r\n\r\n            {selectedConversation.creatorId===sessionStorage['id']?\r\n            <div className='participant' style={{cursor:'pointer',fontSize:'15px'}} onClick={()=>setModalOpen(true)} >\r\n\r\n              <Avatar>\r\n              <IconButton className={classes.root} style={{padding:'3px'}}><PersonAdd fontSize='large'/></IconButton>\r\n              </Avatar>\r\n              <h3 className='group_participant_name'>Add Member</h3>\r\n            </div>:''}\r\n            {selectedConversation.Participants.map((participant,index)=>\r\n            {\r\n              return(\r\n                 <div  key={index} className='participant' >\r\n                   \r\n                   <div onClick={()=>openConversation(participant)} style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center',cursor:'pointer'}}>\r\n                   <Avatar src={participant.imageName}/>\r\n                   <div  style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center'}}>\r\n                   <h3 className='group_participant_name'>{participant.name}</h3>\r\n                   \r\n                   {participant.id===selectedConversation.creatorId?\r\n                    <div className='group_admin'>\r\n                      <h3 style={{fontSize:'13px'}}>Group Manager</h3>\r\n                   </div>:''}\r\n                   </div >\r\n                   </div>\r\n                   {sessionStorage['id'] === selectedConversation.creatorId?\r\n                      <IconButton  onClick={()=>beforeDeleteUser(participant)} style={{padding:'3px'}}>\r\n                        <CloseIcon fontSize='medium'/>\r\n                      </IconButton> :''}\r\n                 </div>)\r\n            })}\r\n\r\n                 <div  className='participant'>\r\n                   <div style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center'}}>\r\n                 \r\n                   <Avatar src={info.imageName}/>\r\n                   <div style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center'}}>\r\n                   <h3 className='group_participant_name'>{info.name}</h3>\r\n                   \r\n                   {sessionStorage['id']===selectedConversation.creatorId?\r\n                    <div className='group_admin'>\r\n                      <h3 style={{fontSize:'13px'}}>Group Manager</h3>\r\n                   </div>:''}\r\n                   </div >\r\n                   </div>\r\n                 </div>\r\n                </div>\r\n\r\n                <div className='group_details_container leave' onClick={()=>setDialogOpen(true)} >\r\n                  <div className='leaveGroup'>\r\n                     <IconButton className={classes.root} style={{padding:'3px'}} >\r\n                       <ExitToAppIcon style={{color:'darkred'}}fontSize='large'/>\r\n                     </IconButton>\r\n                     <h3 className='group_participant_name' style={{color:'darkRed',fontSize:'17px'}}>leave Group</h3>\r\n                  </div>\r\n                </div>\r\n           \r\n            </div>:''}\r\n           \r\n            </span>\r\n            </div>\r\n             <Dialog className='exit_group_dialog' onClose={()=> setDialogOpen(false)}  open={dialogOpen}>\r\n               <div style={{padding:'10px'}}>\r\n                 <h2 className='dialog_title'> are you sure you want to leave this group?</h2>\r\n                 <div className='dialog_options_buttons'>\r\n                   <button className='dialog_button' onClick={()=>removeFromGroup()} >yes</button>\r\n                   <button className='dialog_button' onClick={()=>setDialogOpen(false)}>no</button>\r\n                 </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n\r\n            <Dialog className='exit_group_dialog' onClose={()=> setDeleteUserDialog(false)}  open={deleteUserDialog}>\r\n               <div style={{padding:'10px'}}>\r\n                 <h2 className='dialog_title'> are you sure you want to delete this user?</h2>\r\n                 <div className='dialog_options_buttons'>\r\n                   <button className='dialog_button' onClick={()=>removeUserFromGroup()} >yes</button>\r\n                   <button className='dialog_button' onClick={()=>setDeleteUserDialog(false)}>no</button>\r\n                 </div>\r\n                </div>\r\n            </Dialog>\r\n            </div>:\r\n          <div className='chat'>\r\n              {chatSide}\r\n          </div>\r\n\r\n          \r\n    )\r\n}\r\n","import '../css/dashboard.css'\r\nimport React from 'react'\r\nimport SideBar from './sidebar'\r\nimport Chat from './chat'\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nexport default withRouter(function Dashboard({id}) {\r\n    const {selectedConversation} =useConversations()\r\n\r\n    return (\r\n        <div className='dashboard'>\r\n       \r\n           <div className='dashboard_body'>\r\n              <SideBar id={id}/>\r\n              {selectedConversation!==undefined?  <Chat id={id}  />: ''}\r\n           </div>\r\n        </div>\r\n    )\r\n})\r\n","import {useState} from 'react'\r\nimport '../css/login.css'\r\nimport axios from 'axios'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\n \r\n\r\nfunction Register(props) {\r\n   \r\n    const[phone,setPhone] =useState('')\r\n    const[name,setName] =useState('')\r\n    const [Picture,setPicture] =useState(null)\r\n    const history=useHistory();\r\n    const [error,setError] =useState('')\r\n\r\n\r\n    /*get user information and token from DB*/\r\n    async function handleSubmit(e)\r\n    {\r\n\r\n        e.preventDefault();\r\n        \r\n        let picturePath=''\r\n\r\n        if(Picture)\r\n        {\r\n         const data = new FormData()\r\n         data.append('file',Picture)\r\n         data.append(\"upload_preset\",\"whatsApp_clone\")\r\n         data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n       \r\n         try\r\n         {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n          picturePath =response.data.url\r\n         }catch(err){console.log(err)}\r\n\r\n      }\r\n\r\n\r\n\r\n        \r\n        \r\n        let obj = {name: name,phone: phone,imageName:picturePath,contacts:[],LastSeen:'last seen at...'}\r\n\r\n\r\n       try{\r\n            const response = await axios.post(\"https://messagesapp1.herokuapp.com/api/logIn/Register\",obj)\r\n            if(response.data.status === 'error')\r\n            {\r\n              setError(response.data.message)\r\n            }\r\n\r\n            else\r\n            {\r\n              sessionStorage['config']= response.data.token \r\n              sessionStorage['id'] = response.data.User._id\r\n              sessionStorage['name'] = response.data.User.name\r\n              props.CanLogIn(response.data.User._id)\r\n\r\n              history.push('/App')\r\n            }\r\n        }\r\n       catch(err){console.log(err)}\r\n\r\n          \r\n    }\r\n        \r\n\r\n    function handleFileUpload(e) {\r\n        setPicture(e.target.files[0])\r\n      }\r\n\r\n    return (\r\n\r\n        <div className=\"overlay\">\r\n     <form className='login_form' onSubmit={handleSubmit}>\r\n       <div className=\"con\">\r\n         <header className=\"head-form\">\r\n           <h2>Register</h2>\r\n           <p>welcome to  my whatsApp</p>\r\n         </header>\r\n       <div className=\"field-set\">\r\n         <span className=\"input-item\">\r\n           <i class=\"fa fa-user-circle\"></i>\r\n         \r\n         <input className=\"form-input\" id=\"txt-input\" type=\"text\" placeholder=\"@UserName\" onChange={(e)=> setName(e.target.value)} required />\r\n\r\n         </span>\r\n         <span className=\"input-item\">\r\n         <i class=\"fa fa-key\"></i>\r\n       \r\n         <input className=\"form-input\" type=\"password\" placeholder=\"Password\" id=\"pwd\"  name=\"password\" onChange={(e)=> setPhone(e.target.value)} required/>\r\n         </span>\r\n        \r\n           \r\n         <div id=\"fileupload\" >\r\n        <div className=\"myfileupload-buttonbar \">\r\n            <label className=\"myui-button\">\r\n            <i class=\"fa fa-upload\" aria-hidden=\"true\"></i>\r\n                <span className='text' >Add Picture</span>\r\n                <input id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n            </label>\r\n        </div>\r\n    </div>\r\n   \r\n         <button className=\"log-in\" type='submit'> Register </button>\r\n        </div>\r\n\r\n        <div>\r\n        <Link  className=\"submits sign-up defaultLink\" to={`/`}>    <i style={{margin:'7px'}}class=\"fa fa-user-plus\" aria-hidden=\"true\"/>back to Log In</Link>\r\n   \r\n       </div>\r\n       <span style={{fontSize:'15px'}}>{error}</span>\r\n     </div>\r\n\r\n</form>\r\n</div>\r\n  \r\n    )\r\n\r\n\r\n}\r\n\r\n\r\nexport default Register\r\n","import '../css/app.css'\nimport {useState} from 'react'\nimport LogIn from './login'\nimport Dashboard from './dashboard'\nimport  {UserProvider} from '../contexts/userprovider'\nimport {ConversationsProvider} from '../contexts/conversationsprovider'\nimport { SocketProvider } from '../contexts/socketprovider'\nimport {BrowserRouter as Router,Switch, Route,Redirect} from 'react-router-dom'\nimport Register from './register'\n\n\n\n\nfunction App() {\n\n  const [id,setId] =useState()\n\n  const dashboard = (\n   <SocketProvider userId={id} >\n     <UserProvider id={id}>\n      <ConversationsProvider >\n        <Dashboard  id={id}/>\n      </ConversationsProvider>\n     </UserProvider>\n    </SocketProvider>\n  )\n  \n\n\n  return (\n\n    <Router >\n      <div className=\"App\">\n         <Switch>\n           {sessionStorage['id']}\n            <Route exact path='/' > <LogIn CanLogIn={setId}/></Route> \n            <Route path='/Register' > <Register CanLogIn={setId}/></Route>\n            {sessionStorage['id']?  <Route exact path='/App' > {dashboard} </Route>:<Redirect to=\"/\" />}\n         </Switch>\n  \n      </div>\n\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}