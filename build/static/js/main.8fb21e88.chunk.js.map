{"version":3,"sources":["components/login.js","contexts/socketprovider.js","contexts/userprovider.js","contexts/conversationsprovider.js","components/conversations.js","components/contacts.js","components/addnewcontact.js","components/createnewgroup.js","components/profiledetails.js","components/sidebar.js","components/addgroupmember.js","components/showgroupdetails.js","components/showuserdetails.js","components/message.js","components/audiomessage.js","components/chatbody.js","components/sendimagebody.js","components/chat.js","components/dashboard.js","components/register.js","components/App.js","index.js"],"names":["LogIn","props","useState","phone","setPhone","UserName","setUserName","Error","setError","history","useHistory","e","a","preventDefault","obj","name","axios","post","response","data","sessionStorage","token","User","_id","CanLogIn","push","class","className","onSubmit","id","type","placeholder","onChange","target","value","required","to","style","margin","SocketContext","React","createContext","useSocket","useContext","SocketProvider","userId","children","socket","useRef","ConnectedUsers","setConnectedUsers","useEffect","current","io","fetchData","emit","on","users","Provider","UserContext","useUser","UserProvider","contacts","setContacts","info","setInfo","config","updateFlag","setUpdateFlag","getContacts","get","imageName","LastSeen","Status","color","console","log","then","res","createContact","status","message","filter","contact","length","newContacts","UpdatedUser","put","updateInformation","user","userToContacts","getSearchContacts","str","SearchResult","includes","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversation","setSelectedConversation","RefConversations","currentConversationRef","typingFlag","setTypingFlag","currentConversationIsConnected","setCurrentConversationIsConnected","headers","showDetails","setShowDetails","removedFromGroupFlag","setRemovedFromGroupFlag","audio","Audio","renderFlag","setRenderFlag","getConversations","ConversationsList","map","conversation","UpdatedConversation","isGroup","Name","Participants","ConversationImage","ids","image","groupFlag","messages","lastMessage","ConversationExists","find","participants","createdDate","parts","Intl","DateTimeFormat","hc","year","month","day","hour","minute","timeZone","formatToParts","Date","reduce","acc","part","Object","create","timeSent","containsImage","containsRecord","recordURL","FormData","append","url","newConversation","creatorId","Messages","LastMessage","description","Response","prevConversations","updatedConversation","updateDBConv","addCurrentParticipant","UpdatedConversations","forEach","some","conversationId","addMessageToConversation","useCallback","UpdatedConv","play","newListOfConversations","newConv","off","sendMessage","text","imageFlag","imageURL","time","recordFlag","CurrentMessage","sender","AddMessage","newListOfConcversations","updateSenderConversation","createConversation","getSearchConverastions","UpdateConversation","updateConversationParticipant","userUpdatedInfo","infoFlag","information","updateConv","updateCon","newParticipants","Conversations","index","onClick","handleSelectedConversation","Avatar","src","slice","Contacts","newConversationCallback","openModalCallback","Button","height","fontSize","startConversation","AddNewContact","closeModal","userNameRef","error","responseStatus","IconButton","ref","CreateNewGroup","selectedContactsId","setSelectedContactsId","groupName","setGroupName","groupImage","setGroupImage","previewImage","setPreviewImage","goToParticipants","setGoToParticipants","handleFileUpload","files","window","URL","createObjectURL","flex","marginLeft","paddingRight","width","backgroundColor","marginTop","display","flexDirection","alignItems","position","zIndex","accept","opacity","padding","borderRadius","border","outline","justifyContent","overflowY","contactId","prevSelectedContactsId","for","process","fontWeight","useStyles","makeStyles","root","ProfileDetails","backToConversations","editNameFlag","setEditNameFlag","editStatusFlag","setEditStatusFlag","emojiFlag","setEmojiFlag","Text","setText","setStatus","statusEmojiFlag","setStatusEmojiFlag","classes","picturePath","curser","onEmojiClick","emojiObject","event","prevText","emoji","pickerStyle","changeProfileName","defaultValue","prevStatus","onStatusEmojiClick","changeProfileStatus","SideBar","choosenAct","setChoosenAct","modalOpen","setModalOpen","searchFlag","setSearchFlag","choosenModal","setChoosenModal","openProfileDetailsFlag","setOpenProfileDetailsFlag","openChoosenModal","modalType","Modal","open","onClose","AddGroupMember","conversationContacts","setConversationContacts","participant","AddMember","ShowGroupDetails","EditGroupNameGlag","setEditGroupNameGlag","EditGroupDescriptionGlag","setEditGroupDescriptionGlag","Description","setDescription","dialogOpen","setDialogOpen","deleteUserDialog","setDeleteUserDialog","userToDelete","setUserToDelete","LastMasage","changeGroupName","paddingLeft","onDescriptionEmojiClick","changeGroupDescription","marginRight","borderBottom","cursor","existsFlag","participantId","openConversation","flexGrow","beforeDeleteUser","Dialog","removeFromGroup","removeUserFromGroup","ShowUserDetails","privateConversationHeader","pictureDialogOpen","setPictureDialogOpen","alt","paddingBottom","Message","SelectedImageURL","setSelectedImageURL","substring","AudioMessage","messageColor","controls","controlsList","ChatBody","inputRef","setRecordFlag","useReactMediaRecorder","startRecording","stopRecording","mediaBlobUrl","clearBlobUrl","audioBlob","setAudioBlob","setRef","node","scrollIntoView","smooth","imageCallback","handleRecord","fetch","blob","cancelRecord","choosenClass","visibility","htmlFor","component","Conversation","SendImageBody","handleSubmit","backToChat","Chat","setImageFlag","setImageURL","returnValue","setTimeout","chatSide","UsersInGroup","groupheader","withRouter","undefined","Register","setName","Picture","setPicture","getColor","Math","random","toString","randomColor","marginBottom","App","setId","dashboard","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fb21e88.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport '../css/login.css'\r\nimport axios from 'axios'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\n\r\n\r\n\r\nexport default function LogIn(props) \r\n{\r\n\r\n  const [phone,setPhone] = useState('');\r\n  const [UserName,setUserName] = useState('');\r\n  const [Error,setError] = useState('')\r\n  const history=useHistory();\r\n\r\n  //get user information and token from DB\r\n  async function handleSubmit(e)\r\n  {\r\n    setError('')\r\n    e.preventDefault()\r\n    let obj = {name: UserName,phone: phone}\r\n    let response = await axios.post(\"https://messagesapp1.herokuapp.com/api/logIn\",obj)\r\n\r\n    if(response.data !== \"not found\")\r\n    {\r\n      sessionStorage['config']= response.data.token \r\n      sessionStorage['id'] = response.data.User._id\r\n      sessionStorage['name'] = response.data.User.name\r\n      props.CanLogIn(response.data.User._id)\r\n\r\n       history.push('/App')\r\n\r\n    }\r\n        \r\n    else\r\n      setError(\"One or more of your identification details is incorrect.\")\r\n\r\n  }\r\n\r\n  return (\r\n  \r\n    <div class=\"overlay\">\r\n      <form className='login_form' onSubmit={handleSubmit}>\r\n        <div class=\"con\">\r\n          <header class=\"head-form\">\r\n            <h2>Log In</h2>\r\n            <p>welcome to  my whatsApp</p>\r\n          </header>\r\n          <div class=\"field-set\">\r\n            <span class=\"input-item\">\r\n              <i class=\"fa fa-user-circle\"></i>\r\n              <input class=\"form-input\" id=\"txt-input\" type=\"text\" placeholder=\"@UserName\" onChange={(e)=> setUserName(e.target.value)} required />\r\n            </span>\r\n            <span class=\"input-item\">\r\n              <i class=\"fa fa-key\"></i>\r\n              <input class=\"form-input\" type=\"password\" placeholder=\"Password\" id=\"pwd\"  name=\"password\" onChange={(e)=> setPhone(e.target.value)} required/>\r\n            </span>\r\n            <button className=\"log-in\" type='submit'> Log In </button>\r\n          </div>\r\n          <div>\r\n            <Link  className=\"submits sign-up defaultLink\" to={`/Register`}>     Sign Up<i style={{margin:'7px'}}class=\"fa fa-user-plus\" aria-hidden=\"true\"/></Link>\r\n          </div>\r\n          {Error}\r\n        </div>\r\n      </form>\r\n    </div>    \r\n  )\r\n}\r\n","import React, { useState,useContext,useRef,useEffect} from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nconst SocketContext = React.createContext()\r\n\r\nexport function useSocket() \r\n{\r\n  return useContext(SocketContext)\r\n}\r\n\r\nexport function SocketProvider({ userId, children }) \r\n{\r\n\r\n  const socket = useRef()\r\n  const [ConnectedUsers,setConnectedUsers] =useState([])\r\n\r\n  useEffect(()=>\r\n  {\r\n    async function fetchData() {\r\n       socket.current = io(\"wss://messagesapp1.herokuapp.com:443/\");\r\n    }\r\n\r\n    fetchData()\r\n\r\n  },[])\r\n\r\nuseEffect(()=>\r\n{\r\n  async function fetchData() \r\n  {\r\n    socket.current.emit(\"AddUser\",sessionStorage['id'])\r\n    socket.current.on(\"getConnectedUsers\", users =>\r\n    {\r\n      setConnectedUsers(users)\r\n    })\r\n  }\r\n\r\n  fetchData();\r\n\r\n},[userId])\r\n\r\n  return (\r\n    <SocketContext.Provider value={{socket,ConnectedUsers}}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  )\r\n}","\r\nimport React, { useState ,useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nimport { useSocket } from \"./socketprovider\";\r\nconst UserContext = React.createContext()\r\n\r\n\r\nexport function useUser() \r\n{\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport  function UserProvider({ children })\r\n{\r\n  const [contacts, setContacts] = useState([])\r\n  const [info,setInfo] =useState({})\r\n  const config= {'headers': {'x-access-token':sessionStorage['config']}}\r\n  const {socket} = useSocket();\r\n  const [updateFlag,setUpdateFlag]=useState(true)\r\n\r\n  \r\n  useEffect( () =>\r\n  {\r\n    async function fetchData() \r\n    {\r\n      getContacts().then(res=> setContacts(res))\r\n    }\r\n\r\n    if(updateFlag)\r\n    {\r\n      fetchData();\r\n      setUpdateFlag(false)\r\n    }\r\n\r\n   },[updateFlag])\r\n\r\n   useEffect(()=>\r\n   {\r\n     async function fetchData() \r\n     {\r\n       if(socket.current ==null ) return;\r\n\r\n \r\n       //when other user updates contact information, update this user on changes\r\n       socket.current.on('update-contact',async ()=>\r\n       {\r\n         setUpdateFlag(true)\r\n       })\r\n \r\n   }\r\n \r\n   fetchData();\r\n \r\n   },[updateFlag])\r\n\r\n   async function getContacts()\r\n   {\r\n      const response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+sessionStorage['id'],config);\r\n      setInfo({id:response.data._id,name:response.data.name,phone:response.data.phone,imageName:response.data.imageName,LastSeen:response.data.LastSeen,Status:response.data.Status,color:response.data.color})\r\n      console.log(response.data.contacts)\r\n      return(response.data.contacts)\r\n\r\n   }\r\n   \r\n\r\n  function getSearchContacts(str)\r\n  {\r\n    getContacts().then(res=>\r\n    {\r\n      let SearchResult =res.filter(contact=> contact.name.includes(str) === true)\r\n      setContacts(SearchResult)\r\n    })\r\n\r\n  }\r\n\r\n\r\n  const createContact = async(name) =>\r\n  {\r\n    \r\n    if(name === info.name)\r\n    {\r\n      return {status:'error',message:'cant Add yourself'};\r\n    }\r\n\r\n    let checkIfExists = contacts.filter(contact=> contact.name === name)\r\n\r\n    if(checkIfExists.length !== 0)\r\n    {\r\n      return {status:'error',message:'already exists'};\r\n    }\r\n\r\n    try\r\n    { \r\n\r\n      const response= await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/getByName/\" + name,config)\r\n\r\n      if(response.data !== 'no such user')\r\n      {\r\n        const contact = {id:response.data._id,phone:response.data.phone,name:response.data.name,imageName:response.data.imageName,Status:response.data.Status,color:response.data.color}\r\n        let newContacts = [...contacts,contact]\r\n        setContacts(newContacts)\r\n        let UpdatedUser={...info,contacts:newContacts}\r\n        try\r\n        {\r\n          await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],UpdatedUser,{'headers': {'x-access-token':sessionStorage['config']}})\r\n        } catch(err){console.log(err)}\r\n      }\r\n      else return {status:'error',message:'user doesnt exist'};\r\n     \r\n    }catch(err){console.log(err)}\r\n\r\n    return {status:'ok'}\r\n\r\n  }\r\n\r\n  const updateInformation = async(user,userToContacts) =>\r\n  {\r\n    try\r\n    {\r\n      let response = await axios.put(\"https://messagesapp1.herokuapp.com/api/logIn/\" + sessionStorage['id'],user,config)\r\n      if(response.data.status==='Updated')\r\n      {\r\n        setInfo(user)\r\n      }\r\n    }catch(err){console.log(err)}\r\n\r\n     socket.current.emit('contact-changed',userToContacts)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{setContacts,setInfo,info,config,contacts,createContact,getSearchContacts,updateInformation }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}","import React, { useContext, useCallback, useRef } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useUser } from \"./userprovider\";\r\nimport { useSocket } from \"./socketprovider\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() \r\n{\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({children }) \r\n{\r\n\r\n  const {contacts, info} = useUser();\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState();\r\n  const RefConversations = useRef(conversations);\r\n  const currentConversationRef = useRef(selectedConversation);\r\n  const {socket, ConnectedUsers} = useSocket();\r\n  const [typingFlag,setTypingFlag] =useState('')\r\n  const [currentConversationIsConnected,setCurrentConversationIsConnected] = useState('')\r\n  const config = { headers: { \"x-access-token\": sessionStorage[\"config\"] } };\r\n  const [showDetails,setShowDetails] =useState(false)\r\n  const [removedFromGroupFlag,setRemovedFromGroupFlag] = useState(false)\r\n  const audio = new Audio('https://res.cloudinary.com/dsrgpqnyv/video/upload/v1630680168/juntos-607_qsfc7i.mp3');\r\n  const [renderFlag,setRenderFlag]=useState(true)\r\n\r\n\r\n  useEffect(()=>\r\n  {\r\n    async function fetchData() \r\n    {\r\n      if(socket.current ==null ) return;\r\n      //when other user updates conversation information, update this user on changes\r\n      socket.current.on('update-conversation',async ()=>\r\n      {\r\n        console.log('here')\r\n        setRenderFlag(true)\r\n      })\r\n\r\n\r\n    //when user was removed, remove this user from conversation\r\n    socket.current.on('removed-user',async ()=>\r\n    {\r\n      getConversations().then(res=> \r\n      {\r\n        setConversations(res)\r\n        if(selectedConversation)\r\n        {\r\n          /*if this selected conversation dosn't exists in conversations anymore, this is the deleted user, \r\n          let him know he was deleted and remove this chat from selected conversation*/\r\n          let checkIfDeleted=res.filter(conversation=> conversation._id === selectedConversation._id)\r\n          if(checkIfDeleted.length === 0 ) \r\n            setRemovedFromGroupFlag(true)\r\n\r\n        }\r\n\r\n      })\r\n    \r\n    })\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[selectedConversation,renderFlag])\r\n\r\n/*everytime a user is connected/dissconnected/ this user entered new conversation,\r\n check if the current conversation user is connected or not*/\r\n  useEffect( ()=>\r\n  {\r\n    async function fetchData() \r\n    {\r\n\r\n      if(selectedConversation)\r\n      {\r\n        if(!selectedConversation.isGroup)\r\n        {\r\n         if(ConnectedUsers.some(user=> user.userId ===selectedConversation.Participants[0].id))\r\n        {\r\n          setCurrentConversationIsConnected('')\r\n        }\r\n        else\r\n        {\r\n          let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/logIn/\"+ selectedConversation.Participants[0].id,config)\r\n          setCurrentConversationIsConnected(response.data.LastSeen)\r\n        }\r\n     }\r\n    }\r\n  }\r\n\r\n  fetchData();\r\n\r\n  },[ConnectedUsers,selectedConversation])\r\n\r\n\r\n  //on first render,and every time conversation updates, get new conversations from DB\r\n  useEffect(() =>\r\n  {\r\n\r\n    async function fetchData() \r\n    {\r\n      getConversations().then(res=> setConversations(res))\r\n    }\r\n\r\n    if(renderFlag)\r\n    {\r\n      setRenderFlag(false)\r\n      fetchData();\r\n    }\r\n    \r\n  }, [renderFlag]);\r\n\r\n  //when other user is typing, and this user is on this conversation, let him know other user is typing\r\n  useEffect(() =>\r\n  {\r\n\r\n    if(socket.current ==null ) return;\r\n    socket.current.on('user-typing',({user,conversationId})=>\r\n    {\r\n      if(selectedConversation)\r\n      {\r\n        if(selectedConversation._id === conversationId)\r\n        {\r\n           setTypingFlag(user.name)\r\n        }\r\n      }\r\n    })\r\n\r\n  },[selectedConversation])\r\n\r\n\r\n\r\n  //get updated conversations from DB when needed\r\n  async function getConversations()\r\n  {\r\n\r\n    try\r\n    {\r\n      let response = await axios.get(\"https://messagesapp1.herokuapp.com/api/conversations/UserConversations/\" +sessionStorage[\"id\"],config);\r\n      let ConversationsList = response.data.map((conversation) =>\r\n      {\r\n        let UpdatedConversation= conversation\r\n\r\n        /*if this is a private conversation, and the name and picture saved as this user name, \r\n        update the conversation to other user name and picture*/\r\n        if (!conversation.isGroup && conversation.Name ===  info.name)\r\n          UpdatedConversation = { ...UpdatedConversation,Name: conversation.Participants[0].name,ConversationImage:conversation.Participants[0].imageName}\r\n\r\n\r\n        //update the current shown on screen conversation\r\n        if(selectedConversation)\r\n        {\r\n          if(selectedConversation._id === UpdatedConversation._id)\r\n            setSelectedConversation(UpdatedConversation)\r\n        }\r\n\r\n         return UpdatedConversation;\r\n\r\n      })\r\n\r\n      return ConversationsList \r\n\r\n    } catch (err) {console.log(err);}\r\n\r\n  }\r\n\r\n  //on search event, update shown conversations list\r\n  async function getSearchConverastions(str)\r\n  {\r\n    getConversations().then(res=>\r\n    {\r\n      let SearchResult = res.filter(conversation=> \r\n      conversation.Name.includes(str) ===true)\r\n      setConversations(SearchResult)\r\n    })\r\n\r\n  }\r\n        \r\n\r\n  //create new conversation\r\n  async function createConversation(ids, name, image,groupFlag)\r\n  {\r\n\r\n    let ConversationImage = image;\r\n    let isGroup = groupFlag;\r\n    let messages = []\r\n    let lastMessage=''\r\n\r\n\r\n    //no participants chosen\r\n    if (ids.length === 0) {\r\n      return {status:'error',message:'no participants choosen'};\r\n    }\r\n\r\n    //check if conversation already exists and it's not a group.\r\n    let ConversationExists = null;\r\n    if (ids.length === 1 && !isGroup) {\r\n      ConversationExists = conversations.find(\r\n        (conversation) => conversation.Name === name\r\n      );\r\n    }\r\n\r\n\r\n    //if already exists, show the existing one\r\n    if (ConversationExists) setSelectedConversation(ConversationExists);\r\n\r\n    //create new conversation\r\n    else {\r\n\r\n      //get conversation participants\r\n      const participants = ids.map((id) => \r\n      {\r\n        let addContactToConversation = contacts.filter(\r\n          (contact) => id === contact.id\r\n        );\r\n        return addContactToConversation[0];\r\n      });\r\n\r\n      console.log(participants)\r\n\r\n\r\n      //add creator to participants\r\n      participants.push({\r\n        id: info.id,\r\n        name: info.name,\r\n        phone: info.phone,\r\n        imageName: info.imageName,\r\n        LastSeen: info.LastSeen\r\n      });\r\n\r\n      let createdDate=''\r\n\r\n      //if group add creation date,add creation message and upload group picture\r\n      if (isGroup) \r\n      {\r\n        let parts = new Intl.DateTimeFormat('en', {\r\n          hc: 'h12',\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          timeZone:'Asia/Jerusalem'})\r\n        .formatToParts(new Date())\r\n        .reduce((acc, part) => {\r\n          acc[part.type] = part.value;\r\n          return acc;\r\n        }, Object.create(null));\r\n\r\n        createdDate= `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}`;\r\n\r\n        lastMessage={name:\"manager\",message: info.name +\" created this group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n        messages.push(lastMessage)\r\n\r\n        const data = new FormData()\r\n        data.append('file',ConversationImage)\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n          ConversationImage = response.data.url;\r\n\r\n        }catch(err){console.log(err)}\r\n   \r\n      }\r\n    \r\n      let newConversation = \r\n      {\r\n        Name: name,\r\n        creatorId: sessionStorage[\"id\"],\r\n        Participants: participants,\r\n        Messages: messages,\r\n        LastMessage:lastMessage,\r\n        ConversationImage: ConversationImage,\r\n        isGroup:isGroup,\r\n        createdDate:createdDate,\r\n        description: \"Add Description\",\r\n      };\r\n\r\n      //updateDB\r\n      try \r\n      {\r\n        let Response = await axios.post(\r\n          \"https://messagesapp1.herokuapp.com/api/conversations\",\r\n          newConversation,\r\n          config\r\n        );\r\n\r\n        if (Response.data.status === \"created\") \r\n        {\r\n          setSelectedConversation(Response.data.conversation);\r\n\r\n          //show conversation only if messages sent or if its A group\r\n          if (Response.data.conversation.Messages.length > 0  || Response.data.conversation.isGroup === true)\r\n          {\r\n            setConversations((prevConversations) => {\r\n              return [...prevConversations, Response.data.conversation];\r\n            });\r\n            socket.current.emit('conversation-changed',Response.data.conversation)\r\n          }\r\n        }\r\n      }catch (err) {console.log(err);}\r\n    }\r\n  }\r\n\r\n\r\n  //update existing conversation details when changed \r\n  async function UpdateConversation(updatedConversation)\r\n  {\r\n\r\n    let updateDBConv={...updatedConversation}\r\n\r\n    //if user left the group, dont add him to DB\r\n    if(!(updatedConversation.LastMessage.message.includes('left')))\r\n    {\r\n      let addCurrentParticipant= {id: info.id,phone: info.phone,name: info.name,imageName: info.imageName,Status:info.Status,color:info.color}\r\n      let participants=[...updatedConversation.Participants,addCurrentParticipant]\r\n      updateDBConv={...updateDBConv,Participants:participants}\r\n    }\r\n\r\n    delete updateDBConv._id\r\n\r\n    try\r\n    {\r\n      let response=await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+ selectedConversation._id,updateDBConv,config)\r\n      if(response.data.status==='Updated')\r\n      {\r\n        let UpdatedConversations=[]\r\n        if(!(updatedConversation.LastMessage.message.includes('left')))\r\n        {\r\n          setSelectedConversation(updatedConversation)\r\n          conversations.forEach(conversation=>\r\n          { \r\n            if(conversation._id===updatedConversation._id)    \r\n              UpdatedConversations.push(updatedConversation)\r\n            else UpdatedConversations.push(conversation)\r\n\r\n          })\r\n        }\r\n        else\r\n        {\r\n          UpdatedConversations=conversations.filter(conversation=> conversation._id !== selectedConversation._id)\r\n          setSelectedConversation()\r\n        }\r\n\r\n\r\n        //if user where removed by admin, send to user deleted case, so server let him know he was deleted\r\n        if(updatedConversation.LastMessage.message.includes('removed'))\r\n          socket.current.emit('user-deleted',selectedConversation)\r\n        else\r\n          socket.current.emit('conversation-changed',selectedConversation)\r\n\r\n        setConversations(UpdatedConversations)\r\n              \r\n      }\r\n    }catch(err){console.log(err)}\r\n  }\r\n\r\n  function updateConversationParticipant(userUpdatedInfo,infoFlag,information)\r\n  {\r\n\r\n    let updateConv=[]\r\n    conversations.map(async (conversation)=>\r\n    {\r\n      let updateCon = ''\r\n\r\n      if(conversation.Name === userUpdatedInfo.info && conversation.isGroup==false)\r\n      {\r\n        if(infoFlag === 'name')\r\n        {\r\n          updateCon = {...conversation,Name:information}\r\n        }\r\n\r\n        else if(infoFlag=='image')\r\n            updateCon = {...conversation,ConversationImage:information}\r\n\r\n\r\n    }\r\n\r\n      else updateCon = {...conversation}\r\n\r\n      updateConv.push(updateCon)\r\n\r\n      let newParticipants=[...conversation.Participants,userUpdatedInfo]\r\n      updateCon={...updateCon,Participants:newParticipants}\r\n      delete updateCon._id\r\n\r\n      try\r\n      {\r\n        await axios.put(\"https://messagesapp1.herokuapp.com/api/conversations/\"+ conversation._id,updateCon,config)\r\n\r\n      }catch(err){console.log(err)}\r\n\r\n\r\n      socket.current.emit('conversation-changed',updateCon)\r\n      setConversations(updateConv)\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n  //add message got from other user to conversation\r\n  const addMessageToConversation = useCallback(async ({ UpdatedConv }) =>\r\n  {\r\n\r\n    //voice alert\r\n    audio.play()\r\n\r\n    let ConversationExists = false;\r\n\r\n    //use refConversations to void infinite loop\r\n    let newListOfConversations = RefConversations.current.map((conversation) =>\r\n    {\r\n      if (conversation._id === UpdatedConv._id) \r\n      {\r\n        ConversationExists = true;\r\n        let newConv = \r\n        { ...conversation,\r\n          Messages: UpdatedConv.Messages,\r\n          LastMessage: UpdatedConv.LastMessage,};\r\n          if (currentConversationRef.current) \r\n          {\r\n           if (currentConversationRef.current._id === UpdatedConv._id)\r\n             setSelectedConversation(newConv);\r\n          }\r\n\r\n        return newConv;\r\n\r\n      }\r\n      else return conversation;\r\n    });\r\n\r\n   // if this is a new conversation first message, update user conversations\r\n    if (!ConversationExists) \r\n    {\r\n      if (!UpdatedConv.isGroup)\r\n      {\r\n        let newConversation = \r\n        { ...UpdatedConv,\r\n        Name: UpdatedConv.Participants[0].name,\r\n        ConversationImage: UpdatedConv.Participants[0].imageName,\r\n        };\r\n\r\n        setConversations((prevConversations) => [...prevConversations, newConversation ]);\r\n      } \r\n      else\r\n        setConversations((prevConversations) => [...prevConversations,UpdatedConv]);\r\n    } \r\n    else setConversations(newListOfConversations);\r\n  },[setConversations]);\r\n\r\n\r\n  //handle messages socket\r\n  useEffect(() => \r\n  {\r\n\r\n    if (socket.current == null) return;\r\n    \r\n    RefConversations.current = conversations;\r\n    currentConversationRef.current = selectedConversation;\r\n    socket.current.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () =>\r\n      socket.current.off(\"receive-message\", addMessageToConversation);\r\n  },[conversations, selectedConversation]);\r\n\r\n\r\n\r\n  //update the message sender conversations\r\n  const updateSenderConversation = (AddMessage) => \r\n  {\r\n\r\n    let ConversationExists = false;\r\n    setSelectedConversation(AddMessage);\r\n\r\n    let newListOfConcversations = conversations.map((conversation) => \r\n    {\r\n      if (conversation._id === AddMessage._id) \r\n      {\r\n        ConversationExists = true;\r\n        return AddMessage;\r\n      } \r\n      else return conversation;\r\n\r\n    });\r\n\r\n    if (ConversationExists) \r\n    {\r\n      setConversations(newListOfConcversations);\r\n    } \r\n    else\r\n      setConversations((prevConversations) => [...prevConversations,AddMessage]);\r\n  };\r\n\r\n\r\n\r\n  //send new message to chat users\r\n  function sendMessage(text,imageFlag,imageURL,recordURL) {\r\n\r\n\r\n    let parts = new Intl.DateTimeFormat('en', {\r\n    hc: 'h12',\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    timeZone:'Asia/Jerusalem'})\r\n    .formatToParts(new Date())\r\n    .reduce((acc, part) => \r\n    {\r\n      acc[part.type] = part.value;\r\n      return acc;\r\n    }, Object.create(null));\r\n\r\n    let time = `${parts.day}/${parts.month}/${parts.year}  ${parts.hour}:${parts.minute}`;\r\n\r\n    let recordFlag= false\r\n\r\n    if(recordURL!=null)\r\n       recordFlag=true\r\n    \r\n    let CurrentMessage = { id: info.id, name: info.name,color:info.color, message: text  ,timeSent: time ,containsImage: imageFlag,containsRecord:recordFlag,recordURL:recordURL};\r\n    if(imageFlag ===true)\r\n       CurrentMessage= {...CurrentMessage,imageURL:imageURL}\r\n    \r\n    let sender = \r\n    {\r\n      id: info.id,\r\n      phone: info.phone,\r\n      name: info.name,\r\n      imageName: info.imageName,\r\n    };\r\n\r\n    let AddMessage = \r\n    {...selectedConversation,\r\n      Messages: [...selectedConversation.Messages, CurrentMessage],\r\n      LastMessage: CurrentMessage,\r\n    };\r\n\r\n    socket.current.emit(\"send-message\", \r\n    {\r\n      sender: sender,\r\n      UpdatedConversation: AddMessage,\r\n      conversationId: selectedConversation._id,\r\n    });\r\n\r\n    updateSenderConversation(AddMessage);\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{\r\n        sendMessage,\r\n        conversations,\r\n        createConversation,\r\n        setConversations,\r\n        setSelectedConversation,\r\n        selectedConversation,\r\n        currentConversationIsConnected,\r\n        typingFlag,\r\n        setTypingFlag,\r\n        getSearchConverastions,\r\n        showDetails,\r\n        setShowDetails,\r\n        UpdateConversation,\r\n        removedFromGroupFlag,\r\n        setRemovedFromGroupFlag,\r\n        updateConversationParticipant\r\n      \r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport {Avatar} from '@material-ui/core';\r\nimport {useConversations} from '../contexts/conversationsprovider';\r\nimport '../css/conversations.css'\r\n\r\nexport default function Conversations() \r\n{\r\n\r\n  const {setSelectedConversation,conversations,setShowDetails} =useConversations()\r\n\r\n  \r\n  async function handleSelectedConversation(conversation) \r\n  {\r\n    setShowDetails(false)\r\n    setSelectedConversation(conversation)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='Chats' >\r\n      <div className='contacts_list'>\r\n        {conversations.map((conversation,index)=>\r\n        {\r\n          return  (   \r\n            <div key={index}  onClick={()=>handleSelectedConversation(conversation)}  className='ChatsListItem'>\r\n              {console.log(conversation)}\r\n              {conversation.isGroup?\r\n              <Avatar src={conversation.ConversationImage}/>:<Avatar src={conversation.Participants[0].imageName}/>}\r\n              <div className='chatInfo'>\r\n                <h2 className='user_name'>{conversation.Name}</h2>\r\n                <span className='user_status'> {(conversation.LastMessage.message).slice(0,43)}\r\n                {conversation.LastMessage.message.length > 43? '...' :''} </span>\r\n              </div>\r\n            \r\n            </div>\r\n          )\r\n                    \r\n                })}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport {Avatar,Button} from '@material-ui/core';\r\nimport {useUser} from '../contexts/userprovider';\r\nimport {useConversations} from '../contexts/conversationsprovider'\r\nimport '../css/conversations.css'\r\n\r\nexport default function Contacts({newConversationCallback,openModalCallback}) \r\n{\r\n\r\n  const {contacts} = useUser()\r\n  const {createConversation} = useConversations()\r\n\r\n  function startConversation({id,name,image}) \r\n  {\r\n    let ids=[id]\r\n    createConversation(ids,name,image,false)\r\n    newConversationCallback()\r\n    \r\n  }\r\n\r\n  return (\r\n\r\n    <div className='Chats contacts'  >\r\n      <h4 className='new_chat_title'>Start New Chat:</h4>            \r\n      <Button  style={{height:'30px' ,margin:'5px 0px',fontSize:'10px'}} onClick={()=>openModalCallback()}\r\n      className='add_new_Button' > Create Group </Button>\r\n      <div className='contacts_list'>\r\n        {contacts.map(contact =>\r\n        {\r\n          return(\r\n         \r\n           <div className='ChatsListItem' onClick={()=>startConversation({id:contact.id,name:contact.name,image:contact.imageName})}>\r\n             <Avatar src={contact.imageName}/>\r\n              <div className='chatInfo'>\r\n                <h2 className='user_name'>{contact.name} </h2>\r\n                <span className='user_status'> {contact.Status.slice(0,25)}\r\n                {contact.Status.length > 25? '...' :''}\r\n                </span>\r\n\r\n              </div>\r\n            </div> \r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n};","import { useRef,useState } from 'react'\r\nimport {useUser } from '../contexts/userprovider';\r\nimport {IconButton } from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport '../css/addnew.css'\r\n\r\n\r\nexport default function AddNewContact({closeModal})\r\n{\r\n\r\n  const userNameRef = useRef()\r\n  const {createContact} = useUser()\r\n  const [error,setError]=useState('')\r\n   \r\n\r\n  async function AddContact()\r\n  {\r\n\r\n    let responseStatus = await createContact(userNameRef.current.value)\r\n\r\n    if(responseStatus.status === 'ok')\r\n    {\r\n       closeModal();\r\n       setError('')\r\n    }\r\n    \r\n    else\r\n    {\r\n      setError(responseStatus.message)\r\n    }\r\n   \r\n  }\r\n\r\n  return (\r\n   \r\n    <div className='add_new'>\r\n        <div className='add_new_contact_border'>\r\n            <div className='add_contact_model'>\r\n                <div className='title_and_close'>\r\n                  <h2 className='add_contact_title'>Add New Contact</h2> \r\n                  <IconButton className='close_add_new'  onClick={()=>closeModal()}>\r\n                    <CloseIcon fontSize='large' /> \r\n                  </IconButton>\r\n                </div>\r\n        \r\n                <div className='add_new_contact'>\r\n                  <h3 className='enter_phone'>userName:</h3>\r\n                  <input className='add_new_input' type='text' ref={userNameRef} required/>\r\n                  <button className='add_new_button' onClick={AddContact}> Add Contact</button>\r\n                </div>\r\n                <span className='show_error'>{error}</span>\r\n            </div>\r\n\r\n        </div>       \r\n    </div>\r\n\r\n  )\r\n}","import React, {useState } from 'react'\r\nimport {useUser } from '../contexts/userprovider'\r\nimport {useConversations } from '../contexts/conversationsprovider'\r\nimport {Avatar,IconButton} from '@material-ui/core';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nfunction CreateNewGroup( { closeModal }) {\r\n\r\n    const [selectedContactsId, setSelectedContactsId] = useState([])\r\n    const {contacts} = useUser()\r\n    const {createConversation} = useConversations()\r\n    const [groupName,setGroupName] =useState('')\r\n    const [groupImage,setGroupImage] =useState()\r\n    const [previewImage,setPreviewImage]=useState()\r\n    const [goToParticipants,setGoToParticipants] = useState(false)\r\n\r\n\r\n    function createGroup()\r\n    {\r\n        createConversation(selectedContactsId,groupName,groupImage,true)\r\n        closeModal()\r\n    }\r\n\r\n    \r\n    function handleCheckboxChange(contactId) \r\n    {\r\n        if(selectedContactsId.includes(contactId))\r\n        {\r\n            setSelectedContactsId(prevSelectedContactsId =>\r\n            {\r\n                return (prevSelectedContactsId.filter(id=> id!==contactId))\r\n            } )\r\n        }\r\n  \r\n        else\r\n        {\r\n           setSelectedContactsId(prevSelectedContactsId=>\r\n            {\r\n              return [...prevSelectedContactsId,contactId]\r\n            })\r\n        }   \r\n    }\r\n\r\n    function handleFileUpload(e)\r\n    {\r\n        setGroupImage(e.target.files[0])\r\n        setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='add_new'>\r\n        <div className='add_new_group_border'>\r\n          <div className='new_conversation new_group'>\r\n            {goToParticipants !==true ?\r\n            <div className='top_new_group'>\r\n              <div style={{flex:'1'}}className='title_and_close'>\r\n                <h2 className='add_contact_title' style={{marginLeft:'85px',paddingRight:'0px'}}>Create New Group:</h2> \r\n                <IconButton style={{marginLeft:'45px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                  <CloseIcon fontSize='large' /> \r\n                </IconButton>\r\n              </div>\r\n\r\n              {previewImage? \r\n              <div className='change_group_image'> \r\n                <Avatar  src={previewImage} style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}>  </Avatar>\r\n                <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white'}}>\r\n                  <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                  <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                  <span style={{fontSize:'10px'}}>Change Image </span>\r\n                </div>\r\n              </div>\r\n              :\r\n              <div className='add_group_image'>\r\n                <Avatar   style={{height: '110px', width: '110px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}>\r\n                  <PeopleAltIcon style={{position:'absolute',zIndex:'0', opacity:'0.1',height: '80px', width: '80px' }}/>\r\n                  <div  style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white'}}>\r\n                    <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                    <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                    <span style={{fontSize:'10px'}}>add group image</span>\r\n                  </div>\r\n                </Avatar>\r\n              </div> }\r\n              <div className='group_name'>\r\n                <span style={{padding:'5px', margin:'5px' , fontSize:'13px', color:'#fcfcfc'}}> Group Name:</span>\r\n                <input style={{borderRadius:'10px', border:'none',outline:'none'}} onChange={(e)=>setGroupName(e.target.value)}/>\r\n              </div>\r\n              <button style={{display:'flex',alignItems:'center',width:'180px',justifyContent:'center'}} className='add_new_button'  onClick={()=>setGoToParticipants(true)}><ArrowBackIcon style={{margin:'5px'}} /> Add Members</button>\r\n            </div>\r\n            :\r\n            <div>\r\n              <div style={{flex:'1'}}className='title_and_close'>\r\n                <h2 className='add_contact_title' style={{marginLeft:'80px',paddingRight:'0px'}}>Select Members:</h2> \r\n                <IconButton style={{marginLeft:'40px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                  <CloseIcon fontSize='large' /> \r\n                </IconButton>\r\n              </div>\r\n              <div style={{overflowY:'overlay',height:'200px'}}>\r\n              {contacts.map(contact =>\r\n              {\r\n                return(\r\n                  <div className='contact_item' >\r\n                    <input type=\"checkbox\" value={selectedContactsId.includes(contact.id)}\r\n                    id={contact.id} onChange={() => handleCheckboxChange(contact.id)}/>\r\n                    <label style={{display:'flex',flexDirection:'row',alignItems:'center',width:'100%'}}for={contact.id} >\r\n                      <Avatar  style={{margin:'5px'}} src={process.env.PUBLIC_URL + contact.imageName}   fontSize='large'/>\r\n                      <h3 className='enter_phone' style={{marginLeft:'10px' ,fontWeight:'400'}}>{contact.name} </h3>\r\n                    </label>\r\n                  </div>\r\n                )}) \r\n                }  \r\n              </div>\r\n              <div style={{display:'flex' , justifyContent:'center'}}>\r\n                <button className='add_new_button'  type=\"submit\" onClick={()=>createGroup()}>Create</button>\r\n              </div>\r\n\r\n            </div>}  \r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default CreateNewGroup\r\n","import React,{useState} from 'react'\r\nimport '../css/profiledetails.css'\r\nimport axios from 'axios';\r\nimport {useUser } from '../contexts/userprovider';\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport {Avatar, IconButton,makeStyles } from '@material-ui/core';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport Picker from 'emoji-picker-react';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      \"&:hover\": {\r\n        backgroundColor: \"transparent\"\r\n  \r\n      }}\r\n    });\r\n\r\nfunction ProfileDetails({backToConversations}) \r\n{\r\n  const {info,contacts,updateInformation} = useUser()\r\n  const {updateConversationParticipant} = useConversations()\r\n  const [previewImage,setPreviewImage]=useState(info.imageName)\r\n  const [editNameFlag,setEditNameFlag] = useState(false)\r\n  const [editStatusFlag,setEditStatusFlag] = useState(false)\r\n  const [emojiFlag,setEmojiFlag]=useState(false)\r\n  const [Text,setText] = useState(info.name)\r\n  const [Status,setStatus] = useState(info.status)\r\n  const [statusEmojiFlag,setStatusEmojiFlag]=useState(false)\r\n  const classes = useStyles();\r\n\r\n\r\n  //add emoji to name\r\n  const onEmojiClick = (event, emojiObject) => \r\n  {\r\n    setText(prevText => prevText + emojiObject.emoji)\r\n  };\r\n\r\n\r\n  //add emoji to status \r\n  const onStatusEmojiClick = (event, emojiObject) => \r\n  {\r\n    setStatus(prevStatus => prevStatus + emojiObject.emoji)\r\n  };\r\n\r\n\r\n  //change profile picture  and update users on real time\r\n  async function handleFileUpload(e)\r\n  {\r\n\r\n    let picturePath=''\r\n    \r\n    const data = new FormData()\r\n    data.append('file',e.target.files[0])\r\n    data.append(\"upload_preset\",\"whatsApp_clone\")\r\n    data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n       \r\n    try\r\n    {\r\n\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n      picturePath =response.data.url\r\n      \r\n      let user = {name:info.name,phone: info.phone,imageName:picturePath,contacts:contacts,LastSeen:info.LastSeen,Status:info.Status,color:info.color}\r\n      let userToContacts={id:sessionStorage['id'],name: Text,phone: info.phone,imageName:picturePath,Status:info.Status,color:info.color}\r\n      updateConversationParticipant(userToContacts,'image',picturePath)\r\n      updateInformation(user,userToContacts)\r\n\r\n    }catch(err){console.log(err)}\r\n\r\n    setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n\r\n  }\r\n\r\n\r\n   //change user nickname  and update users on real time\r\n  async function changeProfileName()\r\n  {\r\n    let user = {name: Text,phone: info.phone,imageName:info.imageName,contacts:contacts,LastSeen:info.LastSeen,Status:info.Status,color:info.color}\r\n    let userToContacts={id:sessionStorage['id'],name: Text,phone: info.phone,imageName:info.imageName,Status:info.Status}\r\n\r\n    updateConversationParticipant(userToContacts,'name',Text)\r\n    updateInformation(user,userToContacts)\r\n    setEmojiFlag(false)\r\n    setEditNameFlag(false)\r\n\r\n  }\r\n\r\n\r\n   //change status  and update users on real time\r\n  async function changeProfileStatus()\r\n  {\r\n\r\n    let user = {name:info.name,phone: info.phone,imageName:info.imageName,contacts:contacts,LastSeen:info.LastSeen,Status:Status,color:info.color}\r\n    let userToContacts={id:sessionStorage['id'],name:info.name,phone: info.phone,imageName:info.imageName,Status:Status}\r\n\r\n    updateConversationParticipant(userToContacts,'status',Status)\r\n    updateInformation(user,userToContacts)\r\n    setStatusEmojiFlag(false)\r\n    setEditStatusFlag(false)\r\n\r\n  }\r\n\r\n\r\n\r\n    return (\r\n        <div className='show_details'>\r\n            <header className='profile_title'>\r\n              <div className='title_and_back_to_conversations'>\r\n                <IconButton onClick={()=>backToConversations()}>\r\n                   <ArrowBackIcon style={{height:'30px',width:'30px'}}  />\r\n                </IconButton>\r\n                <h2 className='title_h2'> Profile </h2>\r\n              </div>\r\n\r\n            </header>\r\n\r\n            <div className='profile_details_body'>\r\n\r\n              <div className='profile_pic'>\r\n                 <Avatar  src={previewImage} style={{height: '170px', width: '170px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}> </Avatar>\r\n                 <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white',curser:'pointer'}}>\r\n                     <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                     <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                     <span style={{fontSize:'10px'}}>Change Picture </span>\r\n                 </div>\r\n              </div>\r\n\r\n              <span className='profile_details'>\r\n                <h3 className='edit_title'>your name:</h3>\r\n                {editNameFlag?\r\n                   <div>\r\n                      {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' ,height:'200px'}}/> : ''}\r\n                      <div className='edit_group_name' style={{margin:'10px',padding:'5px'}}>\r\n                        <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeProfileName()}>\r\n                          <CheckIcon fontSize='large'/>\r\n                        </IconButton>\r\n                        <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setEmojiFlag(!emojiFlag)}>\r\n                          <InsertEmoticonIcon fontSize='large'/>\r\n                        </IconButton>\r\n                        <input className='input_text' defaultValue={Text} onChange={(e)=>setText(e.target.value)} ></input>\r\n                      </div>\r\n                    </div>\r\n                    :\r\n                    <div className='edit_details'>\r\n                      <IconButton onClick={()=>setEditNameFlag(true)}>\r\n                        <EditIcon style={{fontSize:'large'}}/>\r\n                      </IconButton>\r\n                      <h3>{info.name}</h3>\r\n                    </div>}\r\n                  </span>\r\n\r\n              <span className='profile_details'>\r\n\r\n              <h3 className='edit_title'>status:</h3>\r\n              {editStatusFlag?\r\n                <div>\r\n                  {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onStatusEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' ,height:'200px'}}/> : ''}\r\n                  <div className='edit_group_name' style={{margin:'10px',padding:'5px'}}>\r\n                    <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeProfileStatus()}>\r\n                      <CheckIcon fontSize='large'/>\r\n                    </IconButton>\r\n                    <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setStatusEmojiFlag(!statusEmojiFlag)}>\r\n                      <InsertEmoticonIcon fontSize='large'/>\r\n                    </IconButton>\r\n                    <input className='input_text' defaultValue={Status} onChange={(e)=>setStatus(e.target.value)} ></input>\r\n                  </div>\r\n                </div>:\r\n                <div className='edit_details'>\r\n                  <IconButton onClick={()=>setEditStatusFlag(true)}>\r\n                    <EditIcon style={{fontSize:'large'}}/>\r\n                  </IconButton>\r\n                  <h3 style={{fontSize:'15px'}}>{info.Status}</h3>\r\n                </div>}\r\n              </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileDetails\r\n","import '../css/sidebar.css'\r\nimport React from 'react'\r\nimport { useState} from 'react';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\r\nimport { Avatar, IconButton,Button, Modal } from '@material-ui/core';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Conversations from './conversations';\r\nimport Contacts from './contacts';\r\nimport AddNewContact from './addnewcontact'\r\nimport { useUser } from '../contexts/userprovider';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {useConversations } from '../contexts/conversationsprovider';\r\nimport CreateNewGroup from './createnewgroup';\r\nimport ProfileDetails from './profiledetails';\r\n\r\n\r\n\r\n\r\nexport default function SideBar() \r\n{\r\n  const [choosenAct,setChoosenAct]=useState('conversations')\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n  const {info,getSearchContacts} =useUser()\r\n  const [searchFlag,setSearchFlag] =useState(false)\r\n  const {getSearchConverastions} = useConversations()\r\n  const [choosenModal,setChoosenModal] =useState('')\r\n  const [openProfileDetailsFlag,setOpenProfileDetailsFlag]=useState(false)\r\n    \r\n    \r\n  function handleChange(e)\r\n  {\r\n    if(choosenAct === 'conversations')\r\n      getSearchConverastions(e.target.value)\r\n\r\n    else getSearchContacts(e.target.value)\r\n\r\n  }\r\n\r\n  function closeModal() \r\n  {\r\n    setModalOpen(false)\r\n  }\r\n\r\n  function openChoosenModal(modalType)\r\n  {\r\n    setModalOpen(true)\r\n    setChoosenModal(modalType)\r\n  }\r\n\r\n  function backToConversationsCallback()\r\n  {\r\n    setOpenProfileDetailsFlag(false)\r\n  }\r\n\r\n  return (\r\n    \r\n    <div className='sideBar'>\r\n\r\n      {openProfileDetailsFlag? <ProfileDetails backToConversations={backToConversationsCallback}/>:\r\n        <div>\r\n          <div className='sidebar_top'>\r\n            <div className='user_profile_pic' onClick={()=> setOpenProfileDetailsFlag(true)}>\r\n              <Avatar src={info.imageName} fontSize='large' />\r\n            </div>\r\n            <div className='sidebar_top_right'>\r\n              <IconButton onClick={()=>setChoosenAct('conversations')}>\r\n                <ChatIcon fontSize='large' />\r\n              </IconButton>\r\n              <IconButton fontSize='large' onClick={()=>setChoosenAct('contacts')}>\r\n                <PeopleIcon  fontSize='large'  />\r\n              </IconButton>\r\n              <IconButton >\r\n                <MoreVertIcon />\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n         \r\n          {searchFlag?  \r\n          <div className='activeSearch' >\r\n            <div className='arrowButton'>\r\n              <IconButton onClick={()=>setSearchFlag(false)} >\r\n                <ArrowBackIcon fontSize='large' />\r\n              </IconButton>\r\n            </div>\r\n            <input className='searchBlock' type='text' onChange={handleChange}/> \r\n          </div>\r\n          :\r\n          <div className='searchBar'>\r\n            <div className='searchContainer' >\r\n              <SearchOutlined/>\r\n              <input placeholder='search' type='text' onClick={()=>setSearchFlag(true)}/>\r\n            </div>\r\n          </div>}\r\n           \r\n          {choosenAct==='contacts'?\r\n            <div>\r\n              <div className='sidebar_middle'>\r\n                <Button style={{fontSize:'10px'}} onClick={()=>openChoosenModal('NEW_CONTACT')}className='add_new_Button' >\r\n                  Add New Contact\r\n                </Button>\r\n              </div>\r\n              <div className='sidebar_bottom'>\r\n                <Contacts newConversationCallback={()=> setChoosenAct('conversations')}  openModalCallback={()=>openChoosenModal('NEW_GROUP')}/>\r\n              </div>\r\n            </div>\r\n            :   \r\n            <div className='sidebar_bottom'><Conversations/></div>}\r\n           \r\n            <Modal  className='Modal' open={modalOpen} onClose={closeModal} >\r\n              <div>\r\n                {choosenModal === 'NEW_GROUP' ? \r\n                <CreateNewGroup closeModal={closeModal}  /> :\r\n                <AddNewContact closeModal={closeModal} /> } \r\n              </div>\r\n            </Modal>\r\n        </div>}\r\n\r\n      </div>\r\n    )\r\n}\r\n","import React, { useState ,useEffect} from 'react'\r\nimport {useUser } from '../contexts/userprovider'\r\nimport {useConversations } from '../contexts/conversationsprovider'\r\nimport {Avatar,IconButton} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport '../css/addnew.css'\r\n\r\nfunction AddGroupMember({closeModal}) \r\n{\r\n\r\n    const [selectedContactsId, setSelectedContactsId] = useState([])\r\n    const {contacts,info } = useUser()\r\n    const {UpdateConversation,selectedConversation} = useConversations()\r\n    const [conversationContacts,setConversationContacts]=useState([])\r\n\r\n  \r\n    //save ids of group participants so they wont show in add to group list\r\n    useEffect(() =>\r\n    { \r\n        let ids=[]\r\n        selectedConversation.Participants.forEach((participant)=>\r\n        {\r\n           ids.push(participant.id)\r\n        }) \r\n        setConversationContacts(ids)\r\n\r\n    },[selectedConversation.Participants])\r\n\r\n    function AddMember()\r\n    {\r\n        let newParticipants= []\r\n        newParticipants=selectedConversation.Participants\r\n        let messages=selectedConversation.Messages\r\n        let message=''\r\n\r\n        //add choosen contacts to group participants\r\n        contacts.forEach(contact=>\r\n        {\r\n            if(selectedContactsId.includes(contact.id))\r\n            {\r\n                newParticipants.push(contact)\r\n                message={name:\"manager\",message: info.name +\" added \" + contact.name + \" to the group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n                messages.push(message)\r\n            }\r\n\r\n        })\r\n\r\n        let updatedConversation={...selectedConversation,Participants:newParticipants,Messages:messages,LastMessage:message}\r\n        UpdateConversation(updatedConversation)\r\n        closeModal()\r\n\r\n    }\r\n\r\n    //on checkbox Click,if exists- remove from list,if not-add to list\r\n    function handleCheckboxChange(contactId) \r\n    {\r\n       \r\n        if(selectedContactsId.includes(contactId))\r\n        {\r\n            setSelectedContactsId(prevSelectedContactsId =>\r\n            {\r\n                return (prevSelectedContactsId.filter(id=> id!==contactId))\r\n            } )\r\n        }\r\n  \r\n        else\r\n        {\r\n           setSelectedContactsId(prevSelectedContactsId=>\r\n            {\r\n              return [...prevSelectedContactsId,contactId]\r\n            })\r\n        } \r\n\r\n    }\r\n\r\n    return (\r\n       <div className='add_new'>\r\n           <div className='add_new_group_border'>\r\n               <div className='new_conversation new_group'>\r\n                   <div style={{flex:'1'}} className='title_and_close'>\r\n                       <h2 className='add_contact_title' style={{marginLeft:'80px',paddingRight:'0px'}}>Select Members:</h2> \r\n                       <IconButton style={{marginLeft:'40px'}}className='close_add_new'  onClick={()=>closeModal()}>\r\n                          <CloseIcon fontSize='large' /> \r\n                       </IconButton>\r\n                   </div>\r\n                   <div style={{overflowY:'overlay',height:'200px'}}>\r\n                       {contacts.map(contact =>\r\n                       {\r\n                         //show only user contacts that are not in the group\r\n                         if(!(conversationContacts.includes(contact.id)))\r\n                         {\r\n                           return(\r\n                               <div className='contact_item' >\r\n                                   <input type=\"checkbox\" value={selectedContactsId.includes(contact.id)}\r\n                                    id={contact.id} onChange={() => handleCheckboxChange(contact.id)}/>\r\n                                   <label style={{display:'flex',flexDirection:'row',alignItems:'center',width:'100%'}}for={contact.id} >\r\n                                      <Avatar  style={{margin:'5px'}} src={process.env.PUBLIC_URL + contact.imageName}   fontSize='large'/>\r\n                                      <h3 className='enter_phone' style={{marginLeft:'10px' ,fontWeight:'400'}}>{contact.name} </h3>\r\n                                   </label>\r\n                               </div>\r\n                            )}\r\n\r\n                         else return ''\r\n            \r\n                        }) } \r\n             \r\n                   </div>\r\n                   <div style={{display:'flex' , justifyContent:'center'}}>\r\n                        <button className='add_new_button'  type=\"submit\" onClick={()=>AddMember()}>Add</button>\r\n                   </div>\r\n\r\n               </div>\r\n           </div>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default AddGroupMember\r\n","import React from 'react'\r\nimport '../css/sidebar.css'\r\nimport axios from 'axios';\r\nimport { useState,useEffect} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { useUser } from '../contexts/userprovider';\r\nimport { Avatar ,IconButton,makeStyles,Modal} from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport Picker from 'emoji-picker-react';\r\nimport PersonAdd from '@material-ui/icons/PersonAdd';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport AddGroupMember from './addgroupmember';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      \"&:hover\": {\r\n        backgroundColor: \"transparent\"\r\n  \r\n      }}\r\n    });\r\n  \r\n\r\nfunction ShowGroupDetails() {\r\n\r\n    const {selectedConversation,createConversation,conversations,setSelectedConversation,UpdateConversation} = useConversations()\r\n    const [EditGroupNameGlag,setEditGroupNameGlag]=useState(false)\r\n    const [EditGroupDescriptionGlag,setEditGroupDescriptionGlag]=useState(false)\r\n    const [emojiFlag,setEmojiFlag]=useState(false)\r\n    const [Text,setText] = useState(selectedConversation.Name)\r\n    const [Description,setDescription] = useState(selectedConversation.description)\r\n    const {info} = useUser()\r\n    const classes = useStyles();\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const [dialogOpen, setDialogOpen] = useState(false)\r\n    const [deleteUserDialog,setDeleteUserDialog]= useState(false)\r\n    const [userToDelete,setUserToDelete] = useState()\r\n    const [previewImage,setPreviewImage]=useState(selectedConversation.ConversationImage)\r\n\r\n\r\n       \r\n    useEffect(()=>\r\n    {\r\n        setEditGroupNameGlag(false)\r\n        setEditGroupDescriptionGlag(false)\r\n        setEmojiFlag(false)\r\n\r\n    },[selectedConversation])\r\n  \r\n  \r\n    const onEmojiClick = (event, emojiObject) =>\r\n    {\r\n        setText(Text + emojiObject.emoji)\r\n    };\r\n  \r\n    const onDescriptionEmojiClick = (event, emojiObject) =>\r\n    {\r\n        setDescription(Description + emojiObject.emoji)\r\n    };\r\n  \r\n    function changeGroupName()\r\n    {\r\n        let message={name:\"manager\",message: info.name +\" changed group name to \" + Text,timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n        let messages=selectedConversation.Messages\r\n        messages.push(message)\r\n        let updatedConversation={...selectedConversation,Name:Text,Messages:messages,LastMasage:message}\r\n        UpdateConversation(updatedConversation)\r\n        setEditGroupNameGlag(false)\r\n    }\r\n  \r\n    function openConversation(participant)\r\n    {\r\n        let existsFlag=false\r\n\r\n        conversations.forEach(conversation=>\r\n        {\r\n            if(conversation.isGroup === false && conversation.Participants[0].id === participant.id)\r\n            {\r\n              existsFlag=true\r\n              setSelectedConversation(conversation)\r\n            }\r\n              \r\n        })\r\n\r\n        if(!existsFlag)\r\n        {\r\n            let participantId=[]\r\n            participantId.push(participant.id)\r\n            createConversation(participantId, participant.name, participant.imageName,false)\r\n        }\r\n        \r\n    }\r\n  \r\n    function changeGroupDescription()\r\n    {\r\n         let message={name:\"manager\",message: info.name +\" changed group Description\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n         let messages=selectedConversation.Messages\r\n         messages.push(message)\r\n         let updatedConversation={...selectedConversation,description:Description,Messages:messages,LastMessage:message}\r\n         UpdateConversation(updatedConversation)\r\n         setEditGroupDescriptionGlag(false)\r\n    }\r\n  \r\n    function removeFromGroup()\r\n    {\r\n       let message={name:\"manager\",message: info.name +\" left the group\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n       let messages=selectedConversation.Messages\r\n       messages.push(message)\r\n       let updatedConversation={...selectedConversation,Messages:messages,LastMessage:message}\r\n       UpdateConversation(updatedConversation)\r\n       setDialogOpen(false)\r\n    }\r\n  \r\n    function beforeDeleteUser(participant)\r\n    {\r\n       setUserToDelete(participant)\r\n       setDeleteUserDialog(true)\r\n    }\r\n  \r\n    function removeUserFromGroup()\r\n    {\r\n       let messages=selectedConversation.Messages\r\n       let message={name:\"manager\",message: info.name +\" removed \" + userToDelete.name + \" from the group \",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n       messages.push(message)\r\n       let participants= selectedConversation.Participants.filter(participant=> participant.id !== userToDelete.id)\r\n       let updatedConversation={...selectedConversation,Participants:participants,Messages:messages,LastMessage:message}\r\n       UpdateConversation(updatedConversation)\r\n       setUserToDelete()\r\n       setDeleteUserDialog(false)\r\n    }\r\n  \r\n    function closeModal()\r\n    {\r\n       setModalOpen(false)\r\n    }\r\n\r\n    async function handleFileUpload(e)\r\n    {\r\n       setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n        let picturePath=''\r\n    \r\n        const data = new FormData()\r\n        data.append('file',e.target.files[0])\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n       \r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n          picturePath =response.data.url\r\n\r\n        }catch(err){console.log(err)}\r\n\r\n\r\n        let messages=selectedConversation.Messages\r\n        let message={name:\"manager\",message: info.name +\" changed group picture\",timeSent:'',containsImage:false,containsRecord:false,recordURL:null}\r\n        messages.push(message)\r\n        let updatedConversation={...selectedConversation,ConversationImage:picturePath,Messages:messages,LastMessage:message}    \r\n        UpdateConversation(updatedConversation)\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n           <div className='user_info'>\r\n              <div className='change_group_image'> \r\n                 <Avatar  src={previewImage} style={{height: '150px', width: '150px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}> </Avatar>\r\n                 <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white',curser:'pointer'}}>\r\n                    <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                    <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                    <span style={{fontSize:'10px'}}>Change Picture </span>\r\n                 </div>\r\n              </div>\r\n              <span className='name_and_lastSeen'>\r\n                {EditGroupNameGlag?\r\n                   <div style={{display:'flex',flexDirection:'column'}}>\r\n                     {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' ,height:'200px'}}/> : ''}\r\n                     <div className='edit_group_name'>\r\n                        <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeGroupName()}>\r\n                           <CheckIcon fontSize='large'/>\r\n                        </IconButton>\r\n                        <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setEmojiFlag(!emojiFlag)}>\r\n                            <InsertEmoticonIcon fontSize='large'/>\r\n                        </IconButton>\r\n                       <input className='input_text' defaultValue={Text} onChange={(e)=>setText(e.target.value)}></input>\r\n                     </div>\r\n                  </div>:\r\n                  <span className='group_title'>\r\n                     <h3>{selectedConversation.Name}</h3>\r\n                     <IconButton onClick={()=>setEditGroupNameGlag(true)}>\r\n                         <EditIcon style={{fontSize:'large',marginLeft:'10px'}}/>\r\n                     </IconButton>\r\n                  </span>}\r\n                \r\n                 <span className='lastSeen' style={{padding:'10px',paddingLeft:'0px'}}> created at:  {selectedConversation.createdDate} </span>\r\n              </span>\r\n            </div>\r\n\r\n            <div className='group_details_container'>\r\n               <h2 className='group_title' style={{padding:'5px'}}> Description </h2>\r\n              {EditGroupDescriptionGlag?\r\n                <div style={{display:'flex',flexDirection:'column'}}>\r\n                  {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onDescriptionEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' ,height:'200px'}}/> : ''}\r\n                  <div className='edit_group_name' style={{padding:'5px'}}>\r\n                    <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>changeGroupDescription()}>\r\n                        <CheckIcon fontSize='large'/>\r\n                     </IconButton>\r\n                    <IconButton className={classes.root} style={{padding:'3px'}} onClick={()=>setEmojiFlag(!emojiFlag)}><InsertEmoticonIcon fontSize='large'/></IconButton>\r\n                    <input className='input_text' defaultValue={Description} onChange={(e)=>setDescription(e.target.value)} ></input>\r\n                  </div>\r\n                </div>:\r\n                <div className='group_description_edit'>\r\n                  <span style={{fontSize:'15px',marginRight:'5px'}}>\r\n                      {selectedConversation.description}\r\n                  </span>\r\n                  <IconButton onClick={()=>setEditGroupDescriptionGlag(true)}>\r\n                      <EditIcon style={{fontSize:'large'}}/>\r\n                  </IconButton>\r\n                </div>}\r\n             \r\n            </div>\r\n\r\n            <div className='group_details_container'>\r\n               <h2 className='group_title' style={{ padding:'10px' ,borderBottom:'1px solid #B0B0B0'}}>\r\n                   {selectedConversation.Participants.length +1} participants\r\n               </h2>\r\n               <Modal className='Modal' open={modalOpen} onClose={closeModal} >\r\n                  <AddGroupMember closeModal={closeModal}  /> \r\n               </Modal>\r\n\r\n               {selectedConversation.creatorId===sessionStorage['id']?\r\n                   <div className='participant' style={{cursor:'pointer',fontSize:'15px'}} onClick={()=>setModalOpen(true)} >\r\n                      <Avatar>\r\n                         <IconButton className={classes.root} style={{padding:'3px'}}>\r\n                            <PersonAdd fontSize='large'/>\r\n                         </IconButton>\r\n                      </Avatar>\r\n                      <h3 className='group_participant_name'>Add Member</h3>\r\n                   </div>:''}\r\n\r\n               {selectedConversation.Participants.map((participant,index)=>\r\n               {\r\n                  return(\r\n                   <div  key={index} className='participant' >\r\n                     <div onClick={()=>openConversation(participant)} style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center',cursor:'pointer'}}>\r\n                         <Avatar src={participant.imageName}/>\r\n                         <div  style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center'}}>\r\n                           <h3 className='group_participant_name'>{participant.name}</h3>\r\n                           {participant.id===selectedConversation.creatorId?\r\n                             <div className='group_admin'>\r\n                                <h3 style={{fontSize:'13px'}}>Group Manager</h3>\r\n                             </div>\r\n                           :''}\r\n                         </div >\r\n                     </div>\r\n                     {sessionStorage['id'] === selectedConversation.creatorId?\r\n                        <IconButton  onClick={()=>beforeDeleteUser(participant)} style={{padding:'3px'}}>\r\n                          <CloseIcon fontSize='medium'/>\r\n                        </IconButton>\r\n                     :''}\r\n                   </div>)\r\n                })}\r\n\r\n                <div  className='participant'>\r\n                   <div style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center'}}>\r\n                     <Avatar src={info.imageName}/>\r\n                     <div style={{display:'flex',flexGrow:'1',flexDirection:'row',alignItems:'center'}}>\r\n                         <h3 className='group_participant_name'>{info.name}</h3>\r\n                         {sessionStorage['id']===selectedConversation.creatorId?\r\n                           <div className='group_admin'>\r\n                               <h3 style={{fontSize:'13px'}}>Group Manager</h3>\r\n                           </div>\r\n                          :''}\r\n                     </div >\r\n                   </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='group_details_container leave' onClick={()=>setDialogOpen(true)} >\r\n                <div className='leaveGroup'>\r\n                    <IconButton className={classes.root} style={{padding:'3px'}} >\r\n                      <ExitToAppIcon style={{color:'darkred'}}fontSize='large'/>\r\n                    </IconButton>\r\n                     <h3 className='group_participant_name' style={{color:'darkRed',fontSize:'17px'}}>leave Group</h3>\r\n                </div>\r\n            </div>\r\n\r\n            <Dialog className='exit_group_dialog' onClose={()=> setDialogOpen(false)}  open={dialogOpen}>\r\n               <div style={{padding:'10px'}}>\r\n                 <h2 className='dialog_title'> are you sure you want to leave this group?</h2>\r\n                 <div className='dialog_options_buttons'>\r\n                   <button className='dialog_button' onClick={()=>removeFromGroup()} >yes</button>\r\n                   <button className='dialog_button' onClick={()=>setDialogOpen(false)}>no</button>\r\n                 </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n\r\n            <Dialog className='exit_group_dialog' onClose={()=> setDeleteUserDialog(false)}  open={deleteUserDialog}>\r\n               <div style={{padding:'10px'}}>\r\n                 <h2 className='dialog_title'> are you sure you want to delete this user?</h2>\r\n                 <div className='dialog_options_buttons'>\r\n                   <button className='dialog_button' onClick={()=>removeUserFromGroup()} >yes</button>\r\n                   <button className='dialog_button' onClick={()=>setDeleteUserDialog(false)}>no</button>\r\n                 </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowGroupDetails\r\n","import React from 'react'\r\nimport {useState} from 'react'\r\nimport {useConversations } from '../contexts/conversationsprovider';\r\nimport {Avatar} from '@material-ui/core'\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nfunction ShowUserDetails({privateConversationHeader}) {\r\n\r\n    const {selectedConversation} = useConversations()\r\n    const [pictureDialogOpen,setPictureDialogOpen]=useState(false)\r\n\r\n\r\n    return (\r\n\r\n        <div className='user_info'>\r\n           <div onClick={()=>setPictureDialogOpen(true)}>\r\n               <Avatar  src={selectedConversation.Participants[0].imageName} style={{margin:'20px',height:'150px',width:'150px'}}/>\r\n           </div>\r\n\r\n           <Dialog className='open_picture_dialog' onClose={()=> setPictureDialogOpen(false)}  open={pictureDialogOpen}>\r\n              <img src={selectedConversation.ConversationImage} alt=''/>\r\n           </Dialog>\r\n\r\n     \r\n           <span className='name_and_lastSeen' style={{paddingBottom:'0px'}}>\r\n              {console.log('here')}\r\n              <span className='group_title'>\r\n                 <h3>{selectedConversation.Name}</h3>\r\n              </span>\r\n     \r\n              <span className='lastSeen' style={{padding:'10px',paddingLeft:'0px'}}>\r\n                  {privateConversationHeader()}\r\n              </span>\r\n           </span>\r\n       \r\n      </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ShowUserDetails\r\n","import {useState} from 'react'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport {useConversations} from '../contexts/conversationsprovider'\r\n\r\nfunction Message({sender,message}) \r\n{\r\n  const [modalOpen,setModalOpen] = useState(false)\r\n  const [SelectedImageURL,setSelectedImageURL] =useState(null)\r\n  const {selectedConversation} = useConversations()\r\n\r\n  function openImage(URL)\r\n  {\r\n    setModalOpen(true)\r\n    setSelectedImageURL(URL)  \r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <div className={sender}>  \r\n      <div className='message' >\r\n        <div className='image_and_sender'>\r\n\r\n          {selectedConversation.isGroup?\r\n          <div className='sender' style={{color:message.color}} >\r\n             {message.name} \r\n          </div>\r\n          :\r\n          <div className='sender' >\r\n          {message.name} \r\n          </div>}\r\n\r\n          {message.containsImage? \r\n          <img className='image_in_message' src={message.imageURL} alt='' onClick={()=>openImage(message.imageURL)} width='200px' height='200px' /> \r\n           : ''}\r\n        </div>\r\n        <div>\r\n          <div className='message_and_time'>\r\n            <div className='message_content'  >{message.message}</div> \r\n            <div className='message_time_border'>\r\n              <div className='message_time'>\r\n                {(message.timeSent).substring(11,17)}\r\n              </div>\r\n            </div>\r\n          </div> \r\n        </div>\r\n\r\n        <Dialog onClose={()=> setModalOpen(false)}  open={modalOpen}>\r\n          <img src={SelectedImageURL} alt=''/>\r\n        </Dialog>\r\n      </div>\r\n    </div> \r\n  )}\r\n\r\nexport default Message\r\n\r\n","import React from 'react'\r\nimport { Avatar } from '@material-ui/core'\r\nimport '../css/audiomessage.css'\r\n\r\nfunction AudioMessage({message,sender,image})\r\n{\r\n\r\n  const messageColor = sender.includes('chat_reciever')?  'reciever':'sender' \r\n\r\n  return (\r\n    \r\n    <div className={sender}>  \r\n      <div className='message_with_audio'>\r\n        <div className={messageColor}>\r\n            {sender === \"message_out\"?\r\n            <div className='audio_and_avatar'> \r\n                <audio   controls controlsList=\"nodownload\" >\r\n                  <source src={message.recordURL} type=\"audio/mp3\"/>\r\n                </audio>\r\n                <Avatar src={image} style={{ height: '50px', width: '50px',margin:'5px' }}/>\r\n            </div>\r\n               :\r\n            <div className='audio_and_avatar'> \r\n                <Avatar src={image} style={{ height: '50px', width: '50px',margin:'5px' }}/>\r\n                <audio   controls controlsList=\"nodownload\" >\r\n                  <source src={message.recordURL} type=\"audio/mp3\"/>\r\n                </audio>\r\n            </div>}\r\n            <span className='message_time'>{(message.timeSent).substring(11,17)}</span> \r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default AudioMessage\r\n","import React from 'react'\r\nimport {useState ,useCallback,useEffect,useRef} from 'react'\r\nimport {useConversations} from '../contexts/conversationsprovider';\r\nimport {useSocket} from '../contexts/socketprovider';\r\nimport {useUser} from '../contexts/userprovider';\r\nimport {IconButton,Dialog } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Picker from 'emoji-picker-react';\r\nimport { useReactMediaRecorder } from \"react-media-recorder\";\r\nimport axios from 'axios'\r\nimport Message from './message';\r\nimport AudioMessage from './audiomessage';\r\n\r\n\r\nfunction ChatBody(props) {\r\n\r\n  const [Text,setText] = useState('')\r\n  const {socket} = useSocket()\r\n  const {info} = useUser()\r\n  const {sendMessage,selectedConversation,removedFromGroupFlag,setRemovedFromGroupFlag,setSelectedConversation} = useConversations()\r\n  const inputRef = useRef(null)\r\n  const [emojiFlag,setEmojiFlag] = useState(false)\r\n  const [recordFlag,setRecordFlag] =useState(false)\r\n  const {startRecording,stopRecording,mediaBlobUrl,clearBlobUrl} = useReactMediaRecorder({audio: true })\r\n  const [audioBlob,setAudioBlob] = useState(null)\r\n\r\n  //make messages scrolling down when message sent\r\n  const setRef = useCallback((node) => \r\n  {\r\n    if(node)\r\n      node.scrollIntoView({smooth:true})\r\n\r\n  },[])\r\n  \r\n  useEffect(()=>\r\n  {\r\n    setEmojiFlag(false)\r\n\r\n  },[selectedConversation])\r\n\r\n  \r\n\r\n  //when audio message sent, upload it to cloudinary and send it to conversation participants\r\n  useEffect( () => \r\n  {\r\n\r\n    async function fetchData() \r\n    {\r\n      if(audioBlob != null)\r\n      {\r\n        let audio= await fetch(mediaBlobUrl).then(res=> res.blob())\r\n        const data = new FormData();\r\n           \r\n        data.append('file', audio);\r\n        data.append('resource_type', 'video');\r\n        data.append(\"upload_preset\",\"whatsApp_clone\")\r\n        data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n\r\n\r\n        try\r\n        {\r\n          let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/video/upload\",data)\r\n          let recordURL = response.data.url\r\n          recordURL=(recordURL.slice(0,-4))\r\n          recordURL+= 'mp3'\r\n          setRecordFlag(false)\r\n          clearBlobUrl()\r\n          sendMessage(Text,null,null,recordURL)\r\n          setRecordFlag(false)\r\n  \r\n        }catch(err){console.log(err)}\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n \r\n  },[audioBlob])\r\n\r\n\r\n  //when typing, let conversation participants know\r\n  function typing(e)\r\n  {\r\n\r\n    setText(e.target.value)\r\n    if (socket.current == null) return;\r\n      socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n\r\n  }\r\n\r\n\r\n  //send message to conversation participants\r\n  function handleSubmit(e)\r\n  {\r\n    e.preventDefault()\r\n    sendMessage(Text,false,null,null)\r\n    setText(' ')\r\n\r\n  }\r\n\r\n\r\n  //upload image to cloudinary\r\n  async function handleImage(e)\r\n  {\r\n\r\n    const data = new FormData()\r\n    data.append('file',e.target.files[0])\r\n    data.append(\"upload_preset\",\"whatsApp_clone\")\r\n    data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n    try\r\n    {\r\n\r\n      let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n      props.imageCallback(response.data.url)\r\n      }catch(err){console.log(err)}\r\n\r\n    }\r\n\r\n\r\n  //when record start\r\n  function recordStart()\r\n  {\r\n\r\n    setRecordFlag(true)\r\n    startRecording()\r\n\r\n  }\r\n \r\n  //when record sent\r\n  async function handleRecord()\r\n  {\r\n    stopRecording()\r\n    let res = await fetch(mediaBlobUrl)\r\n    setAudioBlob(res.blob())     \r\n  }\r\n\r\n\r\n  //when record canceled\r\n  function cancelRecord()\r\n  {\r\n    stopRecording()\r\n    clearBlobUrl()\r\n    setRecordFlag(false)\r\n  }\r\n\r\n\r\n  //when recording, show recording div\r\n  function updateRecordingDiv()\r\n  {\r\n    let recordDiv = \r\n    <div>\r\n      <IconButton>\r\n        <CloseIcon fontSize='large' style={{color:'red'}} onClick={cancelRecord} />\r\n      </IconButton>\r\n      <IconButton>\r\n        <CheckIcon fontSize='large'style={{color:'green'}} onClick={handleRecord} />\r\n      </IconButton>\r\n    </div>\r\n\r\n    return recordDiv\r\n  \r\n  }\r\n\r\n  //if removed from group when group chat is on, dont show this group chat\r\n  function handleRemovedFromGroup()\r\n  {\r\n\r\n    setRemovedFromGroupFlag(false)\r\n    setSelectedConversation()\r\n\r\n  }\r\n    \r\n\r\n  //add emoji to message\r\n  const onEmojiClick = (event, emojiObject) => \r\n  {\r\n    setText(Text + emojiObject.emoji)\r\n  };\r\n\r\n\r\n\r\n  return(\r\n\r\n    <div className= 'body_and_footer'>\r\n        <div className='chat_body'>\r\n\r\n          {selectedConversation.Messages.map((message,index)=>\r\n          {\r\n            const lastMessage = selectedConversation.Messages.length -1 === index\r\n            let sender= ''\r\n            sender= message.name==='manager'? 'manager':( message.id===sessionStorage['id']? 'message_out' : 'message_in')\r\n            let image=message.id===sessionStorage['id']? info.imageName :selectedConversation.ConversationImage\r\n            let choosenClass = sender==='message_in'? 'chat_message chat_sender': ' chat_message chat_reciever'\r\n\r\n            return (\r\n              <div key={index}>\r\n                {sender === 'manager'?\r\n                <div className='around_message'ref={lastMessage ? setRef : null}>\r\n                  <div className='manager_message'>\r\n                     <span className='message_content'>{message.message}</span>\r\n                  </div>\r\n                </div>\r\n                :\r\n                <div key={index} className={choosenClass} ref={lastMessage ? setRef : null}>\r\n                  {message.containsRecord ? \r\n                  <AudioMessage message={message} sender={sender} image={image}/> : <Message  sender={sender} message={message}/>}\r\n                </div> }\r\n              </div>\r\n            )}\r\n          )}\r\n\r\n        </div>\r\n\r\n        <div className='chat_footer_with_stickers'>\r\n           {emojiFlag?  <Picker onEmojiClick={(e,emojiObject)=>onEmojiClick(e,emojiObject)} pickerStyle={{ width: '100%' }}/>: ''}\r\n            <div className='chat_footer'>\r\n              {emojiFlag? <IconButton  onClick={()=>setEmojiFlag(false)}><CloseIcon fontSize='large'/> </IconButton>:''}\r\n              <IconButton  onClick={()=>setEmojiFlag(true)}>\r\n                 <InsertEmoticonIcon fontSize='large'/>\r\n              </IconButton>\r\n              <input accept=\"image/*\" className='invisibleInput' id=\"icon-button-file\" type=\"file\"  style={{ visibility: 'hidden'}} onChange={handleImage}/>\r\n              <label htmlFor=\"icon-button-file\">\r\n                <IconButton component=\"span\">\r\n                  <ImageIcon  fontSize='large'/>\r\n                </IconButton>\r\n              </label> \r\n              <form onSubmit={handleSubmit} className='message_section'>\r\n                 <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n                 <button type='submit' > send </button>\r\n              </form>\r\n              {recordFlag? updateRecordingDiv() :   \r\n              <IconButton onClick={recordStart}>\r\n                <MicIcon fontSize='large'  />\r\n              </IconButton>}\r\n            </div>\r\n        </div>\r\n        <Dialog className='exit_group_dialog'  open={removedFromGroupFlag}>\r\n          <div style={{padding:'10px'}}>\r\n            <h2 className='dialog_title'> you where removed from this group</h2>\r\n              <div className='dialog_options_buttons'>\r\n                <button className='dialog_button' onClick={()=>handleRemovedFromGroup()} >ok</button>\r\n              </div>\r\n          </div>\r\n        </Dialog> \r\n\r\n    </div>    \r\n)}\r\n\r\nexport default ChatBody\r\n","import '../css/chat.css'\r\nimport '../css/sendimagebody.css'\r\nimport React, { useRef } from 'react'\r\nimport {useState} from 'react'\r\nimport {useConversations } from '../contexts/conversationsprovider';\r\nimport {useSocket} from '../contexts/socketprovider';\r\nimport {useUser} from '../contexts/userprovider';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {IconButton } from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nfunction SendImageBody(props) \r\n{\r\n\r\n  const inputRef = useRef(null)\r\n  const [Text,setText] = useState('')\r\n  const {socket} = useSocket()\r\n  const {info} = useUser()\r\n  const {sendMessage,selectedConversation} = useConversations()\r\n\r\n  function handleSubmit(imageFlag)\r\n  {\r\n\r\n    if(imageFlag===true)\r\n      sendMessage(Text,true,props.imageURL)\r\n\r\n    setText(' ')\r\n    props.backToChat()\r\n\r\n  }\r\n\r\n  function typing(e)\r\n  {\r\n\r\n    setText(e.target.value)\r\n\r\n    if (socket.current == null) return;\r\n      socket.current.emit(\"typing\", {user:info,Conversation:selectedConversation})\r\n\r\n  }\r\n\r\n    return (\r\n      <div className='SendImage'>\r\n        <div className='sendImageHeader'></div>\r\n          <IconButton type='submit' onClick={()=>handleSubmit(false)}>\r\n            <CloseIcon fontSize='large' /> \r\n          </IconButton>\r\n          <img src= {props.imageURL} alt='' height='300px' width='300px'/>\r\n          <div className='add_message'>\r\n            <form onSubmit={()=>handleSubmit(true)} className='message_section'>\r\n              <IconButton type='submit' style={{flex:'0.1'}}>\r\n                <SendIcon fontSize='large'/>\r\n              </IconButton>\r\n              <input className='message_input' ref={inputRef}  value={Text} onChange={typing} type='text' placeholder='type a message'/>\r\n            </form>\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default SendImageBody\r\n","import '../css/chat.css'\r\nimport '../css/sidebar.css'\r\nimport React from 'react'\r\nimport ShowGroupDetails from './showgroupdetails'\r\nimport ShowUserDetails from './showuserdetails'\r\nimport { useState} from 'react'\r\nimport { useConversations } from '../contexts/conversationsprovider';\r\nimport { Avatar ,IconButton} from '@material-ui/core'\r\nimport ChatBody from './chatbody';\r\nimport SendImageBody from './sendimagebody';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default function Chat() \r\n{\r\n\r\n  const {selectedConversation,currentConversationIsConnected,typingFlag,setTypingFlag,showDetails,setShowDetails} = useConversations()\r\n  const [imageFlag,setImageFlag] =useState(false)\r\n  const [imageURL,setImageURL] =useState(false)\r\n\r\n  //check if user is connected/disconnected/typing\r\n  const privateConversationHeader = () =>\r\n  {\r\n  \r\n    let returnValue = ''\r\n    if(currentConversationIsConnected === '')\r\n    {\r\n\r\n      if(typingFlag !== '')\r\n      {\r\n        returnValue = <div className='lastSeen'> typing...</div>\r\n        setTimeout(()=> setTypingFlag(''),1000)\r\n      }\r\n  \r\n      else returnValue = <div className='connected'><div className='circle'></div> online </div>\r\n              \r\n    }\r\n  \r\n    else returnValue = <div className='lastSeen'>{currentConversationIsConnected}</div>\r\n  \r\n  \r\n    return returnValue\r\n  \r\n  }\r\n\r\n  const groupheader = () =>\r\n  {\r\n\r\n    let returnValue = ''\r\n    if(typingFlag !== '')\r\n    {\r\n      returnValue = <div className='lastSeen'> {typingFlag} is typing...</div>\r\n      setTimeout(()=> setTypingFlag(''),1000)\r\n    }\r\n\r\n    else\r\n    {\r\n\r\n      let UsersInGroup = ''\r\n\r\n      selectedConversation.Participants.forEach((participant,index)=> \r\n      {\r\n        if(index ===  selectedConversation.Participants.length-1 )\r\n          UsersInGroup = UsersInGroup + participant.name\r\n        else\r\n          UsersInGroup= UsersInGroup + participant.name + ', '\r\n      })\r\n            \r\n      returnValue=  <div className='lastSeen'>{UsersInGroup} </div>\r\n\r\n    }\r\n\r\n    return returnValue\r\n  }\r\n\r\n  function chatBodyCallback(image)\r\n  {\r\n    setImageURL(image)\r\n    setImageFlag(true)\r\n  }\r\n\r\n  function backToChatCallback()\r\n  {\r\n    setImageURL(null)\r\n    setImageFlag(false)\r\n  }\r\n\r\n\r\n  const chatSide=\r\n    <div>\r\n      <div className='chat_header' onClick={()=>setShowDetails(true)}>\r\n        {selectedConversation.isGroup?\r\n        <Avatar src={selectedConversation.ConversationImage}/>:<Avatar src={selectedConversation.Participants[0].imageName}/>}\r\n        <div className='chat_header_info'>\r\n          <h2 style={{fontSize:'20px'}}> {selectedConversation.Name} </h2> \r\n          {selectedConversation.isGroup?  groupheader() : privateConversationHeader()}\r\n        </div>\r\n      </div>\r\n      {imageFlag? <SendImageBody imageURL={imageURL} backToChat={backToChatCallback}/>:<ChatBody imageCallback={chatBodyCallback}/>} \r\n    </div>\r\n\r\n\r\n  return (\r\n       \r\n    showDetails?\r\n      <div className='chat_with_details'>\r\n        <div className='chat narrow_chat'>\r\n          {chatSide}\r\n        </div>\r\n\r\n        <div className='chat_details'>\r\n          <div className='chat_details_top '>\r\n            <IconButton onClick={()=>setShowDetails(false)}>\r\n              <CloseIcon fontSize='large'  />\r\n            </IconButton>\r\n            <h2 style={{paddingLeft:'10px',fontSize:'22px'}}>{selectedConversation.isGroup? 'Group Details:' : 'Contact Details:' }</h2>\r\n          </div>\r\n\r\n          <span className='chat_details_body'>\r\n              {selectedConversation.isGroup? <ShowGroupDetails/>: <ShowUserDetails privateConversationHeader={privateConversationHeader}/>}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      :\r\n      <div className='chat'>\r\n        {chatSide}\r\n      </div>\r\n\r\n          \r\n    )\r\n}\r\n","import '../css/dashboard.css'\r\nimport React from 'react'\r\nimport SideBar from './sidebar'\r\nimport Chat from './chat'\r\nimport { useConversations } from '../contexts/conversationsprovider'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nexport default withRouter(function Dashboard({id}) {\r\n    const {selectedConversation} =useConversations()\r\n\r\n    return (\r\n        <div className='dashboard'>\r\n            <div className='dashboard_body'>\r\n              <SideBar/>\r\n              {selectedConversation!==undefined?  <Chat id={id}  />: ''}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import {useState} from 'react'\r\nimport '../css/login.css'\r\nimport axios from 'axios'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport {Avatar} from '@material-ui/core';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\n\r\n \r\n\r\nfunction Register(props)\r\n{\r\n\r\n  const[phone,setPhone] =useState('')\r\n  const[name,setName] =useState('')\r\n  const [Picture,setPicture] =useState(null)\r\n  const history=useHistory();\r\n  const [error,setError] =useState('')\r\n  const [previewImage,setPreviewImage]=useState()\r\n\r\n  \r\n  function getColor()\r\n  {\r\n    return ('#'+(Math.random()*0xFFFFFF<<0).toString(16))\r\n  }\r\n\r\n  //get user information and token from DB\r\n  async function handleSubmit(e)\r\n  {\r\n    e.preventDefault();\r\n        \r\n    let picturePath=''\r\n\r\n    if(Picture)\r\n    {\r\n      const data = new FormData()\r\n      data.append('file',Picture)\r\n      data.append(\"upload_preset\",\"whatsApp_clone\")\r\n      data.append(\"cloud_name\",\"dsrgpqnyv\")\r\n       \r\n      try\r\n      {\r\n        let response = await axios.post(\"https://api.cloudinary.com/v1_1/dsrgpqnyv/image/upload\",data)\r\n        picturePath =response.data.url\r\n\r\n      }catch(err){console.log(err)}\r\n\r\n    }\r\n\r\n  \r\n    let randomColor=getColor()  \r\n    let obj = {name:name,phone:phone,imageName:picturePath,contacts:[],LastSeen:'last seen at...',Status:\"hello,i'm using Message-App!\",color:randomColor}\r\n\r\n\r\n    try{\r\n         const response = await axios.post(\"https://messagesapp1.herokuapp.com/logIn/Register\",obj)\r\n         if(response.data.status === 'error')\r\n         {\r\n            setError(response.data.message)\r\n         }\r\n\r\n         else\r\n          {\r\n            sessionStorage['config']= response.data.token \r\n            sessionStorage['id'] = response.data.User._id\r\n            sessionStorage['name'] = response.data.User.name\r\n            props.CanLogIn(response.data.User._id)\r\n\r\n            history.push('/App')\r\n          }\r\n        }catch(err){console.log(err)}     \r\n  }\r\n        \r\n\r\n  function handleFileUpload(e) \r\n  {\r\n\r\n    setPicture(e.target.files[0])\r\n    setPreviewImage(window.URL.createObjectURL(e.target.files[0]))\r\n\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"overlay\">\r\n      <form className='login_form' onSubmit={handleSubmit}>\r\n         <div className=\"con\">\r\n            <header className=\"head-form\"  style={{marginBottom:'0px', paddingBottom:'0px'}}>\r\n              <h2>Register</h2>\r\n              <p>welcome to  my whatsApp</p>\r\n            </header>\r\n            <div className=\"field-set\">\r\n             {previewImage?\r\n               <div className='change_group_image'> \r\n                    <Avatar  src={previewImage} style={{height: '140px', width: '140px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}> </Avatar>\r\n                    <div className='change_image_on_hover' style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white',curser:'pointer'}}>\r\n                      <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                      <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                      <span style={{fontSize:'10px'}}>Change Picture </span>\r\n                    </div>\r\n                </div>\r\n           \r\n              :\r\n              <div className='add_Profile_Picture'>\r\n                <Avatar   style={{height: '140px', width: '140px' ,backgroundColor:'gray' ,margin:'15px',marginTop:'30px'}}>\r\n                  <PeopleAltIcon style={{position:'absolute',zIndex:'0', opacity:'0.1',height: '80px', width: '80px' }}/>\r\n                  <div  style={{display:'flex',flexDirection:'column',alignItems:'center',position:'absolute',zIndex:'1',color:'white',curser:'pointer'}}>\r\n                    <AddAPhotoIcon  style={{height: '30px', width: '30px' ,color:'white'}}/>\r\n                    <input accept=\"image/*\" id=\"file\" type=\"file\" name=\"file\" onChange={handleFileUpload}/>\r\n                    <span style={{fontSize:'10px'}}>Add Profile Picture</span>\r\n                  </div>\r\n                </Avatar>\r\n              </div> }\r\n              <span className=\"input-item\">\r\n                <i class=\"fa fa-user-circle\"></i>\r\n                <input className=\"form-input\" id=\"txt-input\" type=\"text\" placeholder=\"@UserName\" onChange={(e)=> setName(e.target.value)} required />\r\n              </span>\r\n              <span className=\"input-item\">\r\n                <i class=\"fa fa-key\"></i>\r\n                <input className=\"form-input\" type=\"password\" placeholder=\"Password\" id=\"pwd\"  name=\"password\" onChange={(e)=> setPhone(e.target.value)} required/>\r\n              </span>\r\n              <button className=\"log-in\" type='submit'> Register </button>\r\n            </div>\r\n            <div>\r\n              <Link  className=\"submits sign-up defaultLink\" to={`/`}>    <i style={{margin:'7px'}}class=\"fa fa-user-plus\" aria-hidden=\"true\"/>back to Log In</Link>\r\n            </div>\r\n            <span style={{fontSize:'15px'}}>{error}</span>\r\n          </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Register\r\n","import {useState} from 'react'\nimport LogIn from './login'\nimport Dashboard from './dashboard'\nimport {UserProvider} from '../contexts/userprovider'\nimport {ConversationsProvider} from '../contexts/conversationsprovider'\nimport { SocketProvider } from '../contexts/socketprovider'\nimport {BrowserRouter as Router,Switch, Route,Redirect} from 'react-router-dom'\nimport Register from './register'\nimport '../css/app.css'\n\n\nfunction App() \n{\n\n  const [id,setId] =useState()\n\n  const dashboard = (\n   <SocketProvider userId={id} >\n     <UserProvider id={id}>\n      <ConversationsProvider >\n        <Dashboard  id={id}/>\n      </ConversationsProvider>\n     </UserProvider>\n    </SocketProvider>\n  )\n\n  return (\n\n    <Router >\n      <div className=\"App\">\n         <Switch>\n           {sessionStorage['id']}\n            <Route exact path='/' > <LogIn CanLogIn={setId}/></Route> \n            <Route path='/Register' > <Register CanLogIn={setId}/></Route>\n            {sessionStorage['id']?  <Route exact path='/App' > {dashboard} </Route>:<Redirect to=\"/\" />}\n         </Switch>\n  \n      </div>\n\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}